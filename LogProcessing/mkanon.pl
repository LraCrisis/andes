#!/usr/bin/perl
#
# mkanon -- anonymize arbitrary userids in Andes log files, 
#            reading and updating a mapping file
#
# Usage:   mkanon.pl mapfile.txt < logs > newlogs
#
# reads one or more logs from standard input, writing anonymized logs
# to standard output. 
#
# Mapping file expected to be generated by mapid2.pl applied to list 
# of user names.
#
# This works on a concatenated sequence of logs.  If input files are 
# separate logs with user ids in their names, can write to a concatenated 
# output file, then split individual logs out from there with splitlogs.
#

# Load mapping file
my $filename = $ARGV[0]; shift @ARGV;
if (! $filename) { die "usage: mapid.pl mapfile.txt [inputfile]\n"; }

# count of ids generated with this prefix
my $id_counter = 1;

# load existing mapping from specified mapping file
open MAPFILE, "<$filename" or die "Couldn't open $filename for reading: $!\n"  ;
%idmap = map /(.*)\t(.*)\r/, <MAPFILE>; # gulps in hash. Assumes DOS mode \r is read
close MAPFILE;
if (0) { # debugging printout
	$maplength = (keys idmap);
	print STDERR "Input mapping ($maplength) entries\n";
	while( ($k, $v) = each %idmap) {
        	print STDERR "  |$k| |$v|\n";
	}
	print STDERR "End input mapping\n\n";
}
# ensure file includes prefix. Upper case ensures it can't conflict with
# any canonicalized id.
my $PREFIX_ID = "PREFIX";
($prefix = $idmap{$PREFIX_ID}) or die "missing $PREFIX_ID entry in $filename\n";

# set counter to one more than number of existing entries. Since
# map contains a dummy prefix entry, this will be number of keys
$id_counter = (keys idmap); 
#print STDERR "loaded id map, counter= $id_counter\n";

# Optional file merge-ids.txt in the current directory can specify
# mapping from actual userids to effective user ids for anonymization. 
# This can be used to map non-mid-number ids to mid numbers, or multiple
# different ids to the same id, or numeric ids used by instructors to names.
my %merge;
if (open MERGEFILE, "<merge-ids.txt") {
     %merge = map /(.*)\t([^\s]*)/, <MERGEFILE>;
     close MERGEFILE;
     #print STDERR "loaded merge map\n";
}
	   

while (<>) 
{
  # cygwin perl on windows seems to read in the CR from a dos-mode (CRLF-terminated) text file.
  # [Better would be to translate CRLF on read to a logical end of line represented as a single NL.)
  # So strip any trailing CR, to ensure we have a line a string with a trailing logical NL marker only. 
  # Note "print" without arguments will print the whole line including the NL, which does seem to 
  # translate to a CRLF when done on Windows. When printing a constructed string, we have to include 
  # a NL, even if copying a suffix pattern match, since patterns normally don't match the NL.
  s/\r$//;
  
  # Log header part saying "by JoeSmith on Joes-Computer" can reveal identity
  #      $1                               $2                    
  if (/^(.*)# Log of Andes session begun (.*) by [\w-]+ on .*$/) 
  {
     print "$1# Log of Andes session begun $2 by [user] on [computer]\n";
  }
  # Standalone Andes also records typing in the Login dialog box
  elsif (/^(.*)C 1127 (.*)$/) {
	  print "$1C1127 ?\n";
  }
  #
  # initial set session id call normally contains userid as part
  #         $1                   $2     $3
  elsif (/^(.*)set-session-id "([^"]*)"(.*)$/)
  {
	# Session id form is UserID-MonthDay-Hours-Mins-Secs
	# but any spaces in UserID are converted to hyphens
	@id_parts = split('-', $2);
	$nparts = @id_parts;
	$id = $session_id = join(' ', @id_parts[0 .. $nparts-5]);
	$rest = join('-', @id_parts[$nparts-4 .. $nparts-1]);
	&munge_id(); 
	print "$1set-session-id \"$anonid-$rest\"$3\n";
  }
  #
  # read-student-info call also has user name
  #         $1                      $2     $3
  elsif (/^(.*)read-student-info "([^"]*)"(.*)$/)
  { 
    $id = $2;  # session label should start with student id
    if ($id ne $session_id) {
	    print STDERR "warning: student id $id != session id part $session_id!\n";
    }
    &munge_id ();
    print "$1read-student-info \"$anonid\"$3\n";
  }
  #
  # Open-Problem can contain user ids in the solution directory path
  #
 
  #
  # !!! kcd urls in hints can contain the user id
  #
  elsif ($id && /$id/i) 
  {
    s/$id/$anonid/g;	
    print;
  } 
  else { 
	  print; 
  }
} # end while (<>)

# at end of input, dump idmap so it can be saved
if ($modified_map) {
 open MAPFILE, ">$filename" or die "Couldn't open $filename for updating: $!\n";
 while( ($k, $v) = each %idmap) {
        print MAPFILE "$k\t$v\r\n";
 }
 close MAPFILE;
}


sub munge_id () # reads global $id, sets global $anonid
{
    # check if we have noted this as a duplicate account of some student
    $canon_id = $merge{$id} ? $merge{$id} : $id;
    # canonicalize to lower case
    $canon_id =~ tr/[A-Z]/[a-z]/;
    if (! ($anonid = $idmap{$canon_id})) { 
		$anonid = $idmap{$canon_id} = $prefix . $id_counter++;
		print STDERR "$canon_id\t$anonid\n";
		$modified_map = 1;
    }
}
