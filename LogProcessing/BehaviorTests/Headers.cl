;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Headers.cl
;;; Collin Lynch.
;;;
;;; The functions in this file are used to automate the process 
;;; of parsing the files and Carrying out common binning tasks
;;; This will change as the system goes on these are just
;;; header functions that I am using for now.
;;;
;;; This code was written to process the logs stored in the 
;;; BehaviorStudy directory.  


;;;; ------------------------------------------------------------
;;;; Load the relavent files.

(load "./Base/Loader.cl")
(load "./HDMain")
(load "./Problems")
(load "./Binning")
(load "./Tests/Loader.cl")

(load "../../DB/DB.cl")
(load "../../DB/DB-Date.cl")
(load "../../DB/DB-Mysql.cl")

;;;; =============================================================
;;;; Test code for HD Main.

(defun filetest (Arg)
  (test-logfiles "c:/andes2/BehaviorStudy/Logs/Clean/Pitt/Fall1999/"
                 (list **command-testset** **Stack-TestSet**)
                 :File :FilePath "c:/andes2/foo/"
                 :IFExists Arg :Condition 'test :Year 1999 :Verbose t))

(defun dbtest (DBName IFE)
  (test-logfiles "c:/andes2/BehaviorStudy/Logs/Clean/Pitt/Fall1999/"
                 (list **command-testset** **Stack-TestSet**)
                 :Database :DBName DBName :ODBCName "myodbc-temp"
                 :IFExists IFE :Condition 'test :Year 1999 :Verbose t))


(defun filetest2 ()
  (test-logfiles "c:/Documents and Settings/CollinL/Desktop/Andeslogs/TestLogs/AndesFtp-02-22-2004/"
                 (list **command-testset** **Stack-TestSet**)
                 :File :FilePath "c:/Documents and Settings/CollinL/Desktop/Andeslogs/TestLogs/"
                 :IFExists :Error :Condition 'test :Year 2004 :Verbose t))

;;;; ================================================================
;;;; Test code for binning.
;;(defun classic-bin ()
;;  (let ((Connection (odbc-connect "myodbc-temp")))
;;    (static-bin-db
;;     "Bin" '((8 10 2000) (9 10 2000) (10 10 2000) (11 10 2000) (12 10 2000))
;;     (list **Command-testset** **Stack-TestSet**)
;;     "test_usna2002" "myodbc-temp" :If-Exists :Overwrite :Verbose t)))



;;;; ===================================================================
;;;; process files by year.
;;;; The functions in this section are used to process the individual
;;;; files that we have from each of the study years and to store the
;;;; results into the relavent databases for later use.
;;;; The code makes use of testset parameters as well as other
;;;; functions to keep rack of the genera parameters.  They have
;;;; not been grouped into a single function so that individual issues
;;;; from year-to-year can be kept track of.

;;; --------------------------------------------------------
;;; Shared Parameters.
(defparameter **ODBC-Connection** "myodbc-odbc")
(defparameter **Root-path** "c:/Andes2/BehaviorStudy/Logs/Clean/")
(defparameter **Verbose** Nil)
(defparameter **Test-Sets**
    (list **command-testset**
          **Stack-TestSet**
          **pd-cmd-testset**
          **pd-class-testset**
          **pd-type-testset**
          **Entry-Pair-Testset**))




;;; ---------------------------------------------------------------------
;;; Tests
;;; Iterate over the files stored in the BehaviorStudy directory and 
;;; add the results to the system.  The functions in this code are
;;; intended tobe called separately within the execution shell.  This
;;; code will open the specified directories and then iterate over the 
;;; contents in order to generate the appropriate data and then store
;;; that data on a problem-instance basis in the database.  
;;;
;;; The output generated by these processes is rather volumnous so it 
;;; makes sense to call them separately.  

(defun header-exec-tests (Path DBName Condition Year 
			  &key (IfExists :Error) (Handle-Set-Scores Nil) 
			       (Base-USerID 0) (Base-FileID 0)
			       (Verbose Nil))
  (test-logfiles Path ;;(concatenate 'string **Root-Path** Path)
                 **Test-Sets**
                 :Database
                 :Host "andes2"
                 :User "atest"
                 :Pass "r3x21La"
                 :LogStream t
                 :DBName DBName
                 :IFExists IFExists
                 :Condition Condition
                 :Year Year
		 :Handle-Set-Scores Handle-Set-Scores
		 :Base-UserID Base-UserID
		 :Base-FileID Base-FileID
                 :Verbose Verbose))


(defun foo ()
  (header-exec-tests "c:/Documents and Settings/CollinL/Desktop/Andeslogs/TestLogs/AndesFtp-02-22-2004/"
		    "test_logs_ftp"
		    "USNA"
		    '2004
		    :IFExists :append
		    :Verbose t))

;;; Andes2 Tests
;;; The script code here exists to test the logfiles by iterating over the sets stored
;;; on Andes2 as they are within the year and student directories.  
;;; This code assumes that the logfiles have been accurately stored and that this 
;;; code is running locally on Andes2 as opposed to remotely.  
(defun Andes2-Test-SortedLogs ()
  (let ((Path "/usr/local/share/projects/andes/logs/tmpproc/"))
    (format t "Starting F2000~%")
    (header-exec-test (concatenate 'string Path "Fall2000/") "test_logs_2000" 'USNA 2000)
    (format t "Starting F2001~%")
    (header-exec-test (concatenate 'string Path "Fall2001/") "test_logs_2001" 'USNA 2001)
    (format t "Starting F2002~%")
    (header-exec-test (concatenate 'string Path "Fall2002/") "test_logs_2002" 'USNA 2002)
    (format t "Starting F2003~%")
    (header-exec-test (concatenate 'string Path "Fall2003/") "test_logs_2003" 'USNA 2003)
    (format t "Starting AndesFtp~%")
    (header-exec-test (concatenate 'string Path "AndesFtp-03-30-2004/") "test_logs_ftp" 'USNA 2004)))



(defun Andes2-Test-SortedLogs2 ()
  (let ((Path "e:/logs/new/originals/"))

    (format t "Starting NonSetScore~%")
    (setq P2 (concatenate 'string Path "NonSetScore/"))
    (format t "  Starting F2000~%")
    (setq R (header-exec-tests (concatenate 'string P2 "2000/") "test_logs" "USNA" 2000 :Handle-Set-Scores Nil))
    ;;(pprint (header-exec-tests (concatenate 'string P2 "2000/") "test_logs_NS_2000" "USNA" 2000 :Handle-Set-Scores Nil))
    (format t "  Starting F2001~%")
    (setq R (header-exec-tests (concatenate 'string P2 "2001/") "test_logs" "USNA" 2001 
			       :IFExists :Append :Base-USerID (car R) :Base-FileID (cadr R) :Handle-Set-Scores Nil))
    (format t "  Starting F2002~%")
    (setq R (header-exec-tests (concatenate 'string P2 "2002/") "test_logs" "USNA" 2002 
			          :IFExists :Append :Base-USerID (car R) :Base-FileID (cadr R) :Handle-Set-Scores Nil))
    (format t "  Starting F2003~%")
    (setq R (header-exec-tests (concatenate 'string P2 "2003/") "test_logs" "USNA" 2003
			       :IFExists :Append :Base-USerID (car R) :Base-FileID (cadr R) :Handle-Set-Scores Nil))
    (format t "  Starting F2004~%")
    (setq R (header-exec-tests (concatenate 'string P2 "2004/") "test_logs" "USNA" 2004
    		       :IFExists :Append :Base-USerID (car R) :Base-FileID (cadr R) :Handle-Set-Scores Nil))
    (format t "Starting SetScore~%")
    (setq P2 (concatenate 'string Path "SetScore/"))
    (format t "  Starting F2000~%")
    (setq R (header-exec-tests (concatenate 'string P2 "2000/") "test_logs" "USNA" 2000
			       :IFExists :Append :Base-USerID (car R) :Base-FileID (cadr R) :Handle-Set-Scores t))
    (format t "  Starting F2001~%")
    (setq R (header-exec-tests (concatenate 'string P2 "2001/") "test_logs" "USNA" 2001
			       :IFExists :Append :Base-USerID (car R) :Base-FileID (cadr R) :Handle-Set-Scores t))
    (format t "  Starting F2002~%")
    (setq R (header-exec-tests (concatenate 'string P2 "2002/") "test_logs" "USNA" 2002
			       :IFExists :Append :Base-USerID (car R) :Base-FileID (cadr R) :Handle-Set-Scores t))
    (format t "  Starting F2003~%")
    (setq R (header-exec-tests (concatenate 'string P2 "2003/") "test_logs" "USNA" 2003
			       :IFExists :Append :Base-USerID (car R) :Base-FileID (cadr R) :Handle-Set-Scores t))
    (format t "  Starting F2004~%")
    (setq R (header-exec-tests (concatenate 'string P2 "2004/") "test_logs" "USNA" 2004
			       :IFExists :Append :Base-USerID (car R) :Base-FileID (cadr R) :Handle-Set-Scores t))
    ))


#|;;; ---------------------------------------------------------------------
;;; Tests
;;; Iterate over the files stored in the BehaviorStudy directory and 
;;; add the results to the system.  The functions in this code are
;;; intended tobe called separately within the execution shell.  This
;;; code will open the specified directories and then iterate over the 
;;; contents in order to generate the appropriate data and then store
;;; that data on a problem-instance basis in the database.  
;;;
;;; The output generated by these processes is rather volumnous so it 
;;; makes sense to call them separately.  

(defun header-exec-tests (Path DBName Condition Year &key (Verbose Nil))
  (test-logfiles Path ;;(concatenate 'string **Root-Path** Path)
		 **Test-Sets**
		 :Database
		 :DBName DBName
		 :ODBCName **ODBC-Connection**
		 :IFExists :Error
		 :Condition Condition 
		 :Year Year
		 :Verbose Verbose))
(defun generate-USNA-Fall1999 ()
  (header-exec-tests "USNA/Fall1999/" "study_usna1999" 'USNA 1999))
  
(defun generate-USNA-Fall2000 ()
  (header-exec-tests "USNA/Fall2000/" "study_usna2000" 'USNA 2000))

(defun generate-USNA-Fall2001 ()
  (header-exec-tests "USNA/Fall2001/" "study_usna2001" 'USNA 2001))

(defun generate-USNA-Fall2002 ()
  (header-exec-tests "USNA/Fall2002/" "study_usna2002" 'USNA 2002))

(defun generate-Pitt-Fall1999 ()
  (header-exec-tests "Pitt/Fall1999/" "study_pitt1999" 'PITT 1999))
  
(defun generate-Pitt-Fall2000 ()
  (header-exec-tests "Pitt/Fall2000/" "study_pitt2000" 'PITT 2000))

(defun generate-Pitt-Fall2001 ()
  (header-exec-tests "Pitt/Fall2001/" "study_pitt2001" 'PITT 2001))


(defun generate-USNA-Fall1999-comp ()
  (header-exec-tests "USNA/Fall1999/" "study_usna1999_1" 'USNA 1999))
  
(defun generate-USNA-Fall2000-comp ()
  (header-exec-tests "USNA/Fall2000/" "study_usna2000_1" 'USNA 2000))

(defun generate-USNA-Fall2001-comp ()
  (header-exec-tests "USNA/Fall2001/" "study_usna2001_1" 'USNA 2001))

(defun generate-USNA-Fall2002-comp ()
  (header-exec-tests "USNA/Fall2002/" "study_usna2002_1" 'USNA 2002))

(defun generate-Pitt-Fall1999-comp ()
  (header-exec-tests "Pitt/Fall1999/" "study_pitt1999_1" 'PITT 1999))
  
(defun generate-Pitt-Fall2000-comp ()
  (header-exec-tests "Pitt/Fall2000/" "study_pitt2000_1" 'PITT 2000))

(defun generate-Pitt-Fall2001-comp ()
  (header-exec-tests "Pitt/Fall2001/" "study_pitt2001_1" 'PITT 2001))


(defun generate-USNA-Fall1999-comp2 ()
  (header-exec-tests "USNA/Fall1999/" "study_usna1999_2" 'USNA 1999))
  
(defun generate-USNA-Fall2000-comp2 ()
  (header-exec-tests "USNA/Fall2000/" "study_usna2000_2" 'USNA 2000))

(defun generate-USNA-Fall2001-comp2 ()
  (header-exec-tests "USNA/Fall2001/" "study_usna2001_2" 'USNA 2001))

(defun generate-USNA-Fall2002-comp2 ()
  (header-exec-tests "USNA/Fall2002/" "study_usna2002_2" 'USNA 2002))

(defun generate-Pitt-Fall1999-comp2 ()
  (header-exec-tests "Pitt/Fall1999/" "study_pitt1999_2" 'PITT 1999))
  
(defun generate-Pitt-Fall2000-comp2 ()
  (header-exec-tests "Pitt/Fall2000/" "study_pitt2000_2" 'PITT 2000))

(defun generate-Pitt-Fall2001-comp2 ()
  (header-exec-tests "Pitt/Fall2001/" "study_pitt2001_2" 'PITT 2001))


(defun generate-USNA-Fall1999-comp3 ()
  (header-exec-tests "USNA/Fall1999/" "study_usna1999_3" 'USNA 1999))
  
(defun generate-USNA-Fall2000-comp3 ()
  (header-exec-tests "USNA/Fall2000/" "study_usna2000_3" 'USNA 2000))

(defun generate-USNA-Fall2001-comp3 ()
  (header-exec-tests "USNA/Fall2001/" "study_usna2001_3" 'USNA 2001))

(defun generate-USNA-Fall2002-comp3 ()
  (header-exec-tests "USNA/Fall2002/" "study_usna2002_3" 'USNA 2002))

(defun generate-Pitt-Fall1999-comp3 ()
  (header-exec-tests "Pitt/Fall1999/" "study_pitt1999_3" 'PITT 1999))
  
(defun generate-Pitt-Fall2000-comp3 ()
  (header-exec-tests "Pitt/Fall2000/" "study_pitt2000_3" 'PITT 2000))

(defun generate-Pitt-Fall2001-comp3 ()
  (header-exec-tests "Pitt/Fall2001/" "study_pitt2001_3" 'PITT 2001))

;;; -------------------------------------------------------------------
;;; Post-processing
;;; Once the data has been stored in the databases then there are a 
;;; number of standard post-processing tasks that we want to run on
;;; them.  The code in this section facilitates that post-processing
;;; and can be modified as necessary to make other changes to the 
;;; system.  
;;; 
;;; At present the post-processing here performs the following tasks
;;;
;;; 1. Generate the problems table.
;;;    This table lists all of the problems that were dealt with by
;;;    the students during their use of Andes.  Yes it is possible
;;;    to modify the system so that this is generated at runtime 
;;;    but there is no need to for now.
;;;
;;; 2. Bin the results by Student and Problem:
;;;    This will take all of the individual problem instances and
;;;    lump those results into grouped results indicating all of 
;;;    the work for a specific student on a specific problem.  
;;;    
;;; 3. File-bin results:
;;;    Group the problem-instances into result sets indicating
;;;    all of the student's work within a specific file.  
;;;
;;; 4. Statically bin by months:
;;;    Statically bin the student's work by the month that they 
;;;    did that work so that we can get an indication of how their
;;;    behaviors changed from month to month, irrespective of 
;;;    the problem that they worked on.  

(defun post-process-db-data (DBName &key (When-Exists :Error) (Verbose Nil))
  (generate-problems-table 
   (car **Test-Sets**) DBName **ODBC-Connection** :Verbose Verbose)
  (file-bin-results **Test-Sets** DBName **ODBC-Connection** :Verbose Verbose)
  (problem-bin-results **Test-Sets** DBName **ODBC-Connection** :Verbose Verbose)
  ;;(classic-bin DBName :Verbose Verbose)
  )


;;; Once we have stored the results ion the database these functions can
;;; be used to bin the results for later use.  
(defun classic-bin (DBName Year &key (Verbose Nil))
  (let ((Dates (mapcar #'(lambda (D) (list D 10 Year)) '(8 9 10 11 12))))
    (static-bin-db "Bin" Dates **Test-Sets** DBName 
		   **ODBC-Connection**
		   :If-Exists :Error 
		   :Verbose Verbose)))


(defun post-process-USNA-Fall1999 () 
  (post-process-db-data "study_usna1999"))

(defun post-process-USNA-Fall2000 ()
  (post-process-db-data "study_usna2000"))

(defun post-process-USNA-Fall2001 ()
  (post-process-db-data "study_usna2001"))

(defun post-process-USNA-Fall2002 ()
  (post-process-db-data "study_usna2002"))

(defun post-process-Pitt-Fall1999 ()
  (post-process-db-data "study_Pitt1999"))

(defun post-process-Pitt-Fall2000 ()
  (post-process-db-data "study_Pitt2000"))

(defun post-process-Pitt-Fall2001 ()
  (post-process-db-data "study_Pitt2001"))


(defun post-process-USNA-Fall1999-comp () 
  (post-process-db-data "study_usna1999_1"))

(defun post-process-USNA-Fall2000-comp ()
  (post-process-db-data "study_usna2000_1"))

(defun post-process-USNA-Fall2001-comp ()
  (post-process-db-data "study_usna2001_1"))

(defun post-process-USNA-Fall2002-comp ()
  (post-process-db-data "study_usna2002_1"))

(defun post-process-Pitt-Fall1999-comp ()
  (post-process-db-data "study_Pitt1999_1"))

(defun post-process-Pitt-Fall2000-comp ()
  (post-process-db-data "study_Pitt2000_1"))

(defun post-process-Pitt-Fall2001-comp ()
  (post-process-db-data "study_Pitt2001_1"))


(defun post-process-USNA-Fall1999-comp2 () 
  (post-process-db-data "study_usna1999_2"))

(defun post-process-USNA-Fall2000-comp2 ()
  (post-process-db-data "study_usna2000_2"))

(defun post-process-USNA-Fall2001-comp2 ()
  (post-process-db-data "study_usna2001_2"))

(defun post-process-USNA-Fall2002-comp2 ()
  (post-process-db-data "study_usna2002_2"))

(defun post-process-Pitt-Fall1999-comp2 ()
  (post-process-db-data "study_Pitt1999_2"))

(defun post-process-Pitt-Fall2000-comp2 ()
  (post-process-db-data "study_Pitt2000_2"))

(defun post-process-Pitt-Fall2001-comp2 ()
  (post-process-db-data "study_Pitt2001_2"))



(defun post-process-USNA-Fall1999-comp3 () 
  (post-process-db-data "study_usna1999_3"))

(defun post-process-USNA-Fall2000-comp3 ()
  (post-process-db-data "study_usna2000_3"))

(defun post-process-USNA-Fall2001-comp3 ()
  (post-process-db-data "study_usna2001_3"))

(defun post-process-USNA-Fall2002-comp3 ()
  (post-process-db-data "study_usna2002_3"))

(defun post-process-Pitt-Fall1999-comp3 ()
  (post-process-db-data "study_Pitt1999_3"))

(defun post-process-Pitt-Fall2000-comp3 ()
  (post-process-db-data "study_Pitt2000_3"))

(defun post-process-Pitt-Fall2001-comp3 ()
  (post-process-db-data "study_Pitt2001_3"))







(defun user-bin-db-data (DBName &key (When-Exists :Error) (Verbose Nil))
  (user-bin-results **Test-Sets** DBName **odbc-connection** :Verbose Verbose))

(defun user-bin-USNA-Fall1999-comp2 () 
  (user-bin-db-data "study_usna1999_2" :Verbose t))

(defun user-bin-USNA-Fall2000-comp2 ()
  (user-bin-db-data "study_usna2000_2"))

(defun user-bin-USNA-Fall2001-comp2 ()
  (user-bin-db-data "study_usna2001_2"))

(defun user-bin-USNA-Fall2002-comp ()
  (user-bin-db-data "study_usna2002_1"))

|#
