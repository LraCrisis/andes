(* Content-type: application/mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 7.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       145,          7]
NotebookDataLength[    581096,      11472]
NotebookOptionsPosition[    570479,      11124]
NotebookOutlinePosition[    570839,      11140]
CellTagsIndexPosition[    570796,      11137]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell["\<\
ToDo:  
Figure out how to choose beta.  One idea is that we balance the contribution \
of the non-beta term with the beta term so that each contributes equally to \
the reward function (easy to do).  A more convincing method would be to find \
a point where the policy is halfway between the beta=0 and beta=large \
policies (not so easy).\
\>", "Text",
 CellChangeTimes->{{3.544386916861963*^9, 3.544387091035651*^9}, {
  3.544387136017262*^9, 3.544387160465482*^9}, {3.54438742693068*^9, 
  3.544387504589485*^9}, {3.544387591588078*^9, 3.544387732393727*^9}, {
  3.544388846539043*^9, 3.544388884443939*^9}, {3.544389036012035*^9, 
  3.544389258575871*^9}, {3.5444409784415627`*^9, 3.5444409903542213`*^9}}],

Cell["\<\
Try to add new features and remove features.  This must be done after we \
settle on value for beta.  Use correlation matrix for states to determine \
best candidates for removal.\
\>", "Text",
 CellChangeTimes->{{3.544386916861963*^9, 3.544387091035651*^9}, {
  3.544387136017262*^9, 3.544387160465482*^9}, {3.54438742693068*^9, 
  3.544387504589485*^9}, {3.544387591588078*^9, 3.544387732393727*^9}, {
  3.544388846539043*^9, 3.544388884443939*^9}, {3.544389036012035*^9, 
  3.544389258575871*^9}, {3.5444409784415627`*^9, 3.544440993449573*^9}}],

Cell["\<\
Eventually (after first iteration), need to figure out when random-help \
policy should be applied.  If we only choose optimal help based on current \
best guess, we may not explore parts of policy-space vs. state that need \
exploring.  As we increase the amount of data, the fraction of time we use \
the random policy should decrease.  We need some estimate of the probability \
that the second-best policy is, in fact, the best policy.\
\>", "Text",
 CellChangeTimes->{{3.544387163549847*^9, 3.544387396683249*^9}}],

Cell["\<\
On logistic vs. step:  The distance of a point in feature space to the \
hyperplane has no meaning since we have not formulated a metric in that \
space.  Using a logistic function of the distance between point and the \
hyperplane (function linearPolicy) thus doesn't make much sense.  The \
Budinich paper uses the logistic but only as a numerical trick.  In our \
numerical experiments, the global fit routines performed much better than the \
gradient-based routines anyway so the main motivation for this numerical \
trick doesn't apply.  [Note that the whole discussion of choosing beta in the \
Budinich paper is nonsense anyway since it is equivalent to rescaling the \
equation for the hyperplane.]\
\>", "Text",
 CellChangeTimes->{{3.5444011643076477`*^9, 3.544401260465995*^9}, {
  3.544401360438768*^9, 3.5444016717761793`*^9}, {3.544402185711677*^9, 
  3.544402199036283*^9}, {3.5444410756684504`*^9, 3.544441078688386*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SetDirectory", "[", 
  RowBox[{"NotebookDirectory", "[", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.544401989256278*^9, 3.544402015850553*^9}}],

Cell[BoxData["\<\"/Volumes/BRETT-STUFF\"\>"], "Output",
 CellChangeTimes->{{3.544401995187523*^9, 3.544402017517837*^9}, 
   3.544437739206048*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["State", "Subsection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimensions", "[", 
  RowBox[{"state", "=", 
   RowBox[{"Import", "[", "\"\<state-uwplatt.csv\>\"", "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.54429197130332*^9, 3.544291972093434*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"15327", ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{
  3.543858747694839*^9, 3.543947957081436*^9, 3.543949831574731*^9, 
   3.543950480834213*^9, 3.543950715126215*^9, {3.543952237189853*^9, 
   3.543952264616626*^9}, 3.543956661840661*^9, 3.544052352229749*^9, 
   3.54420672497366*^9, 3.544283235818474*^9, 3.544286279608759*^9, 
   3.544291973606702*^9, 3.54430699166177*^9, 3.544307070516571*^9, 
   3.544307259138614*^9, 3.544308125270961*^9, 3.544310278539702*^9, 
   3.544310930320786*^9, 3.544311444929453*^9, 3.544314084434095*^9, 
   3.544371559742677*^9, 3.544379231524019*^9, 3.544380141799922*^9, 
   3.544380286246159*^9, 3.544384260396244*^9, 3.544401696825*^9, 
   3.544402030236185*^9, 3.544404896811122*^9, 3.5444377437288227`*^9, 
   3.54446721041942*^9, 3.544917496670422*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"state", "[", 
  RowBox[{"[", "1", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.543858547416664*^9, 3.543858548480675*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"ttID\"\>", ",", "\<\"logSessionTime\"\>", 
   ",", "\<\"fracSessionFlounderTime\"\>", ",", "\<\"logNowFlounderSteps\"\>",
    ",", "\<\"logNowFlounderTime\"\>", ",", "\<\"logNowStepTime\"\>", 
   ",", "\<\"sessionCorrect\"\>", ",", "\<\"sessionIncorrect\"\>", 
   ",", "\<\"sessionHelp\"\>", ",", "\<\"fracSessionCorrect\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.543858749937224*^9, 3.54394795798177*^9, 3.543949831868004*^9, 
   3.543950480947839*^9, 3.543950715215716*^9, {3.543952237276793*^9, 
   3.543952264703044*^9}, 3.543956661945642*^9, 3.544052352343415*^9, 
   3.544206725157036*^9, 3.544283235929315*^9, 3.544286280509875*^9, 
   3.544291975409995*^9, 3.544306992544415*^9, 3.544307070658975*^9, 
   3.544307259306247*^9, 3.544308125547884*^9, 3.544310278717373*^9, 
   3.544310930478993*^9, 3.544311445088836*^9, 3.544314085258929*^9, 
   3.544371559869515*^9, 3.544379231677573*^9, 3.544380141919249*^9, 
   3.544380286451977*^9, 3.544384260507488*^9, 3.544401697346922*^9, 
   3.544402030440889*^9, 3.5444048970218563`*^9, 3.5444377439163017`*^9, 
   3.544467210493774*^9, 3.544917496734325*^9}]
}, Open  ]],

Cell["Create hash table for fast lookup", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"state1", "[", 
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "]"}], "=", 
       RowBox[{"Rest", "[", "#", "]"}]}], ")"}], "&"}], ",", 
    RowBox[{"Rest", "[", "state", "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"nFeatures", "=", 
  RowBox[{"Length", "[", 
   RowBox[{"Rest", "[", 
    RowBox[{"state", "[", 
     RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.543871575041714*^9, 3.543871594823219*^9}}],

Cell[BoxData["9"], "Output",
 CellChangeTimes->{
  3.543871598026678*^9, {3.54394795402681*^9, 3.543947959009837*^9}, 
   3.543949831911765*^9, 3.543950481018976*^9, 3.543950715263457*^9, {
   3.543952237319245*^9, 3.543952264752625*^9}, 3.54395666200118*^9, 
   3.544052352390199*^9, 3.544206725223934*^9, 3.544283235988905*^9, 
   3.544286282233555*^9, 3.544291986127784*^9, 3.544306993845117*^9, 
   3.54430707148399*^9, 3.544307259457453*^9, 3.544308125806704*^9, 
   3.544310278862552*^9, 3.54431093057264*^9, 3.544311445186732*^9, 
   3.544314090194672*^9, 3.544371560004255*^9, 3.544379231789264*^9, 
   3.544380142115286*^9, 3.544380286667479*^9, 3.544384260623786*^9, 
   3.544401697560417*^9, 3.544402030653585*^9, 3.544404897235695*^9, 
   3.5444377441390057`*^9, 3.544467210565827*^9, 3.544917496808034*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Reward", "Subsection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimensions", "[", 
  RowBox[{"reward", "=", 
   RowBox[{"Import", "[", "\"\<reward-0.5-md5:e2ed3385.csv\>\"", "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.544283247035145*^9, 3.54428325865665*^9}, {
  3.544283293559853*^9, 3.544283321748834*^9}, {3.544915260744927*^9, 
  3.544915263846765*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"59", ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{
  3.544283261405781*^9, 3.544283323886458*^9, 3.544286288052771*^9, {
   3.544306928559386*^9, 3.54430695203826*^9}, 3.54430812699436*^9, 
   3.54438014406621*^9, 3.544384267033707*^9, 3.544438093402555*^9, {
   3.544915237691446*^9, 3.544915264862181*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimensions", "[", 
  RowBox[{"reward", "=", 
   RowBox[{"Import", "[", "\"\<reward-0.5-uwplatt-2Y130.csv\>\"", "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.544918237767395*^9, 3.544918238695342*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"812", ",", "12"}], "}"}]], "Output",
 CellChangeTimes->{
  3.543858771990333*^9, 3.543859493378796*^9, 3.543859541044584*^9, 
   3.543947974862086*^9, 3.543949850396091*^9, 3.543950487781527*^9, 
   3.543950724716812*^9, 3.54395226689155*^9, 3.543956664415327*^9, 
   3.544052355481739*^9, 3.544204036192459*^9, {3.544205782202347*^9, 
   3.544205803930542*^9}, 3.544205963992343*^9, 3.544206727959668*^9, 
   3.544285735175179*^9, 3.544286858301676*^9, {3.54430694922389*^9, 
   3.544306958915027*^9}, 3.544307072966869*^9, 3.544307260423154*^9, 
   3.544309478944826*^9, 3.544310321062484*^9, 3.544310925785933*^9, 
   3.544311446729952*^9, 3.544314093842118*^9, 3.544371560925558*^9, 
   3.544379232055398*^9, 3.544380144202469*^9, 3.544380286809575*^9, 
   3.544384271498662*^9, 3.544402038842903*^9, 3.544404902569221*^9, 
   3.5444377463964577`*^9, 3.544438096239718*^9, 3.544467210686187*^9, 
   3.544918240010435*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimensions", "[", 
  RowBox[{"reward", "=", 
   RowBox[{"Import", "[", "\"\<reward-0.5-uwplatt.csv\>\"", "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.544292117855258*^9, 3.544292119029802*^9}, {
  3.544919082402131*^9, 3.544919083618209*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7210", ",", "12"}], "}"}]], "Output",
 CellChangeTimes->{3.544292120164478*^9, 3.544306957306809*^9, 
  3.544380144623323*^9, 3.544384269736579*^9, 3.544387512491085*^9, 
  3.544472006003986*^9}]
}, Open  ]],

Cell[TextData[StyleBox["This must be reset any time a reward file is loaded :",
 FontSize->14,
 FontColor->RGBColor[1, 0, 0]]], "Text",
 CellChangeTimes->{{3.544437502317581*^9, 3.544437532795547*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "rewardPosition", "]"}], ";", 
  RowBox[{
   RowBox[{"rewardPosition", "[", "x_", "]"}], ":=", 
   RowBox[{
    RowBox[{"rewardPosition", "[", "x", "]"}], "=", 
    RowBox[{"First", "[", 
     RowBox[{"First", "[", 
      RowBox[{"Position", "[", 
       RowBox[{
        RowBox[{"reward", "[", 
         RowBox[{"[", "1", "]"}], "]"}], ",", "x", ",", "1", ",", "1"}], 
       "]"}], "]"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"rewardValue", "[", 
   RowBox[{"x_", ",", "y_"}], "]"}], ":=", 
  RowBox[{"x", "[", 
   RowBox[{"[", 
    RowBox[{"rewardPosition", "[", "y", "]"}], "]"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.543859618095807*^9, 3.543859648335427*^9}, {
  3.543859772978048*^9, 3.543859826781318*^9}, {3.543860004495199*^9, 
  3.543860023092791*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"reward", "[", 
  RowBox[{"[", "1", "]"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"KC\"\>", ",", "\<\"clientID\"\>", ",", "\<\"ttID\"\>", 
   ",", "\<\"learning\"\>", ",", "\<\"oppTurns\"\>", ",", "\<\"noSlip\"\>", 
   ",", "\<\"spontaneous-hint\"\>", ",", "\<\"no-hints\"\>", 
   ",", "\<\"GIVE-BACKWARDS-HINTS\"\>", ",", "\<\"zz-unclassified-hint\"\>", 
   ",", "\<\"forwards-hint\"\>", ",", "\<\"zz-extra-hint\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.543858773953764*^9, 3.543859542769881*^9, 3.543947975830824*^9, 
   3.543949850553492*^9, 3.54395048786907*^9, 3.543950724801066*^9, 
   3.543952266980165*^9, 3.543956664515053*^9, 3.544052355570245*^9, 
   3.544204038776381*^9, {3.544205782308261*^9, 3.544205804022011*^9}, 
   3.544205964095934*^9, 3.544206727976388*^9, 3.544283327066416*^9, 
   3.544285736927417*^9, 3.54428629056945*^9, 3.544292121906303*^9, 
   3.544307074617356*^9, 3.544307262227428*^9, 3.544308128661192*^9, 
   3.544310322436084*^9, 3.544310927038733*^9, 3.5443114480262*^9, 
   3.544314095410229*^9, 3.544371562413378*^9, 3.544379232269202*^9, 
   3.544380144678876*^9, 3.544384273829608*^9, 3.544387514668144*^9, 
   3.5444020414684258`*^9, 3.544404904522126*^9, 3.5444377511193247`*^9, 
   3.544472012975967*^9, {3.544915250500945*^9, 3.544915268683103*^9}, 
   3.544918249029371*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Evaluate State & Reward", "Subsection",
 CellChangeTimes->{{3.543952218479267*^9, 3.543952224913205*^9}, {
  3.54395225574971*^9, 3.543952258877077*^9}}],

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Histogram", "[", 
     RowBox[{
      RowBox[{"Rest", "[", "#", "]"}], ",", 
      RowBox[{"PlotLabel", "\[Rule]", 
       RowBox[{"First", "[", "#", "]"}]}], ",", 
      RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}], "&"}], ",", 
   RowBox[{"Transpose", "[", 
    RowBox[{"Map", "[", 
     RowBox[{"Rest", ",", "state"}], "]"}], "]"}]}], "]"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TableForm", "[", 
  RowBox[{
   RowBox[{"Correlation", "[", 
    RowBox[{"Map", "[", 
     RowBox[{"Rest", ",", 
      RowBox[{"Rest", "[", "state", "]"}]}], "]"}], "]"}], ",", 
   RowBox[{"TableHeadings", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Rest", "[", 
       RowBox[{"state", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", 
      RowBox[{"Rest", "[", 
       RowBox[{"state", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "}"}]}]}], "]"}]], "Input"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      StyleBox["\[Null]",
       ShowStringCharacters->False], 
      TagBox["\<\"logSessionTime\"\>",
       HoldForm], 
      TagBox["\<\"fracSessionFlounderTime\"\>",
       HoldForm], 
      TagBox["\<\"logNowFlounderSteps\"\>",
       HoldForm], 
      TagBox["\<\"logNowFlounderTime\"\>",
       HoldForm], 
      TagBox["\<\"logNowStepTime\"\>",
       HoldForm], 
      TagBox["\<\"sessionCorrect\"\>",
       HoldForm], 
      TagBox["\<\"sessionIncorrect\"\>",
       HoldForm], 
      TagBox["\<\"sessionHelp\"\>",
       HoldForm], 
      TagBox["\<\"fracSessionCorrect\"\>",
       HoldForm]},
     {
      TagBox["\<\"logSessionTime\"\>",
       HoldForm], "0.9999999999999999`", "0.6513377608031218`", 
      "0.3115615378898266`", "0.3012739340327007`", "0.07366417153440107`", 
      "0.7218476113565064`", "0.6422970341703063`", "0.5018464160839207`", 
      RowBox[{"-", "0.41725050850613915`"}]},
     {
      TagBox["\<\"fracSessionFlounderTime\"\>",
       HoldForm], "0.6513377608031218`", "1.0000000000000917`", 
      RowBox[{"-", "0.05750930171959729`"}], 
      RowBox[{"-", "0.06966640899747999`"}], 
      RowBox[{"-", "0.0705746527228138`"}], "0.42848801394347247`", 
      "0.47699975712225495`", "0.3260203685073796`", 
      RowBox[{"-", "0.3704033872915588`"}]},
     {
      TagBox["\<\"logNowFlounderSteps\"\>",
       HoldForm], "0.3115615378898266`", 
      RowBox[{"-", "0.05750930171959729`"}], "0.9999999999999183`", 
      "0.9629055017068178`", "0.054528397921663835`", "0.011119790296877506`",
       "0.2689396876695823`", "0.19204201935200624`", 
      RowBox[{"-", "0.47654380713201067`"}]},
     {
      TagBox["\<\"logNowFlounderTime\"\>",
       HoldForm], "0.3012739340327007`", 
      RowBox[{"-", "0.06966640899747999`"}], "0.9629055017068178`", 
      "0.999999999999851`", "0.10990160881046128`", "0.0016435752564351994`", 
      "0.2269903358223543`", "0.13985688414296352`", 
      RowBox[{"-", "0.4594801022651536`"}]},
     {
      TagBox["\<\"logNowStepTime\"\>",
       HoldForm], "0.07366417153440107`", 
      RowBox[{"-", "0.0705746527228138`"}], "0.054528397921663835`", 
      "0.10990160881046128`", "0.9999999999999951`", 
      RowBox[{"-", "0.04446324610298568`"}], 
      RowBox[{"-", "0.023220096097700416`"}], 
      RowBox[{"-", "0.15074606431779103`"}], 
      RowBox[{"-", "0.017262473865466896`"}]},
     {
      TagBox["\<\"sessionCorrect\"\>",
       HoldForm], "0.7218476113565064`", "0.42848801394347247`", 
      "0.011119790296877506`", "0.0016435752564351994`", 
      RowBox[{"-", "0.04446324610298568`"}], "0.9999999999998266`", 
      "0.6610394736292968`", "0.4895316733964211`", 
      RowBox[{"-", "0.03444678893863036`"}]},
     {
      TagBox["\<\"sessionIncorrect\"\>",
       HoldForm], "0.6422970341703063`", "0.47699975712225495`", 
      "0.2689396876695823`", "0.2269903358223543`", 
      RowBox[{"-", "0.023220096097700416`"}], "0.6610394736292968`", 
      "1.0000000000000184`", "0.39737555729308094`", 
      RowBox[{"-", "0.31952777170513047`"}]},
     {
      TagBox["\<\"sessionHelp\"\>",
       HoldForm], "0.5018464160839207`", "0.3260203685073796`", 
      "0.19204201935200624`", "0.13985688414296352`", 
      RowBox[{"-", "0.15074606431779103`"}], "0.4895316733964211`", 
      "0.39737555729308094`", "1.0000000000002374`", 
      RowBox[{"-", "0.2669303923121689`"}]},
     {
      TagBox["\<\"fracSessionCorrect\"\>",
       HoldForm], 
      RowBox[{"-", "0.41725050850613915`"}], 
      RowBox[{"-", "0.3704033872915588`"}], 
      RowBox[{"-", "0.47654380713201067`"}], 
      RowBox[{"-", "0.4594801022651536`"}], 
      RowBox[{"-", "0.017262473865466896`"}], 
      RowBox[{"-", "0.03444678893863036`"}], 
      RowBox[{"-", "0.31952777170513047`"}], 
      RowBox[{"-", "0.2669303923121689`"}], "0.9999999999999967`"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxDividers->{
     "Columns" -> {False, True, {False}, False}, "ColumnsIndexed" -> {}, 
      "Rows" -> {False, True, {False}, False}, "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}],
   {OutputFormsDump`HeadedRows, OutputFormsDump`HeadedColumns}],
  Function[BoxForm`e$, 
   TableForm[
   BoxForm`e$, 
    TableHeadings -> {{
      "logSessionTime", "fracSessionFlounderTime", "logNowFlounderSteps", 
       "logNowFlounderTime", "logNowStepTime", "sessionCorrect", 
       "sessionIncorrect", "sessionHelp", "fracSessionCorrect"}, {
      "logSessionTime", "fracSessionFlounderTime", "logNowFlounderSteps", 
       "logNowFlounderTime", "logNowStepTime", "sessionCorrect", 
       "sessionIncorrect", "sessionHelp", "fracSessionCorrect"}}]]]], "Output",\

 CellChangeTimes->{3.543858766124081*^9, 3.543949834282959*^9, 
  3.543950483454231*^9, 3.543950717525733*^9, 3.544292103847081*^9}]
}, Open  ]],

Cell["\<\
List different policy combinations and number of instances of each\
\>", "Text",
 CellChangeTimes->{3.543858671267389*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Block", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"pp", "=", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Drop", "[", 
         RowBox[{"#", ",", "6"}], "]"}], "&"}], ",", 
       RowBox[{"Rest", "[", "reward", "]"}]}], "]"}]}], "}"}], ",", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"#", ",", 
        RowBox[{"Count", "[", 
         RowBox[{"pp", ",", "#"}], "]"}]}], "}"}], "&"}], ",", 
     RowBox[{"Union", "[", "pp", "]"}]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.544205974023438*^9, 3.544205975205427*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", "2"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", "17"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "0", ",", "1"}], "}"}], ",", "2"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", "37"}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.543858781111935*^9, 3.543859546695978*^9, 3.543947977432348*^9, 
   3.543949850613542*^9, 3.543950487921215*^9, 3.543950724853912*^9, 
   3.544204060110626*^9, {3.5442057991693*^9, 3.544205807164068*^9}, 
   3.544205976356844*^9, 3.544292124289589*^9, 3.544377453503943*^9, 
   3.544384279248342*^9, 3.544437771294711*^9, 3.544915295408326*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Analyze routines", "Subsection",
 CellChangeTimes->{{3.544380319438443*^9, 3.544380321470534*^9}, {
  3.5444021237350616`*^9, 3.54440212601143*^9}, {3.544467219921389*^9, 
  3.544467220787329*^9}}],

Cell["\<\
Policy choice is represented by a 0 or 1; -1 means policy doesn' t apply.  \
There is some nonsense in Budinich paper about -1 & 1 being preferred, but \
Eqn. (2) in paper is effectively the same for either convention.\
\>", "Text",
 CellChangeTimes->{{3.543860565600912*^9, 3.543860602307702*^9}, {
  3.543953341715716*^9, 3.54395335067496*^9}, {3.544052121893643*^9, 
  3.544052216566515*^9}, {3.544186382243036*^9, 3.544186396018033*^9}, {
  3.544204091070952*^9, 3.544204096310304*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"policyVector", "[", "x_", "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Which", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"rewardValue", "[", 
         RowBox[{"x", ",", "\"\<no-hints\>\""}], "]"}], "\[Equal]", "1"}], 
       ",", "0", ",", 
       RowBox[{
        RowBox[{"rewardValue", "[", 
         RowBox[{"x", ",", "\"\<spontaneous-hint\>\""}], "]"}], "\[Equal]", 
        "1"}], ",", "1", ",", "True", ",", 
       RowBox[{"-", "1"}]}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Which", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"rewardValue", "[", 
         RowBox[{"x", ",", "\"\<GIVE-BACKWARDS-HINTS\>\""}], "]"}], 
        "\[Equal]", "1"}], ",", "1", ",", 
       RowBox[{
        RowBox[{"rewardValue", "[", 
         RowBox[{"x", ",", "\"\<forwards-hint\>\""}], "]"}], "\[Equal]", 
        "1"}], ",", "0", ",", "True", ",", 
       RowBox[{"-", "1"}]}], "]"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"policyVector", "[", 
    RowBox[{"x_", ",", "y_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"policyVector", "[", "x", "]"}], "[", 
    RowBox[{"[", "y", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"nPolicies", "=", "2"}], ";"}], "  ", 
  RowBox[{"(*", " ", 
   RowBox[{"Number", " ", "of", " ", "policies"}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"comparePolicies", "[", 
    RowBox[{"x_", ",", "y_"}], "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"x", "===", 
       RowBox[{"-", "1"}]}], "||", 
      RowBox[{"y", "===", 
       RowBox[{"-", "1"}]}]}], ",", "0", ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"x", "-", "y"}], ")"}], "^", "2"}]}], "]"}]}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"For", " ", "policy", " ", "to", " ", "not", " ", "apply"}], ",", 
    " ", 
    RowBox[{
     RowBox[{"-", "1"}], " ", "must", " ", "be", " ", "explicit"}]}], " ", 
   "*)"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"invertPolicy", "[", "x_", "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"x", "<", "0"}], ",", "x", ",", 
    RowBox[{"1", "-", "x"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.543859055014103*^9, 3.543859070740074*^9}, 
   3.543859727673895*^9, {3.543859840372155*^9, 3.543859991875045*^9}, {
   3.543860037797901*^9, 3.543860049969546*^9}, {3.543860112332534*^9, 
   3.543860127146435*^9}, {3.543860353022938*^9, 3.54386054208499*^9}, {
   3.54386065629849*^9, 3.543860681463506*^9}, {3.543871624700252*^9, 
   3.543871646950569*^9}, 3.543872038670635*^9, {3.543872115617988*^9, 
   3.543872129337484*^9}, {3.543953261059405*^9, 3.543953295585638*^9}, {
   3.54395339212375*^9, 3.543953415708223*^9}, {3.543953489877272*^9, 
   3.543953531866171*^9}, 3.543953583343356*^9, 3.543953674828206*^9, {
   3.54405223183821*^9, 3.544052255596519*^9}, {3.544204426969505*^9, 
   3.544204482036978*^9}, 3.544285375378132*^9, {3.544308354810137*^9, 
   3.54430836571886*^9}, {3.544308447859234*^9, 3.544308450023859*^9}, {
   3.544311341305777*^9, 3.544311363436466*^9}, {3.544403865312661*^9, 
   3.544403866063445*^9}, {3.5444042517208357`*^9, 3.544404266663086*^9}, 
   3.54440431750141*^9, {3.544437579300191*^9, 3.5444376052410917`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"useStep", "=", "True"}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Choose", " ", "between", " ", "step", " ", "function", " ", "and", " ", 
    "a", " ", "logistic"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"linearPolicy", "[", 
   RowBox[{"state_", ",", "x_"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"a", "=", 
       RowBox[{"Drop", "[", 
        RowBox[{"x", ",", 
         RowBox[{"-", "1"}]}], "]"}]}], ",", 
      RowBox[{"b", "=", 
       RowBox[{"x", "[", 
        RowBox[{"[", 
         RowBox[{"-", "1"}], "]"}], "]"}]}]}], "}"}], ",", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"h", "=", 
        RowBox[{
         RowBox[{"a", ".", "state"}], "+", "b"}]}], "  ", 
       RowBox[{"(*", " ", 
        RowBox[{"divide", " ", "this", " ", "by", " ", 
         RowBox[{"Sqrt", "[", 
          RowBox[{"a", ".", "a"}], "]"}], " ", "to", " ", "get", " ", 
         "distance", " ", "of", " ", "state", " ", "from", " ", 
         RowBox[{"hyperplane", "."}]}], " ", "*)"}], "}"}], ",", 
      RowBox[{"If", "[", " ", 
       RowBox[{"useStep", ",", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Sign", "[", "h", "]"}], "+", "1"}], ")"}], "/", "2"}], 
        ",", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Tanh", "[", 
            RowBox[{"h", "/", 
             RowBox[{"(", 
              RowBox[{"2", " ", 
               RowBox[{"Sqrt", "[", 
                RowBox[{"a", ".", "a"}], "]"}]}], ")"}]}], "]"}], "+", "1"}], 
          ")"}], "/", "2"}]}], "]"}]}], "]"}]}], "]"}]}]}], "Input",
 CellChangeTimes->CompressedData["
1:eJwdzE1I2mEABnCRGpgThYJAXfEvs9igLII+ZvbFEtQdihhLI9JMM4QsdllQ
dCjq0AcrWh2EIig8RBcrKwNT2gqT2N9cH9DIU5RtHoqCFs29z3t4+F2e52FM
XQ3tXA6HIyOB/ZHQotkaq+b9jbjgjMi6AtsDg9RiYckGzBJPeOG2UuCHFpEq
CIUl6kN4ncL5Cfvm2VPoNN6dwYjz9g8sCMef4BZXXWYheuqMVE2gVTZOHFGb
c2BhTKGAj/Nm6uuBhLmgg+wUZ3aoZXZfKYjVPUeZcHOW31hOZM7FH2GR9aYV
6tv8JvglV+qDe9abAJz4npX/lmhn6wth7z/tB1iqm9LD9GPlGDSwk9SqkIaF
Jm1TGLpdkgScfjdMZbwjo0piPI2lqpIz3JAf91Ez5+rLm/C77KEurP3+CjPY
ilk4eOnZMRBrJS/88Fd0KbuZOCPsk1G5eSro6j+qhFc837ON6EiSCzqJ0h1n
KhS3eCVQFw3pYPiN5j3ssLmHYE1u9jg8ZYyOXmJzd9JnKGdXt6HlR9AHlz+d
fINRm2af9g6mLuB6QnQNe2Lie+gVvHyA/wGOxRjg
  "]],

Cell["\<\
Maybe should have weight for integrated probability (probability student has \
already learned skill before this step).\
\>", "Text",
 CellChangeTimes->{{3.543953820853617*^9, 3.543953868201942*^9}, {
  3.544300228274088*^9, 3.544300229400508*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"rewardFunctionTerm", "[", 
    RowBox[{"beta_", ",", "x_", ",", "policy_", ",", "r_"}], "]"}], ":=", " ",
    "\[IndentingNewLine]", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"pp", "=", 
       RowBox[{"linearPolicy", "[", 
        RowBox[{
         RowBox[{"state1", "[", 
          RowBox[{"r", "[", 
           RowBox[{"[", "3", "]"}], "]"}], "]"}], ",", "x"}], "]"}]}], "}"}], 
     ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"r", "[", 
         RowBox[{"[", "4", "]"}], "]"}], ">", "0"}], " ", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"r", "[", 
            RowBox[{"[", "5", "]"}], "]"}], "+", 
           RowBox[{"beta", " ", 
            RowBox[{"r", "[", 
             RowBox[{"[", "6", "]"}], "]"}]}]}], ")"}], "/", 
         RowBox[{"r", "[", 
          RowBox[{"[", "4", "]"}], "]"}]}], " ", 
        RowBox[{"comparePolicies", "[", 
         RowBox[{"pp", ",", 
          RowBox[{"policyVector", "[", 
           RowBox[{"r", ",", "policy"}], "]"}]}], "]"}]}], ",", "0"}], 
      "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"rewardFunction", "[", 
    RowBox[{"beta_", ",", "x_"}], "]"}], ":=", 
   RowBox[{"Sum", "[", 
    RowBox[{
     RowBox[{"rewardFunction", "[", 
      RowBox[{"beta", ",", 
       RowBox[{"x", "[", 
        RowBox[{"[", "i", "]"}], "]"}], ",", "i"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "nPolicies"}], "}"}]}], "]"}]}], ";", 
  RowBox[{
   RowBox[{"rewardFunction", "[", 
    RowBox[{"beta_", ",", "x_", ",", "policy_"}], "]"}], ":=", 
   RowBox[{"Apply", "[", 
    RowBox[{"Plus", ",", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"rewardFunctionTerm", "[", 
         RowBox[{"beta", ",", "x", ",", "policy", ",", "#"}], "]"}], "&"}], 
       ",", 
       RowBox[{"Rest", "[", "reward", "]"}]}], "]"}]}], "]"}]}]}]}], "Input",
 CellChangeTimes->{{3.543871482402506*^9, 3.543871495067771*^9}, {
   3.543871544257431*^9, 3.543871550265013*^9}, {3.54387168738631*^9, 
   3.543871756167404*^9}, {3.543871803197324*^9, 3.543871907554975*^9}, {
   3.543871955838226*^9, 3.543871997972859*^9}, {3.543872032827574*^9, 
   3.543872098031696*^9}, {3.543872221024697*^9, 3.543872417463047*^9}, {
   3.543872452189135*^9, 3.543872677650697*^9}, {3.543872707859379*^9, 
   3.543872745950887*^9}, {3.543948956119647*^9, 3.54394896590957*^9}, {
   3.543951098843783*^9, 3.543951188449322*^9}, {3.543953807189762*^9, 
   3.54395381233922*^9}, {3.543954893665496*^9, 3.543954973979235*^9}, {
   3.543955746560014*^9, 3.54395574907669*^9}, {3.54395592613506*^9, 
   3.543955986845347*^9}, {3.544204876693564*^9, 3.544204897469239*^9}, {
   3.544204998935114*^9, 3.544205086436191*^9}, {3.544205126748046*^9, 
   3.544205152119782*^9}, {3.544205196636603*^9, 3.544205216155826*^9}, {
   3.544284018495091*^9, 3.544284046194827*^9}, 3.544284090313263*^9, {
   3.544303384361459*^9, 3.544303417121787*^9}, {3.544304939895022*^9, 
   3.544304958956389*^9}, {3.544307292129783*^9, 3.544307295599068*^9}, {
   3.544308483466283*^9, 3.544308485064054*^9}, {3.544308744396303*^9, 
   3.544308754896226*^9}, {3.544309844547094*^9, 3.544309852334396*^9}, {
   3.544309933969557*^9, 3.544309977869911*^9}, {3.544310025675856*^9, 
   3.544310188802238*^9}, {3.544310227247979*^9, 3.544310235072754*^9}, {
   3.544310703926313*^9, 3.544310777304971*^9}, {3.544403733212886*^9, 
   3.544403777081551*^9}, {3.5444038870556726`*^9, 3.544403900697699*^9}, {
   3.544404272905143*^9, 3.544404312160589*^9}, {3.544404378371849*^9, 
   3.544404381467443*^9}, {3.544437795133895*^9, 3.544437804402729*^9}, {
   3.5444384297058773`*^9, 3.5444384362161217`*^9}, {3.54443885152855*^9, 
   3.544438875179943*^9}, {3.54443891818401*^9, 3.5444389249556637`*^9}, {
   3.544469713322381*^9, 3.544469848284964*^9}, {3.544469969884746*^9, 
   3.544470030505629*^9}, {3.544470148476056*^9, 3.544470197698496*^9}, {
   3.54491536107056*^9, 3.544915393355832*^9}, {3.544917262705507*^9, 
   3.544917330152093*^9}, {3.544966229565633*^9, 3.544966259762714*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"globalMinimum", "=", "True"}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Find", " ", "global", " ", "minimum", " ", "or", " ", "use", " ", 
    "gradient", " ", "method", " ", "for", " ", "local"}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"minimizer", "[", 
    RowBox[{"fcn_", ",", "xx_", ",", "opts___"}], "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{"globalMinimum", ",", 
     RowBox[{"NMinimize", "[", 
      RowBox[{"fcn", ",", "xx", ",", "opts"}], "]"}], ",", 
     RowBox[{"FindMinimum", "[", 
      RowBox[{"fcn", ",", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"#", ",", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Random", "[", "]"}], "-", "0.5"}], ")"}]}], "}"}], 
          "&"}], ",", "xx"}], "]"}], ",", "opts"}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"minit", "[", 
     RowBox[{"beta_", ",", "policy_", ",", "opts___"}], "]"}], ":=", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"xx", "=", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"x", "[", "i", "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", 
             RowBox[{"nFeatures", "+", 
              RowBox[{"If", "[", 
               RowBox[{"useStep", ",", "0", ",", "1"}], "]"}]}]}], "}"}]}], 
          "]"}]}], ",", "zz", ",", "zzz", ",", "yy", ",", "yyy"}], "}"}], ",",
       "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{"useStep", ",", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
           "Try", " ", "each", " ", "side", " ", "of", " ", "hyperplane", " ",
             "and", " ", "take", " ", "best", " ", 
            RowBox[{"fit", ".", "  ", "Use"}], " ", "b"}], "=", 
           RowBox[{
            RowBox[{
             RowBox[{"-", "1"}], " ", "or"}], " ", "+", 
            RowBox[{"1", " ", "as", " ", 
             RowBox[{"normalization", "."}]}]}]}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"yy", "=", 
           RowBox[{"Append", "[", 
            RowBox[{"xx", ",", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"zz", "=", 
           RowBox[{"minimizer", "[", 
            RowBox[{
             RowBox[{"rewardFunction", "[", 
              RowBox[{"beta", ",", "yy", ",", "policy"}], "]"}], ",", "xx", 
             ",", "opts"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"yyy", "=", 
           RowBox[{"Append", "[", 
            RowBox[{"xx", ",", 
             RowBox[{"-", "1"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"zzz", "=", 
           RowBox[{"minimizer", "[", 
            RowBox[{
             RowBox[{"rewardFunction", "[", 
              RowBox[{"beta", ",", "yyy", ",", "policy"}], "]"}], ",", "xx", 
             ",", "opts"}], "]"}]}], ";", "\[IndentingNewLine]", "\t", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"First", "[", "zzz", "]"}], "<", 
             RowBox[{"First", "[", "zz", "]"}]}], ",", 
            RowBox[{
             RowBox[{"zz", "=", "zzz"}], ";", 
             RowBox[{"yy", "=", "yyy"}]}]}], "]"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"For", " ", "logistic"}], ",", " ", 
           RowBox[{"b", " ", "is", " ", "a", " ", "fit", " ", 
            RowBox[{"parameter", "."}]}]}], " ", "*)"}], " ", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"yy", "=", "xx"}], ";", 
          RowBox[{"zz", "=", 
           RowBox[{"minimizer", "[", 
            RowBox[{
             RowBox[{"rewardFunction", "[", 
              RowBox[{"beta", ",", "yy", ",", "policy"}], "]"}], ",", "xx", 
             ",", "opts"}], "]"}]}]}]}], "]"}], ";", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"First", "[", "zz", "]"}], ",", 
         RowBox[{"yy", "/.", 
          RowBox[{"zz", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}]}]}], "]"}]}], ";"}], 
  "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Add", " ", "up", " ", "the", " ", "contribution", " ", "from", " ", 
    "each", " ", "policy", " ", "to", " ", "the", " ", "reward", " ", 
    "function"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"minP", "[", 
   RowBox[{"beta_", ",", "opts___"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"mp", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"minit", "[", 
         RowBox[{"beta", ",", "i", ",", "opts"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "nPolicies"}], "}"}]}], "]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Apply", "[", 
       RowBox[{"Plus", ",", 
        RowBox[{"Map", "[", 
         RowBox[{"First", ",", "mp"}], "]"}]}], "]"}], ",", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "[", 
          RowBox[{"[", "2", "]"}], "]"}], "&"}], ",", "mp"}], "]"}]}], 
     "}"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.544286119542591*^9, 3.544286206179852*^9}, {
   3.544308575503134*^9, 3.544308577481776*^9}, 3.544308652640152*^9, {
   3.544308803367805*^9, 3.544308805221479*^9}, {3.544309902157918*^9, 
   3.5443099297545*^9}, {3.544371455962768*^9, 3.544371552699786*^9}, {
   3.544371650553666*^9, 3.5443716648952*^9}, {3.544402299489231*^9, 
   3.544402596126652*^9}, {3.544402803587926*^9, 3.544403140252483*^9}, 
   3.544403215528481*^9, {3.544403320851389*^9, 3.544403322721909*^9}, {
   3.5444033819189587`*^9, 3.544403386487008*^9}, {3.544403514056121*^9, 
   3.5444036433234577`*^9}, {3.544403673785842*^9, 3.544403702846212*^9}, {
   3.544437844896533*^9, 3.544437902280796*^9}, {3.544437946243987*^9, 
   3.544438057229125*^9}, {3.544438118859839*^9, 3.544438119175555*^9}, {
   3.544438360004189*^9, 3.5444383777855577`*^9}, {3.544438446625948*^9, 
   3.5444384676008987`*^9}, {3.544438642265902*^9, 3.544438658066031*^9}, 
   3.544438730091309*^9, {3.544439156658579*^9, 3.544439212873625*^9}, {
   3.54443962074094*^9, 3.544439625695046*^9}, {3.544439668868003*^9, 
   3.544439673161839*^9}, {3.544440043958313*^9, 3.544440228348716*^9}, {
   3.544441897897531*^9, 3.544441908440474*^9}, {3.544442760299245*^9, 
   3.544442846169778*^9}, {3.544469875706541*^9, 3.544469946347172*^9}, {
   3.544470214540344*^9, 3.544470229930403*^9}}],

Cell["\<\
Count, for each step where a policy choice can be made, number of instances \
of each policy choice or pair of policy choices.  If input is not a list, use \
original choice taken by Andes.\
\>", "Text",
 CellChangeTimes->{{3.544377928827662*^9, 3.544378000660715*^9}, {
  3.544379041228428*^9, 3.544379198410122*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"getPolicyVector", "[", 
    RowBox[{"x_", ",", "r_"}], "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Head", "[", "x", "]"}], "===", "List"}], ",", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"linearPolicy", "[", 
         RowBox[{
          RowBox[{"state1", "[", 
           RowBox[{"r", "[", 
            RowBox[{"[", "3", "]"}], "]"}], "]"}], ",", "#"}], "]"}], "&"}], 
       ",", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MatrixQ", "[", "x", "]"}], ",", "x", ",", 
         RowBox[{"Partition", "[", 
          RowBox[{"x", ",", 
           RowBox[{"nFeatures", "+", "1"}]}], "]"}]}], "]"}]}], "]"}], ",", 
     RowBox[{"policyVector", "[", "r", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"dist", "[", "x_", "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"y", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"getPolicyVector", "[", 
           RowBox[{"x", ",", "#"}], "]"}], "&"}], ",", 
         RowBox[{"Rest", "[", "reward", "]"}]}], "]"}]}], "}"}], ",", 
     RowBox[{"TableForm", "[", 
      RowBox[{
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Count", "[", 
           RowBox[{"y", ",", "#"}], "]"}], "&"}], ",", 
         RowBox[{"Union", "[", "y", "]"}]}], "]"}], ",", 
       RowBox[{"TableHeadings", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Union", "[", "y", "]"}], ",", "None"}], "}"}]}]}], "]"}]}],
     "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dist", "[", 
   RowBox[{"x_", ",", "y_"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"z", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"getPolicyVector", "[", 
             RowBox[{"x", ",", "#"}], "]"}], ",", 
            RowBox[{"getPolicyVector", "[", 
             RowBox[{"y", ",", "#"}], "]"}]}], "}"}], "&"}], ",", 
         RowBox[{"Rest", "[", "reward", "]"}]}], "]"}]}], ",", "hx", ",", 
      "hy"}], "}"}], ",", 
    RowBox[{
     RowBox[{"hx", "=", 
      RowBox[{"Union", "[", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "&"}], ",", "z"}], "]"}], "]"}]}], 
     ";", 
     RowBox[{"hy", "=", 
      RowBox[{"Union", "[", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "&"}], ",", "z"}], "]"}], "]"}]}], 
     ";", 
     RowBox[{"TableForm", "[", 
      RowBox[{
       RowBox[{"Outer", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Count", "[", 
           RowBox[{"z", ",", 
            RowBox[{"{", 
             RowBox[{"#1", ",", "#2"}], "}"}]}], "]"}], "&"}], ",", "hx", ",",
          "hy", ",", "1"}], "]"}], ",", 
       RowBox[{"TableHeadings", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"hx", ",", "hy"}], "}"}]}]}], "]"}]}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.544371747080733*^9, 3.544371768330232*^9}, {
   3.544371802776553*^9, 3.544371848696604*^9}, {3.544371931777367*^9, 
   3.544371951024411*^9}, {3.544371986414744*^9, 3.544372028180584*^9}, 
   3.544372067948808*^9, {3.54437209828245*^9, 3.54437214512784*^9}, {
   3.544374852331026*^9, 3.544374865083821*^9}, {3.544375249949473*^9, 
   3.544375360136399*^9}, {3.54437540851912*^9, 3.544375421445331*^9}, {
   3.54437546914317*^9, 3.544375476587278*^9}, {3.544375819193741*^9, 
   3.54437582045481*^9}, {3.544375891591021*^9, 3.544375892667512*^9}, {
   3.54437603520653*^9, 3.544376043763587*^9}, {3.54437607643489*^9, 
   3.544376220555832*^9}, {3.544376288698812*^9, 3.544376315774524*^9}, {
   3.544376391189056*^9, 3.544376408343686*^9}, {3.544376597191198*^9, 
   3.544376639233141*^9}, {3.54437676733591*^9, 3.544376836978955*^9}, {
   3.544376909850961*^9, 3.544377022523491*^9}, {3.5443770644024*^9, 
   3.544377106857138*^9}, {3.54437713726938*^9, 3.544377162499642*^9}, {
   3.544377192891913*^9, 3.544377227816453*^9}, {3.544377425704378*^9, 
   3.544377429581493*^9}, {3.544377478948207*^9, 3.544377650991769*^9}, {
   3.544439526523892*^9, 3.544439548768347*^9}, {3.544439740846088*^9, 
   3.54443975729783*^9}, {3.54443981336259*^9, 3.544439823812829*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Analyze", "Subsection",
 CellChangeTimes->{{3.54438031035975*^9, 3.544380313025285*^9}}],

Cell["Calculate random data point", "Text",
 CellChangeTimes->{{3.544292223972359*^9, 3.5442922317662*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rewardFunction", "[", 
  RowBox[{"1.0", ",", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Random", "[", "]"}], "-", "0.5"}], ")"}], "*", "10"}], ",", 
     RowBox[{"{", "nPolicies", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"nFeatures", "+", "1"}], "}"}]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.543948894005818*^9, 3.543948903475501*^9}, {
  3.543955170477691*^9, 3.543955180915965*^9}, {3.544286319422528*^9, 
  3.544286351067055*^9}, {3.544310297780101*^9, 3.544310308047661*^9}, {
  3.5444044370688143`*^9, 3.544404478231902*^9}, {3.54443895345035*^9, 
  3.544438976777485*^9}, {3.544470379109129*^9, 3.54447038842625*^9}, {
  3.544470424386569*^9, 3.54447042457701*^9}, {3.544470507238254*^9, 
  3.544470552714224*^9}}],

Cell[BoxData["6.318699503874582`"], "Output",
 CellChangeTimes->{
  3.543947989854809*^9, {3.543948904553399*^9, 3.543948933155394*^9}, {
   3.543948968681182*^9, 3.543948988419038*^9}, 3.543949860747385*^9, 
   3.543950605687123*^9, {3.543951157866324*^9, 3.543951191212375*^9}, {
   3.543955101118458*^9, 3.543955123279871*^9}, {3.543955181921851*^9, 
   3.543955198403166*^9}, 3.543956679178576*^9, 3.544052380651262*^9, {
   3.544206100889776*^9, 3.544206107787779*^9}, {3.544206793491614*^9, 
   3.544206800042151*^9}, {3.544283351509375*^9, 3.544283354765899*^9}, 
   3.544283419314803*^9, {3.54428410343005*^9, 3.544284112238137*^9}, {
   3.544285544215987*^9, 3.544285555049072*^9}, 3.544286305716353*^9, {
   3.544286352275272*^9, 3.544286358797017*^9}, {3.544292217143898*^9, 
   3.54429222164319*^9}, {3.544293272665851*^9, 3.544293295986601*^9}, {
   3.544304986794558*^9, 3.544304996819528*^9}, {3.544306979259002*^9, 
   3.544307003676798*^9}, {3.544307091872133*^9, 3.544307092957517*^9}, {
   3.544307300860199*^9, 3.544307305657875*^9}, {3.54430855364866*^9, 
   3.544308557342616*^9}, 3.544308772571157*^9, {3.544308910725513*^9, 
   3.544308912009281*^9}, {3.544310258607672*^9, 3.54431032860182*^9}, 
   3.544310384110886*^9, {3.544310539174104*^9, 3.544310558250331*^9}, 
   3.544311461237614*^9, {3.544314069569647*^9, 3.544314104744258*^9}, {
   3.544371574113584*^9, 3.544371575970547*^9}, 3.544371668116719*^9, {
   3.544387539001622*^9, 3.544387555553599*^9}, 3.54440205408185*^9, 
   3.544404406964967*^9, 3.544404481390051*^9, 3.54440467224538*^9, 
   3.544405171147399*^9, 3.544438832007317*^9, {3.5444388832017517`*^9, 
   3.544438888091008*^9}, {3.544438955477181*^9, 3.544438985331161*^9}, 
   3.544467229507824*^9, {3.544470421216458*^9, 3.544470426027061*^9}, 
   3.544470456933675*^9, {3.544470539481817*^9, 3.54447055783865*^9}, 
   3.544917506007525*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Block", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"useStep", "=", "False"}], "}"}], ",", 
   RowBox[{"rewardFunction", "[", 
    RowBox[{"1.0", ",", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Random", "[", "]"}], "-", "0.5"}], ")"}], "*", "10"}], ",", 
       RowBox[{"{", "nPolicies", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"nFeatures", "+", "1"}], "}"}]}], "]"}]}], "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.543948894005818*^9, 3.543948903475501*^9}, {
  3.543955170477691*^9, 3.543955180915965*^9}, {3.544286319422528*^9, 
  3.544286351067055*^9}, {3.544310297780101*^9, 3.544310308047661*^9}, {
  3.5444044370688143`*^9, 3.544404478231902*^9}, {3.54443895345035*^9, 
  3.544438976777485*^9}, {3.544441545321649*^9, 3.5444415580221157`*^9}, {
  3.544470562227547*^9, 3.544470566882126*^9}, {3.544470943359784*^9, 
  3.544470956374106*^9}}],

Cell[BoxData["7.289515538809477`"], "Output",
 CellChangeTimes->{
  3.544441560346546*^9, 3.5444672321829*^9, {3.544470567280038*^9, 
   3.5444705696046*^9}, 3.544470959752121*^9, 3.544917507657771*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"useStep", "=", "False"}], "}"}], ",", 
    RowBox[{"soln1", "=", 
     RowBox[{"minP", "[", "1.0", "]"}]}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.543871186600027*^9, 3.54387119260325*^9}, {
   3.543871280095396*^9, 3.543871348732301*^9}, {3.543871381538703*^9, 
   3.543871469734889*^9}, {3.543871520564796*^9, 3.543871530812133*^9}, {
   3.543871612393056*^9, 3.543871616311381*^9}, {3.543871652973905*^9, 
   3.543871672667427*^9}, {3.543871995059092*^9, 3.543871995218156*^9}, {
   3.543949218261597*^9, 3.543949225930965*^9}, {3.543949321432448*^9, 
   3.543949373067781*^9}, {3.543949630545298*^9, 3.543949679278877*^9}, {
   3.543949730947589*^9, 3.543949759633005*^9}, 3.543949871667687*^9, {
   3.543950237866308*^9, 3.543950243201226*^9}, {3.543950344763688*^9, 
   3.543950360817996*^9}, {3.54395052113616*^9, 3.54395060325904*^9}, {
   3.54395125002737*^9, 3.543951269919314*^9}, {3.543955534491437*^9, 
   3.54395555772196*^9}, {3.543955859913995*^9, 3.543955862368361*^9}, {
   3.543955992697519*^9, 3.543955999025414*^9}, {3.543956510596297*^9, 
   3.543956538633755*^9}, {3.543956581362532*^9, 3.54395660883332*^9}, {
   3.544283788718416*^9, 3.544283790804611*^9}, {3.544286380274002*^9, 
   3.544286393352107*^9}, {3.544286455022481*^9, 3.544286457452221*^9}, {
   3.544308604276308*^9, 3.54430860740274*^9}, {3.544308671888711*^9, 
   3.544308675086562*^9}, {3.544439004252082*^9, 3.544439006248466*^9}, {
   3.5444415736650877`*^9, 3.544441586837124*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3.586455`", ",", 
   RowBox[{"{", 
    RowBox[{"2.780285159753058`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "5904.863840790967`"}], ",", "6270.589592250208`", ",", 
         
         RowBox[{"-", "117.74543702190961`"}], ",", "5899.455632808256`", ",",
          "7714.423814112657`", ",", "1198.2938546356695`", ",", 
         "968.3918576067391`", ",", 
         RowBox[{"-", "8142.4796202998505`"}], ",", "16082.629317806613`", 
         ",", 
         RowBox[{"-", "64748.91723231926`"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "0.01783044097296903`"}], ",", 
         RowBox[{"-", "0.027782092577884814`"}], ",", "0.10017591889663095`", 
         ",", "0.12177414166664846`", ",", "0.04425236788194466`", ",", 
         RowBox[{"-", "0.0567073594555641`"}], ",", 
         RowBox[{"-", "0.512038144389395`"}], ",", 
         RowBox[{"-", "0.11425067352150209`"}], ",", 
         "0.00022906763879147627`", ",", "33.44111588808244`"}], "}"}]}], 
      "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.544441587590603*^9, 3.5444419945218983`*^9, 
  3.544467270012942*^9, 3.544470959302905*^9, 3.544917512223127*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"soln1", "=", 
   RowBox[{"minP", "[", "1.0", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.543871186600027*^9, 3.54387119260325*^9}, {
   3.543871280095396*^9, 3.543871348732301*^9}, {3.543871381538703*^9, 
   3.543871469734889*^9}, {3.543871520564796*^9, 3.543871530812133*^9}, {
   3.543871612393056*^9, 3.543871616311381*^9}, {3.543871652973905*^9, 
   3.543871672667427*^9}, {3.543871995059092*^9, 3.543871995218156*^9}, {
   3.543949218261597*^9, 3.543949225930965*^9}, {3.543949321432448*^9, 
   3.543949373067781*^9}, {3.543949630545298*^9, 3.543949679278877*^9}, {
   3.543949730947589*^9, 3.543949759633005*^9}, 3.543949871667687*^9, {
   3.543950237866308*^9, 3.543950243201226*^9}, {3.543950344763688*^9, 
   3.543950360817996*^9}, {3.54395052113616*^9, 3.54395060325904*^9}, {
   3.54395125002737*^9, 3.543951269919314*^9}, {3.543955534491437*^9, 
   3.54395555772196*^9}, {3.543955859913995*^9, 3.543955862368361*^9}, {
   3.543955992697519*^9, 3.543955999025414*^9}, {3.543956510596297*^9, 
   3.543956538633755*^9}, {3.543956581362532*^9, 3.54395660883332*^9}, {
   3.544283788718416*^9, 3.544283790804611*^9}, {3.544286380274002*^9, 
   3.544286393352107*^9}, {3.544286455022481*^9, 3.544286457452221*^9}, {
   3.544308604276308*^9, 3.54430860740274*^9}, {3.544308671888711*^9, 
   3.544308675086562*^9}, {3.544439004252082*^9, 3.544439006248466*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.5509160000000002`", ",", 
   RowBox[{"{", 
    RowBox[{"4.710585780839995`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "0.8006856514962624`"}], ",", "0.6310443967188841`", 
         ",", "0.8603568342544997`", ",", "0.23523796917908166`", ",", 
         "0.9016599540153041`", ",", "0.23355584792905787`", ",", 
         "0.0042067131648848306`", ",", 
         RowBox[{"-", "0.29370068927518594`"}], ",", 
         RowBox[{"-", "0.34942856952137047`"}], ",", 
         RowBox[{"-", "1"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "0.8185155665435344`"}], ",", "0.6328054164176953`", 
         ",", "0.9134564365707214`", ",", "0.2798002958099093`", ",", 
         "0.9142599891340963`", ",", "0.27075263118075865`", ",", 
         RowBox[{"-", "0.018191809115250646`"}], ",", 
         RowBox[{"-", "0.25923862786352103`"}], ",", 
         RowBox[{"-", "0.37144645571344537`"}], ",", 
         RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.544310601081115*^9, 3.544314140064747*^9, 
  3.544371585363076*^9, 3.544371675863237*^9, 3.5444390110410852`*^9, 
  3.5444392635952873`*^9, 3.544439651619422*^9, 3.544439702322405*^9, 
  3.544440261864481*^9, 3.544467281031082*^9, 3.544470913920669*^9, 
  3.544917518084271*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dist", "[", "0", "]"}]], "Input",
 CellChangeTimes->{{3.544372178555284*^9, 3.544372188483371*^9}, {
  3.544375517995598*^9, 3.544375518904939*^9}, {3.544375828899491*^9, 
  3.544375829296723*^9}, {3.544377235368189*^9, 3.54437723850097*^9}, {
  3.544377665272233*^9, 3.544377669957976*^9}, {3.544377836376387*^9, 
  3.544377839180687*^9}}],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      TagBox[
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "1"}], "}"}],
       HoldForm], "2"},
     {
      TagBox[
       RowBox[{"{", 
        RowBox[{"0", ",", 
         RowBox[{"-", "1"}]}], "}"}],
       HoldForm], "37"},
     {
      TagBox[
       RowBox[{"{", 
        RowBox[{"1", ",", 
         RowBox[{"-", "1"}]}], "}"}],
       HoldForm], "17"},
     {
      TagBox[
       RowBox[{"{", 
        RowBox[{"1", ",", "0"}], "}"}],
       HoldForm], "2"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxDividers->{
     "Columns" -> {False, {True}, False}, "ColumnsIndexed" -> {}, 
      "Rows" -> {{False}}, "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}],
   OutputFormsDump`HeadedColumn],
  Function[BoxForm`e$, 
   TableForm[
   BoxForm`e$, 
    TableHeadings -> {{{-1, 1}, {0, -1}, {1, -1}, {1, 0}}, None}]]]], "Output",\

 CellChangeTimes->{3.544377882380079*^9, 3.54438630907609*^9, 
  3.544387558633495*^9, 3.544439316075947*^9, 3.544439861909957*^9, 
  3.544440266967826*^9, 3.544467281247016*^9, 3.544470973147712*^9, 
  3.544917522230344*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dist", "[", 
  RowBox[{"soln1", "[", 
   RowBox[{"[", "2", "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.544439864737287*^9, 3.5444398743181343`*^9}}],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      TagBox[
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}],
       HoldForm], "15"},
     {
      TagBox[
       RowBox[{"{", 
        RowBox[{"1", ",", "0"}], "}"}],
       HoldForm], "3"},
     {
      TagBox[
       RowBox[{"{", 
        RowBox[{"1", ",", "1"}], "}"}],
       HoldForm], "40"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxDividers->{
     "Columns" -> {False, {True}, False}, "ColumnsIndexed" -> {}, 
      "Rows" -> {{False}}, "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}],
   OutputFormsDump`HeadedColumn],
  Function[BoxForm`e$, 
   TableForm[
   BoxForm`e$, TableHeadings -> {{{0, 0}, {1, 0}, {1, 1}}, None}]]]], "Output",\

 CellChangeTimes->{3.544439877585329*^9, 3.5444402700317793`*^9, 
  3.5444420300230513`*^9, 3.544467281453415*^9, 3.5444709748399*^9, 
  3.544917524882483*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Different values of beta (step)", "Subsection",
 CellChangeTimes->{{3.544308961231416*^9, 3.544308965614366*^9}, {
  3.544309368343341*^9, 3.544309371406606*^9}, {3.544378437619634*^9, 
  3.544378456649959*^9}}],

Cell[CellGroupData[{

Cell["Calculate solutions", "Subsubsection",
 CellChangeTimes->{{3.544384315759743*^9, 3.544384322354718*^9}, {
  3.544440342909152*^9, 3.54444034461098*^9}, {3.5444407153641777`*^9, 
  3.544440716576621*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{
   RowBox[{"soln", "[", "0", "]"}], "=", 
   RowBox[{"minP", "[", 
    RowBox[{"0", ",", 
     RowBox[{"Method", "\[Rule]", "\"\<DifferentialEvolution\>\""}]}], 
    "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.543871186600027*^9, 3.54387119260325*^9}, {
   3.543871280095396*^9, 3.543871348732301*^9}, {3.543871381538703*^9, 
   3.543871469734889*^9}, {3.543871520564796*^9, 3.543871530812133*^9}, {
   3.543871612393056*^9, 3.543871616311381*^9}, {3.543871652973905*^9, 
   3.543871672667427*^9}, {3.543871995059092*^9, 3.543871995218156*^9}, {
   3.543949218261597*^9, 3.543949225930965*^9}, {3.543949321432448*^9, 
   3.543949373067781*^9}, {3.543949630545298*^9, 3.543949679278877*^9}, {
   3.543949730947589*^9, 3.543949759633005*^9}, 3.543949871667687*^9, {
   3.543950237866308*^9, 3.543950243201226*^9}, {3.543950344763688*^9, 
   3.543950360817996*^9}, {3.54395052113616*^9, 3.54395060325904*^9}, {
   3.54395125002737*^9, 3.543951269919314*^9}, {3.543955534491437*^9, 
   3.54395555772196*^9}, {3.543955859913995*^9, 3.543955862368361*^9}, {
   3.543955992697519*^9, 3.543955999025414*^9}, {3.543956510596297*^9, 
   3.543956538633755*^9}, {3.543956581362532*^9, 3.54395660883332*^9}, {
   3.544283788718416*^9, 3.544283790804611*^9}, {3.544286380274002*^9, 
   3.544286393352107*^9}, {3.544286455022481*^9, 3.544286457452221*^9}, {
   3.544308604276308*^9, 3.54430860740274*^9}, {3.544308671888711*^9, 
   3.544308675086562*^9}, {3.544378486524983*^9, 3.544378486706482*^9}, {
   3.544378550863277*^9, 3.544378552030537*^9}, {3.544378623526224*^9, 
   3.544378626930903*^9}, 3.54437887867316*^9, {3.54444039802157*^9, 
   3.544440401133535*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"14.381813000000001`", ",", 
   RowBox[{"{", 
    RowBox[{"1.5184659187260439`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "7.136598599325459`"}], ",", 
         RowBox[{"-", "3.8746773852154077`"}], ",", 
         RowBox[{"-", "2.280176776152531`"}], ",", 
         RowBox[{"-", "2.162145543720486`"}], ",", "0.32593557016358243`", 
         ",", "6.026433925555234`", ",", 
         RowBox[{"-", "2.468428274628208`"}], ",", "6.107004879298036`", ",", 
         
         RowBox[{"-", "2.0016850695166357`"}], ",", 
         RowBox[{"-", "1"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "4.474405660501691`"}], ",", 
         RowBox[{"-", "10.751733479139332`"}], ",", 
         RowBox[{"-", "8.331270257374165`"}], ",", 
         RowBox[{"-", "3.1366179041112723`"}], ",", 
         RowBox[{"-", "19.15680175744278`"}], ",", 
         RowBox[{"-", "10.788758029933572`"}], ",", 
         RowBox[{"-", "4.964999595873955`"}], ",", "4.476019299805516`", ",", 
         
         RowBox[{"-", "4.518195519049701`"}], ",", "1"}], "}"}]}], "}"}]}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.544378587442328*^9, 3.544378646469111*^9, 3.544378919795269*^9, 
   3.544379270263111*^9, 3.544380403403709*^9, 3.54438767879974*^9, 
   3.544440485106802*^9, 3.544472239490107*^9, 3.544917461794824*^9, 
   3.544917536415502*^9, 3.544917982498106*^9, {3.544918113881044*^9, 
   3.544918140367859*^9}, 3.544918291266912*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{
   RowBox[{"soln", "[", 
    RowBox[{"1", "/", "16"}], "]"}], "=", 
   RowBox[{"minP", "[", 
    RowBox[{
     RowBox[{"1", "/", "16"}], ",", 
     RowBox[{"Method", "\[Rule]", "\"\<DifferentialEvolution\>\""}]}], 
    "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.543871186600027*^9, 3.54387119260325*^9}, {
   3.543871280095396*^9, 3.543871348732301*^9}, {3.543871381538703*^9, 
   3.543871469734889*^9}, {3.543871520564796*^9, 3.543871530812133*^9}, {
   3.543871612393056*^9, 3.543871616311381*^9}, {3.543871652973905*^9, 
   3.543871672667427*^9}, {3.543871995059092*^9, 3.543871995218156*^9}, {
   3.543949218261597*^9, 3.543949225930965*^9}, {3.543949321432448*^9, 
   3.543949373067781*^9}, {3.543949630545298*^9, 3.543949679278877*^9}, {
   3.543949730947589*^9, 3.543949759633005*^9}, 3.543949871667687*^9, {
   3.543950237866308*^9, 3.543950243201226*^9}, {3.543950344763688*^9, 
   3.543950360817996*^9}, {3.54395052113616*^9, 3.54395060325904*^9}, {
   3.54395125002737*^9, 3.543951269919314*^9}, {3.543955534491437*^9, 
   3.54395555772196*^9}, {3.543955859913995*^9, 3.543955862368361*^9}, {
   3.543955992697519*^9, 3.543955999025414*^9}, {3.543956510596297*^9, 
   3.543956538633755*^9}, {3.543956581362532*^9, 3.54395660883332*^9}, {
   3.544283788718416*^9, 3.544283790804611*^9}, {3.544286380274002*^9, 
   3.544286393352107*^9}, {3.544286455022481*^9, 3.544286457452221*^9}, {
   3.544308604276308*^9, 3.54430860740274*^9}, {3.544308671888711*^9, 
   3.544308675086562*^9}, {3.544378486524983*^9, 3.544378486706482*^9}, {
   3.544378550863277*^9, 3.544378552030537*^9}, {3.544378623526224*^9, 
   3.544378626930903*^9}, 3.54437887867316*^9, {3.54444039802157*^9, 
   3.544440401133535*^9}, {3.544918060850828*^9, 3.544918062832825*^9}, {
   3.544918128239191*^9, 3.544918132813153*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"28.955598`", ",", 
   RowBox[{"{", 
    RowBox[{"3.802236974526491`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "3.998408126573673`"}], ",", "1.5460848391010908`", ",",
          "2.1010823089236985`", ",", 
         RowBox[{"-", "2.2233381088249007`"}], ",", "0.9167307960869647`", 
         ",", "2.472087012197373`", ",", 
         RowBox[{"-", "0.9636713395702887`"}], ",", "2.497457828330414`", ",",
          "6.456487649150432`", ",", 
         RowBox[{"-", "1"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1.1997805379125335`", ",", "1.7634416673709876`", ",", 
         RowBox[{"-", "0.12329608248569945`"}], ",", "2.332847919316884`", 
         ",", 
         RowBox[{"-", "1.7096198962439857`"}], ",", 
         RowBox[{"-", "1.679897714846529`"}], ",", 
         RowBox[{"-", "2.576935916957974`"}], ",", "1.4429984572671362`", ",",
          "1.0173447901749029`", ",", "1"}], "}"}]}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.544918067709406*^9, {3.544918120366435*^9, 3.544918137332629*^9}, 
   3.544918320423068*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{
   RowBox[{"soln", "[", 
    RowBox[{"1", "/", "8"}], "]"}], "=", 
   RowBox[{"minP", "[", 
    RowBox[{"0.125", ",", 
     RowBox[{"Method", "\[Rule]", "\"\<DifferentialEvolution\>\""}]}], 
    "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.543871186600027*^9, 3.54387119260325*^9}, {
   3.543871280095396*^9, 3.543871348732301*^9}, {3.543871381538703*^9, 
   3.543871469734889*^9}, {3.543871520564796*^9, 3.543871530812133*^9}, {
   3.543871612393056*^9, 3.543871616311381*^9}, {3.543871652973905*^9, 
   3.543871672667427*^9}, {3.543871995059092*^9, 3.543871995218156*^9}, {
   3.543949218261597*^9, 3.543949225930965*^9}, {3.543949321432448*^9, 
   3.543949373067781*^9}, {3.543949630545298*^9, 3.543949679278877*^9}, {
   3.543949730947589*^9, 3.543949759633005*^9}, 3.543949871667687*^9, {
   3.543950237866308*^9, 3.543950243201226*^9}, {3.543950344763688*^9, 
   3.543950360817996*^9}, {3.54395052113616*^9, 3.54395060325904*^9}, {
   3.54395125002737*^9, 3.543951269919314*^9}, {3.543955534491437*^9, 
   3.54395555772196*^9}, {3.543955859913995*^9, 3.543955862368361*^9}, {
   3.543955992697519*^9, 3.543955999025414*^9}, {3.543956510596297*^9, 
   3.543956538633755*^9}, {3.543956581362532*^9, 3.54395660883332*^9}, {
   3.544283788718416*^9, 3.544283790804611*^9}, {3.544286380274002*^9, 
   3.544286393352107*^9}, {3.544286455022481*^9, 3.544286457452221*^9}, {
   3.544308604276308*^9, 3.54430860740274*^9}, {3.544308671888711*^9, 
   3.544308675086562*^9}, {3.544378489156503*^9, 3.544378506633267*^9}, {
   3.544378563311056*^9, 3.544378572949498*^9}, {3.544378628646319*^9, 
   3.544378639778276*^9}, 3.544378884312993*^9, {3.544380353185018*^9, 
   3.544380361175795*^9}, {3.544440403341961*^9, 3.544440404772347*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"26.157024000000007`", ",", 
   RowBox[{"{", 
    RowBox[{"5.942496739632202`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "2.236963617680331`"}], ",", "1.3497201051502459`", ",", 
         RowBox[{"-", "2.38336828629415`"}], ",", "0.2971611274791421`", ",", 
         "1.631831984894685`", ",", "0.529343314444716`", ",", 
         RowBox[{"-", "0.44464816234694243`"}], ",", "1.8024984222143745`", 
         ",", 
         RowBox[{"-", "6.7156477980030544`"}], ",", 
         RowBox[{"-", "1"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1.1997805379125335`", ",", "1.7634416673709876`", ",", 
         RowBox[{"-", "0.12329608248569945`"}], ",", "2.332847919316884`", 
         ",", 
         RowBox[{"-", "1.7096198962439857`"}], ",", 
         RowBox[{"-", "1.679897714846529`"}], ",", 
         RowBox[{"-", "2.576935916957974`"}], ",", "1.4429984572671362`", ",",
          "1.0173447901749029`", ",", "1"}], "}"}]}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.544380433549481*^9, 3.544388011558476*^9, 
  3.544440593323715*^9, 3.544473029151452*^9, 3.54491746323898*^9, 
  3.544917540161395*^9, 3.54491798635295*^9, 3.544918125775347*^9, 
  3.544918347031747*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{
   RowBox[{"soln", "[", 
    RowBox[{"1", "/", "4"}], "]"}], "=", 
   RowBox[{"minP", "[", 
    RowBox[{"0.25", ",", 
     RowBox[{"Method", "\[Rule]", "\"\<DifferentialEvolution\>\""}]}], 
    "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.543871186600027*^9, 3.54387119260325*^9}, {
   3.543871280095396*^9, 3.543871348732301*^9}, {3.543871381538703*^9, 
   3.543871469734889*^9}, {3.543871520564796*^9, 3.543871530812133*^9}, {
   3.543871612393056*^9, 3.543871616311381*^9}, {3.543871652973905*^9, 
   3.543871672667427*^9}, {3.543871995059092*^9, 3.543871995218156*^9}, {
   3.543949218261597*^9, 3.543949225930965*^9}, {3.543949321432448*^9, 
   3.543949373067781*^9}, {3.543949630545298*^9, 3.543949679278877*^9}, {
   3.543949730947589*^9, 3.543949759633005*^9}, 3.543949871667687*^9, {
   3.543950237866308*^9, 3.543950243201226*^9}, {3.543950344763688*^9, 
   3.543950360817996*^9}, {3.54395052113616*^9, 3.54395060325904*^9}, {
   3.54395125002737*^9, 3.543951269919314*^9}, {3.543955534491437*^9, 
   3.54395555772196*^9}, {3.543955859913995*^9, 3.543955862368361*^9}, {
   3.543955992697519*^9, 3.543955999025414*^9}, {3.543956510596297*^9, 
   3.543956538633755*^9}, {3.543956581362532*^9, 3.54395660883332*^9}, {
   3.544283788718416*^9, 3.544283790804611*^9}, {3.544286380274002*^9, 
   3.544286393352107*^9}, {3.544286455022481*^9, 3.544286457452221*^9}, {
   3.544308604276308*^9, 3.54430860740274*^9}, {3.544308671888711*^9, 
   3.544308675086562*^9}, {3.544378489156503*^9, 3.544378506633267*^9}, {
   3.544378563311056*^9, 3.544378572949498*^9}, {3.544378628646319*^9, 
   3.544378639778276*^9}, 3.544378884312993*^9, {3.544440407014098*^9, 
   3.544440408581635*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"26.415984000000012`", ",", 
   RowBox[{"{", 
    RowBox[{"10.50059890468945`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "1.6323528951555946`"}], ",", 
         RowBox[{"-", "1.3418215346223952`"}], ",", "0.6163204910278883`", 
         ",", 
         RowBox[{"-", "0.5742975681512099`"}], ",", 
         RowBox[{"-", "1.3244365263907971`"}], ",", "0.8548095177577053`", 
         ",", 
         RowBox[{"-", "0.4441322060896129`"}], ",", "1.6362515597909915`", 
         ",", 
         RowBox[{"-", "0.6761018283586573`"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2.35856238962936`", ",", 
         RowBox[{"-", "3.4771281642059195`"}], ",", "18.140106581669915`", 
         ",", 
         RowBox[{"-", "2.7541567415414607`"}], ",", 
         RowBox[{"-", "3.154597677249198`"}], ",", 
         RowBox[{"-", "1.499614081851497`"}], ",", 
         RowBox[{"-", "6.420278068052213`"}], ",", "2.512253124530359`", ",", 
         "2.0407625200040034`", ",", "1"}], "}"}]}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.544378595214166*^9, 3.544378603002468*^9}, 
   3.544378654392486*^9, 3.544378952804047*^9, 3.544379286589904*^9, 
   3.544380455307918*^9, 3.544388388556213*^9, 3.54444071070359*^9, 
   3.544473653346423*^9, 3.544917464694959*^9, 3.54491754351022*^9, 
   3.544917989759298*^9, 3.544918374335273*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{
   RowBox[{"soln", "[", 
    RowBox[{"1", "/", "2"}], "]"}], "=", 
   RowBox[{"minP", "[", 
    RowBox[{"0.5", ",", 
     RowBox[{"Method", "\[Rule]", "\"\<DifferentialEvolution\>\""}]}], 
    "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.543871186600027*^9, 3.54387119260325*^9}, {
   3.543871280095396*^9, 3.543871348732301*^9}, {3.543871381538703*^9, 
   3.543871469734889*^9}, {3.543871520564796*^9, 3.543871530812133*^9}, {
   3.543871612393056*^9, 3.543871616311381*^9}, {3.543871652973905*^9, 
   3.543871672667427*^9}, {3.543871995059092*^9, 3.543871995218156*^9}, {
   3.543949218261597*^9, 3.543949225930965*^9}, {3.543949321432448*^9, 
   3.543949373067781*^9}, {3.543949630545298*^9, 3.543949679278877*^9}, {
   3.543949730947589*^9, 3.543949759633005*^9}, 3.543949871667687*^9, {
   3.543950237866308*^9, 3.543950243201226*^9}, {3.543950344763688*^9, 
   3.543950360817996*^9}, {3.54395052113616*^9, 3.54395060325904*^9}, {
   3.54395125002737*^9, 3.543951269919314*^9}, {3.543955534491437*^9, 
   3.54395555772196*^9}, {3.543955859913995*^9, 3.543955862368361*^9}, {
   3.543955992697519*^9, 3.543955999025414*^9}, {3.543956510596297*^9, 
   3.543956538633755*^9}, {3.543956581362532*^9, 3.54395660883332*^9}, {
   3.544283788718416*^9, 3.544283790804611*^9}, {3.544286380274002*^9, 
   3.544286393352107*^9}, {3.544286455022481*^9, 3.544286457452221*^9}, {
   3.544308604276308*^9, 3.54430860740274*^9}, {3.544308671888711*^9, 
   3.544308675086562*^9}, {3.544378635820849*^9, 3.544378650555233*^9}, 
   3.544378887952763*^9, {3.544379442281296*^9, 3.544379446751754*^9}, {
   3.544379495190659*^9, 3.544379503204517*^9}, {3.544440411518053*^9, 
   3.5444404148217497`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"27.805772999999988`", ",", 
   RowBox[{"{", 
    RowBox[{"19.059516486925208`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0.8684834819360604`", ",", "1.5786282934417573`", ",", 
         RowBox[{"-", "0.49787979421138917`"}], ",", "0.6274274337517229`", 
         ",", 
         RowBox[{"-", "0.670531337812058`"}], ",", 
         RowBox[{"-", "0.8530236301440604`"}], ",", 
         RowBox[{"-", "0.28009505206270324`"}], ",", 
         RowBox[{"-", "10.682676306628231`"}], ",", 
         RowBox[{"-", "1.2935204090333643`"}], ",", 
         RowBox[{"-", "1"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
        "1.1003238423371495`", ",", "5.142953463587636`", ",", 
         "0.9619910317444216`", ",", "3.355761322415863`", ",", 
         "0.302694988983404`", ",", 
         RowBox[{"-", "2.6785105124378927`"}], ",", 
         RowBox[{"-", "3.934729520414922`"}], ",", "3.2812254976834136`", ",",
          "4.788814528706034`", ",", "1"}], "}"}]}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.544379547999859*^9, 3.544388863059906*^9, 
  3.544440806819106*^9, 3.544474589696885*^9, 3.544917466216409*^9, 
  3.544917546891526*^9, 3.544917993198244*^9, 3.544918402384789*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{
   RowBox[{"soln", "[", "1", "]"}], "=", 
   RowBox[{"minP", "[", 
    RowBox[{"1.0", ",", 
     RowBox[{"Method", "\[Rule]", "\"\<DifferentialEvolution\>\""}]}], 
    "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.543871186600027*^9, 3.54387119260325*^9}, {
   3.543871280095396*^9, 3.543871348732301*^9}, {3.543871381538703*^9, 
   3.543871469734889*^9}, {3.543871520564796*^9, 3.543871530812133*^9}, {
   3.543871612393056*^9, 3.543871616311381*^9}, {3.543871652973905*^9, 
   3.543871672667427*^9}, {3.543871995059092*^9, 3.543871995218156*^9}, {
   3.543949218261597*^9, 3.543949225930965*^9}, {3.543949321432448*^9, 
   3.543949373067781*^9}, {3.543949630545298*^9, 3.543949679278877*^9}, {
   3.543949730947589*^9, 3.543949759633005*^9}, 3.543949871667687*^9, {
   3.543950237866308*^9, 3.543950243201226*^9}, {3.543950344763688*^9, 
   3.543950360817996*^9}, {3.54395052113616*^9, 3.54395060325904*^9}, {
   3.54395125002737*^9, 3.543951269919314*^9}, {3.543955534491437*^9, 
   3.54395555772196*^9}, {3.543955859913995*^9, 3.543955862368361*^9}, {
   3.543955992697519*^9, 3.543955999025414*^9}, {3.543956510596297*^9, 
   3.543956538633755*^9}, {3.543956581362532*^9, 3.54395660883332*^9}, {
   3.544283788718416*^9, 3.544283790804611*^9}, {3.544286380274002*^9, 
   3.544286393352107*^9}, {3.544286455022481*^9, 3.544286457452221*^9}, {
   3.544308604276308*^9, 3.54430860740274*^9}, {3.544308671888711*^9, 
   3.544308675086562*^9}, {3.544378635820849*^9, 3.544378650555233*^9}, 
   3.544378887952763*^9, {3.544440425141961*^9, 3.544440429397704*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"32.195105999999996`", ",", 
   RowBox[{"{", 
    RowBox[{"34.54375071682966`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "2.419138004398252`"}], ",", "2.600402297566122`", ",", 
         "0.6794381131725211`", ",", "1.027036895571544`", ",", 
         "2.452654069083815`", ",", 
         RowBox[{"-", "2.2455197514047223`"}], ",", "0.5074118950108519`", 
         ",", 
         RowBox[{"-", "1.945255918579961`"}], ",", 
         RowBox[{"-", "1.5731583908835243`"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "0.2736117580528237`"}], ",", "9.986884637782106`", ",",
          "11.928658042396462`", ",", "0.1470580121227536`", ",", 
         RowBox[{"-", "4.566751863044802`"}], ",", 
         RowBox[{"-", "2.602368484544916`"}], ",", 
         RowBox[{"-", "6.667291531217063`"}], ",", "4.251102199014177`", ",", 
         "3.9872235768201776`", ",", "1"}], "}"}]}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.54437861042632*^9, 3.54437866184594*^9, 
  3.544379007126011*^9, 3.544379323266611*^9, 3.544389138605681*^9, 
  3.544440898976169*^9, 3.544475516046766*^9, 3.544917467722737*^9, 
  3.544917550609797*^9, 3.544917996965677*^9, 3.544918434904147*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{
   RowBox[{"soln", "[", "2", "]"}], "=", 
   RowBox[{"minP", "[", 
    RowBox[{"2.0", ",", 
     RowBox[{"Method", "\[Rule]", "\"\<DifferentialEvolution\>\""}]}], 
    "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.543871186600027*^9, 3.54387119260325*^9}, {
   3.543871280095396*^9, 3.543871348732301*^9}, {3.543871381538703*^9, 
   3.543871469734889*^9}, {3.543871520564796*^9, 3.543871530812133*^9}, {
   3.543871612393056*^9, 3.543871616311381*^9}, {3.543871652973905*^9, 
   3.543871672667427*^9}, {3.543871995059092*^9, 3.543871995218156*^9}, {
   3.543949218261597*^9, 3.543949225930965*^9}, {3.543949321432448*^9, 
   3.543949373067781*^9}, {3.543949630545298*^9, 3.543949679278877*^9}, {
   3.543949730947589*^9, 3.543949759633005*^9}, 3.543949871667687*^9, {
   3.543950237866308*^9, 3.543950243201226*^9}, {3.543950344763688*^9, 
   3.543950360817996*^9}, {3.54395052113616*^9, 3.54395060325904*^9}, {
   3.54395125002737*^9, 3.543951269919314*^9}, {3.543955534491437*^9, 
   3.54395555772196*^9}, {3.543955859913995*^9, 3.543955862368361*^9}, {
   3.543955992697519*^9, 3.543955999025414*^9}, {3.543956510596297*^9, 
   3.543956538633755*^9}, {3.543956581362532*^9, 3.54395660883332*^9}, {
   3.544283788718416*^9, 3.544283790804611*^9}, {3.544286380274002*^9, 
   3.544286393352107*^9}, {3.544286455022481*^9, 3.544286457452221*^9}, {
   3.544308604276308*^9, 3.54430860740274*^9}, {3.544308671888711*^9, 
   3.544308675086562*^9}, {3.544378635820849*^9, 3.544378650555233*^9}, 
   3.544378887952763*^9, {3.544379442281296*^9, 3.544379446751754*^9}, {
   3.544440432477722*^9, 3.544440433941505*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"20.914821000000007`", ",", 
   RowBox[{"{", 
    RowBox[{"67.42312030103885`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "1.1477245141662173`"}], ",", 
         RowBox[{"-", "1.1947449643686112`"}], ",", "0.13480002698107962`", 
         ",", "1.769145229528165`", ",", 
         RowBox[{"-", "0.4874080830711359`"}], ",", 
         RowBox[{"-", "1.5779546747154929`"}], ",", "0.5122282152467299`", 
         ",", 
         RowBox[{"-", "1.9942716962815377`"}], ",", 
         RowBox[{"-", "0.17074639965190683`"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "0.9229185030389662`"}], ",", "0.17490919240577618`", 
         ",", "3.1875408882324896`", ",", "0.2830549473857549`", ",", 
         RowBox[{"-", "0.4519292691724998`"}], ",", 
         RowBox[{"-", "1.1610866818818717`"}], ",", 
         RowBox[{"-", "2.2534934104354676`"}], ",", "2.284102825603`", ",", 
         "0.9449041498521441`", ",", "1"}], "}"}]}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.54437861042632*^9, 3.54437866184594*^9, 
  3.544379007126011*^9, 3.544379323266611*^9, 3.544379489873142*^9, 
  3.54444101512812*^9, 3.544476316337489*^9, 3.544917469192052*^9, 
  3.544917554365823*^9, 3.5449180007354*^9, 3.544918456012658*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{
   RowBox[{"soln", "[", "4", "]"}], "=", 
   RowBox[{"minP", "[", 
    RowBox[{"4.0", ",", 
     RowBox[{"Method", "\[Rule]", "\"\<DifferentialEvolution\>\""}]}], 
    "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.543871186600027*^9, 3.54387119260325*^9}, {
   3.543871280095396*^9, 3.543871348732301*^9}, {3.543871381538703*^9, 
   3.543871469734889*^9}, {3.543871520564796*^9, 3.543871530812133*^9}, {
   3.543871612393056*^9, 3.543871616311381*^9}, {3.543871652973905*^9, 
   3.543871672667427*^9}, {3.543871995059092*^9, 3.543871995218156*^9}, {
   3.543949218261597*^9, 3.543949225930965*^9}, {3.543949321432448*^9, 
   3.543949373067781*^9}, {3.543949630545298*^9, 3.543949679278877*^9}, {
   3.543949730947589*^9, 3.543949759633005*^9}, 3.543949871667687*^9, {
   3.543950237866308*^9, 3.543950243201226*^9}, {3.543950344763688*^9, 
   3.543950360817996*^9}, {3.54395052113616*^9, 3.54395060325904*^9}, {
   3.54395125002737*^9, 3.543951269919314*^9}, {3.543955534491437*^9, 
   3.54395555772196*^9}, {3.543955859913995*^9, 3.543955862368361*^9}, {
   3.543955992697519*^9, 3.543955999025414*^9}, {3.543956510596297*^9, 
   3.543956538633755*^9}, {3.543956581362532*^9, 3.54395660883332*^9}, {
   3.544283788718416*^9, 3.544283790804611*^9}, {3.544286380274002*^9, 
   3.544286393352107*^9}, {3.544286455022481*^9, 3.544286457452221*^9}, {
   3.544308604276308*^9, 3.54430860740274*^9}, {3.544308671888711*^9, 
   3.544308675086562*^9}, {3.544378496252896*^9, 3.544378511145041*^9}, {
   3.544378575742053*^9, 3.544378576557062*^9}, {3.544378654973186*^9, 
   3.54437865645125*^9}, 3.544378891175893*^9, {3.544440437637897*^9, 
   3.544440439149638*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"35.61958399999998`", ",", 
   RowBox[{"{", 
    RowBox[{"130.14658278976518`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "1.835525715722094`"}], ",", "0.4654909643731522`", ",", 
         RowBox[{"-", "0.4475852281595944`"}], ",", "2.5340242983343932`", 
         ",", "0.825436457802142`", ",", 
         RowBox[{"-", "3.024385976351417`"}], ",", "0.7535975547137219`", ",", 
         RowBox[{"-", "3.198862522117427`"}], ",", "0.16429236699642047`", 
         ",", 
         RowBox[{"-", "1"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0.861501250925093`", ",", 
         RowBox[{"-", "1.0713340668373472`"}], ",", 
         RowBox[{"-", "0.18362410957984054`"}], ",", "0.7700837534168752`", 
         ",", 
         RowBox[{"-", "1.601959521197739`"}], ",", 
         RowBox[{"-", "1.459619987170742`"}], ",", 
         RowBox[{"-", "1.2220393081089196`"}], ",", "1.177738912251066`", ",",
          "0.29024811638034587`", ",", "1"}], "}"}]}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.544378618129459*^9, 3.544378669660114*^9, 
  3.544379066748491*^9, 3.5443793682378*^9, 3.544441138211753*^9, 
  3.544477087046146*^9, 3.544917470666544*^9, 3.544917558169946*^9, 
  3.544918004516503*^9, 3.544918491869145*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"betaList", "=", 
   RowBox[{"{", 
    RowBox[{"0", ",", 
     RowBox[{"1", "/", "16"}], ",", 
     RowBox[{"1", "/", "8"}], ",", 
     RowBox[{"1", "/", "4"}], ",", 
     RowBox[{"1", "/", "2"}], ",", "1", ",", "2", ",", "4"}], "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.544385273568301*^9, 3.544385312333649*^9}, {
  3.544918070362437*^9, 3.544918071704568*^9}}],

Cell[BoxData[
 RowBox[{"Block", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"file", "=", "\"\<soln-0.5-uwplatt-2Y130.m\>\""}], "}"}], ",", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"FileExistsQ", "[", "file", "]"}], ",", 
      RowBox[{"DeleteFile", "[", "file", "]"}]}], "]"}], ";", 
    RowBox[{"Save", "[", 
     RowBox[{"file", ",", 
      RowBox[{"{", 
       RowBox[{"soln", ",", "betaList"}], "}"}]}], "]"}]}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.544384348327892*^9, 3.544384369513109*^9}, {
  3.544385316245014*^9, 3.54438533409195*^9}, {3.54438756807914*^9, 
  3.544387569436308*^9}, {3.5444404936842318`*^9, 3.544440496329468*^9}, {
  3.544472033946563*^9, 3.544472035594161*^9}, {3.544917439641825*^9, 
  3.544917457489277*^9}, {3.544917941800749*^9, 3.544917975230351*^9}, {
  3.544918270720411*^9, 3.544918271726674*^9}, {3.544918881047918*^9, 
  3.544918895478662*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Analyze Solutions", "Subsubsection",
 CellChangeTimes->{{3.544384336189409*^9, 3.544384340929752*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Get", "[", "\"\<soln-0.5-uwplatt-2Y130.m\>\"", "]"}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.544384380890074*^9, 3.544384416912131*^9}, {
  3.544918282600356*^9, 3.544918283589955*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"pp", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"#", ",", 
            RowBox[{"First", "[", 
             RowBox[{"soln", "[", "#", "]"}], "]"}]}], "}"}], "&"}], ",", 
         "betaList"}], "]"}]}], ",", "y"}], "}"}], ",", 
    RowBox[{
     RowBox[{"y", "=", 
      RowBox[{"Fit", "[", 
       RowBox[{"pp", ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "x"}], "}"}], ",", "x"}], "]"}]}], ";", 
     RowBox[{"Show", "[", 
      RowBox[{
       RowBox[{"ListPlot", "[", 
        RowBox[{"pp", ",", 
         RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
         RowBox[{"Axes", "\[Rule]", "False"}], ",", 
         RowBox[{"Frame", "\[Rule]", "True"}]}], "]"}], ",", 
       RowBox[{"Plot", "[", 
        RowBox[{"y", ",", 
         RowBox[{"{", 
          RowBox[{"x", ",", "0", ",", "4"}], "}"}]}], "]"}]}], "]"}]}]}], 
   "]"}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.544379817722601*^9, 3.544379904817233*^9}, {
  3.54438489707463*^9, 3.544384973767721*^9}, {3.544385011125622*^9, 
  3.544385133946826*^9}, {3.544385260669626*^9, 3.544385286657191*^9}, {
  3.544385349926082*^9, 3.544385351430471*^9}}],

Cell[BoxData[
 GraphicsBox[{
   {Hue[0.67, 0.6, 0.6], 
    PointBox[{{0., 1.5184659187260439`}, {0.0625, 3.802236974526491}, {0.125, 
     5.942496739632202}, {0.25, 10.50059890468945}, {0.5, 
     19.059516486925208`}, {1., 34.54375071682966}, {2., 67.42312030103885}, {
     4., 130.14658278976518`}}]}, {{}, {}, 
    {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1:eJwVzms0lHkAx3EzJia3hyJGUSOXBkVCG+n/CwcxkjGT3MZzXKq1uqh0sanG
IUVKjlMkRaRaZZQx20qx5dTWVrK0tMuwkoRCLrMotn3xPZ+3X27ULkEsU0VF
xf9b/+sb29dU/yFxncuOF4a7hhhgeRjv7uQIieOIh9gSTKy6nHexihNDViTW
lHZkM+H3ovVOIWcfMUu+tpLvoIrgGOX9HE4q0ciS+PESWeiwS/fI4uSSv246
HX07pYYig4DjGZxS8uNgYW+wmhYk7CqrkxwZUTj9HFqkMx9bQoqlwyMNhJvE
bPp9xgSas5Jwb9NGIq/ZVlJlbA6LwE99jzJbSMaAdlL4Ih4OvFxD8sbekK4j
CaVlGStgKNNTMBidpGPCd5v+y5WQd3s8b1zbTTI7XS0tsxzxMK5wYchgD2ks
1tobS1Zj3NKNurXjPXnddL8Oj9aAOVmuu9Cin5hU+cvjk9fCeZaWB1UMEkvm
g5uOcwmepzq+fGw9RKIN0o0MGoDF2QOTNz4NE1HKJbu7pu4YUHYqXtt/JlaW
ZV68KA+U9t97pnN6lFwwK7zzsN4TOibXhnp6xkibZuq7z0ZeOPV99dYi8wmi
tAkzGgnxxgTKe7YfVRJ5KbfIUO6DfQ4NsgWP/iXBwjYrrekN6KxoyGziTpG8
8CMsXpgfpuNaCnhJ06Q0UP96u4wPm/XqM1vvfSE5yRf8xEp/eF/hbrttOEOW
MHU92aIAHDCJNPsnfJY8UbiY1vtvgu2gSLPVXwU9d94lP/m4CfOpYXbDlAoC
V7HZ0QWBYNUVSJdeZMCu0Swn1k2AHxzvvZnrx0SEYbXXl0EByjdEFT2YYGJE
VCcW5wdhfMBYt/ecKiakv+63chGiOshbNdeTBT+56y+pfUIc9Um7LOtlQbft
1rRPpgjcDt+2krQ5cB0+X9xmvRkuq1NzOQ5qkMsmE760bka4aeMko1kNxblB
7umHgjH+LKt7t0QdHUss3MqWbUEeS7xPYM7Gyd8+rbZ9vgXzFdVXmA1sFGy1
P5ccH4I5yRLhmoS5mKn8YBptHAqVG2Jp9zwNvFpQcE1aG4o9F6RZ8x5qYHRZ
Q2h2fBju25xg6+3UxOGVsQlrOeHQ891jm6KjhUTRTHpATTjal79qPlSrhToL
6unE9ghUXiLmPWJtHNQz0pijJUaE1FnPZEYbeaN5FYpyMY6lFUvaf9KBesrZ
ZH5IJG71mRTo8Cm8t0nhc6cjcaIwjVZspLCqd3ff6NdIxAg+WlQEUsArO/do
FRqLamsr/YMpnMowVTip0sg4E/b4VBQF89lpg7/ZNLY7549oHKIg6pOnWejT
MEvV91EvoyCvsY2tsaYx891h7dbrFNoNzauW2tJ48/HtH2XlFJiJCxlZy2lk
B1dFeN2msNFOozDSnsastWBvWu23v5L3LSxnGu1NZy6pNlMwzLriGbCext3j
yujm1xTc+vNz7rrTyHWN5JW0UYjxPtvF9aThd3WFzF1BoZJx7PCYF42agy+e
Sj5Q8NkfIcvn0zi33OlM4CCFnc1CpupGGgndF4XcIQq59vxN8QE0lvHjO+vH
KHT1uwyuE9BgMVpKs5UU1HwcXK4H0eiqdo2jpyjYXuWd0BPRqI0rsbP/SkHA
5P6ZtJnG+cWa47OzFA5GGpn3BNP4D8CyGaE=
      "]]}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Frame->True,
  ImageSize->{332., Automatic},
  PlotRangeClipping->True]], "Output",
 CellChangeTimes->{{3.544379861699829*^9, 3.544379879002815*^9}, 
   3.544385137529369*^9, 3.544385263828395*^9, 3.544385352125253*^9, 
   3.544439345571724*^9, 3.5444403065056047`*^9, 3.5444412492689466`*^9, 
   3.544917568821448*^9, 3.544918009013992*^9, 3.544918079730604*^9, 
   3.544918146927054*^9, {3.544918901230497*^9, 3.544918903798987*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"#", ",", 
      RowBox[{
       RowBox[{"soln", "[", "#", "]"}], "[", 
       RowBox[{"[", "1", "]"}], "]"}], ",", 
      RowBox[{"dist", "[", 
       RowBox[{
        RowBox[{"soln", "[", "#", "]"}], "[", 
        RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "}"}], "&"}], ",", 
   "betaList"}], "]"}]], "Input",
 CellChangeTimes->{{3.544385171884546*^9, 3.544385235434811*^9}, {
  3.54438535870544*^9, 3.544385361739018*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "1.5184659187260439`", ",", 
     TagBox[
      TagBox[GridBox[{
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}],
           HoldForm], "623"},
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}],
           HoldForm], "185"},
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"1", ",", "1"}], "}"}],
           HoldForm], "3"}
        },
        GridBoxAlignment->{
         "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxDividers->{
         "Columns" -> {False, {True}, False}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{False}}, "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.5599999999999999]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
          "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}],
       OutputFormsDump`HeadedColumn],
      Function[BoxForm`e$, 
       TableForm[
       BoxForm`e$, TableHeadings -> {{{0, 0}, {1, 0}, {1, 1}}, None}]]]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["1", "16"], ",", "3.802236974526491`", ",", 
     TagBox[
      TagBox[GridBox[{
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}],
           HoldForm], "589"},
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}],
           HoldForm], "31"},
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}],
           HoldForm], "187"},
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"1", ",", "1"}], "}"}],
           HoldForm], "4"}
        },
        GridBoxAlignment->{
         "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxDividers->{
         "Columns" -> {False, {True}, False}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{False}}, "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.5599999999999999]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
          "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}],
       OutputFormsDump`HeadedColumn],
      Function[BoxForm`e$, 
       TableForm[
       BoxForm`e$, 
        TableHeadings -> {{{0, 0}, {0, 1}, {1, 0}, {1, 1}}, None}]]]}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["1", "8"], ",", "5.942496739632202`", ",", 
     TagBox[
      TagBox[GridBox[{
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}],
           HoldForm], "630"},
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}],
           HoldForm], "30"},
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}],
           HoldForm], "146"},
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"1", ",", "1"}], "}"}],
           HoldForm], "5"}
        },
        GridBoxAlignment->{
         "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxDividers->{
         "Columns" -> {False, {True}, False}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{False}}, "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.5599999999999999]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
          "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}],
       OutputFormsDump`HeadedColumn],
      Function[BoxForm`e$, 
       TableForm[
       BoxForm`e$, 
        TableHeadings -> {{{0, 0}, {0, 1}, {1, 0}, {1, 1}}, None}]]]}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["1", "4"], ",", "10.50059890468945`", ",", 
     TagBox[
      TagBox[GridBox[{
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}],
           HoldForm], "637"},
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}],
           HoldForm], "10"},
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}],
           HoldForm], "160"},
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"1", ",", "1"}], "}"}],
           HoldForm], "4"}
        },
        GridBoxAlignment->{
         "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxDividers->{
         "Columns" -> {False, {True}, False}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{False}}, "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.5599999999999999]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
          "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}],
       OutputFormsDump`HeadedColumn],
      Function[BoxForm`e$, 
       TableForm[
       BoxForm`e$, 
        TableHeadings -> {{{0, 0}, {0, 1}, {1, 0}, {1, 1}}, None}]]]}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["1", "2"], ",", "19.059516486925208`", ",", 
     TagBox[
      TagBox[GridBox[{
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}],
           HoldForm], "708"},
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}],
           HoldForm], "65"},
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}],
           HoldForm], "10"},
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"1", ",", "1"}], "}"}],
           HoldForm], "28"}
        },
        GridBoxAlignment->{
         "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxDividers->{
         "Columns" -> {False, {True}, False}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{False}}, "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.5599999999999999]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
          "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}],
       OutputFormsDump`HeadedColumn],
      Function[BoxForm`e$, 
       TableForm[
       BoxForm`e$, 
        TableHeadings -> {{{0, 0}, {0, 1}, {1, 0}, {1, 1}}, None}]]]}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "34.54375071682966`", ",", 
     TagBox[
      TagBox[GridBox[{
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}],
           HoldForm], "645"},
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}],
           HoldForm], "7"},
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}],
           HoldForm], "159"}
        },
        GridBoxAlignment->{
         "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxDividers->{
         "Columns" -> {False, {True}, False}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{False}}, "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.5599999999999999]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
          "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}],
       OutputFormsDump`HeadedColumn],
      Function[BoxForm`e$, 
       TableForm[
       BoxForm`e$, TableHeadings -> {{{0, 0}, {0, 1}, {1, 0}}, None}]]]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "67.42312030103885`", ",", 
     TagBox[
      TagBox[GridBox[{
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}],
           HoldForm], "608"},
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}],
           HoldForm], "8"},
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}],
           HoldForm], "195"}
        },
        GridBoxAlignment->{
         "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxDividers->{
         "Columns" -> {False, {True}, False}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{False}}, "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.5599999999999999]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
          "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}],
       OutputFormsDump`HeadedColumn],
      Function[BoxForm`e$, 
       TableForm[
       BoxForm`e$, TableHeadings -> {{{0, 0}, {0, 1}, {1, 0}}, None}]]]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "130.14658278976518`", ",", 
     TagBox[
      TagBox[GridBox[{
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}],
           HoldForm], "637"},
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}],
           HoldForm], "9"},
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}],
           HoldForm], "164"},
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"1", ",", "1"}], "}"}],
           HoldForm], "1"}
        },
        GridBoxAlignment->{
         "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxDividers->{
         "Columns" -> {False, {True}, False}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{False}}, "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.5599999999999999]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
          "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}],
       OutputFormsDump`HeadedColumn],
      Function[BoxForm`e$, 
       TableForm[
       BoxForm`e$, 
        TableHeadings -> {{{0, 0}, {0, 1}, {1, 0}, {1, 1}}, None}]]]}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.54444116320251*^9, 3.54491756891222*^9, 
  3.544918009094528*^9, 3.544918083787485*^9, 3.544918149906999*^9, 
  3.544918904041795*^9}]
}, Open  ]],

Cell["Compare solutions for different beta values", "Text",
 CellChangeTimes->{{3.544385521866496*^9, 3.54438555330997*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"#", ",", 
      RowBox[{"dist", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"soln", "[", "0", "]"}], "[", 
         RowBox[{"[", "2", "]"}], "]"}], ",", 
        RowBox[{
         RowBox[{"soln", "[", "#", "]"}], "[", 
         RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], "}"}], "&"}], ",", 
   "betaList"}], "]"}]], "Input",
 CellChangeTimes->{{3.544385171884546*^9, 3.544385235434811*^9}, {
  3.54438535870544*^9, 3.544385361739018*^9}, {3.544385397003121*^9, 
  3.544385417440734*^9}, {3.544385515932817*^9, 3.544385517331243*^9}, {
  3.544385803293407*^9, 3.54438580533921*^9}, {3.54438664280015*^9, 
  3.544386650468655*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", 
     TagBox[
      TagBox[GridBox[{
         {
          StyleBox["\[Null]",
           ShowStringCharacters->False], 
          TagBox[
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}],
           HoldForm], 
          TagBox[
           RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}],
           HoldForm], 
          TagBox[
           RowBox[{"{", 
            RowBox[{"1", ",", "1"}], "}"}],
           HoldForm]},
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}],
           HoldForm], "623", "0", "0"},
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}],
           HoldForm], "0", "185", "0"},
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"1", ",", "1"}], "}"}],
           HoldForm], "0", "0", "3"}
        },
        GridBoxAlignment->{
         "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxDividers->{
         "Columns" -> {False, True, {False}, False}, "ColumnsIndexed" -> {}, 
          "Rows" -> {False, True, {False}, False}, "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
          "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}],
       {OutputFormsDump`HeadedRows, OutputFormsDump`HeadedColumns}],
      Function[BoxForm`e$, 
       TableForm[
       BoxForm`e$, 
        TableHeadings -> {{{0, 0}, {1, 0}, {1, 1}}, {{0, 0}, {1, 0}, {1, 
         1}}}]]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["1", "16"], ",", 
     TagBox[
      TagBox[GridBox[{
         {
          StyleBox["\[Null]",
           ShowStringCharacters->False], 
          TagBox[
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}],
           HoldForm], 
          TagBox[
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}],
           HoldForm], 
          TagBox[
           RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}],
           HoldForm], 
          TagBox[
           RowBox[{"{", 
            RowBox[{"1", ",", "1"}], "}"}],
           HoldForm]},
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}],
           HoldForm], "586", "30", "7", "0"},
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}],
           HoldForm], "3", "1", "180", "1"},
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"1", ",", "1"}], "}"}],
           HoldForm], "0", "0", "0", "3"}
        },
        GridBoxAlignment->{
         "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxDividers->{
         "Columns" -> {False, True, {False}, False}, "ColumnsIndexed" -> {}, 
          "Rows" -> {False, True, {False}, False}, "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
          "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}],
       {OutputFormsDump`HeadedRows, OutputFormsDump`HeadedColumns}],
      Function[BoxForm`e$, 
       TableForm[
       BoxForm`e$, 
        TableHeadings -> {{{0, 0}, {1, 0}, {1, 1}}, {{0, 0}, {0, 1}, {1, 0}, {
          1, 1}}}]]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["1", "8"], ",", 
     TagBox[
      TagBox[GridBox[{
         {
          StyleBox["\[Null]",
           ShowStringCharacters->False], 
          TagBox[
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}],
           HoldForm], 
          TagBox[
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}],
           HoldForm], 
          TagBox[
           RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}],
           HoldForm], 
          TagBox[
           RowBox[{"{", 
            RowBox[{"1", ",", "1"}], "}"}],
           HoldForm]},
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}],
           HoldForm], "570", "29", "23", "1"},
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}],
           HoldForm], "60", "1", "123", "1"},
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"1", ",", "1"}], "}"}],
           HoldForm], "0", "0", "0", "3"}
        },
        GridBoxAlignment->{
         "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxDividers->{
         "Columns" -> {False, True, {False}, False}, "ColumnsIndexed" -> {}, 
          "Rows" -> {False, True, {False}, False}, "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
          "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}],
       {OutputFormsDump`HeadedRows, OutputFormsDump`HeadedColumns}],
      Function[BoxForm`e$, 
       TableForm[
       BoxForm`e$, 
        TableHeadings -> {{{0, 0}, {1, 0}, {1, 1}}, {{0, 0}, {0, 1}, {1, 0}, {
          1, 1}}}]]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["1", "4"], ",", 
     TagBox[
      TagBox[GridBox[{
         {
          StyleBox["\[Null]",
           ShowStringCharacters->False], 
          TagBox[
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}],
           HoldForm], 
          TagBox[
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}],
           HoldForm], 
          TagBox[
           RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}],
           HoldForm], 
          TagBox[
           RowBox[{"{", 
            RowBox[{"1", ",", "1"}], "}"}],
           HoldForm]},
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}],
           HoldForm], "589", "9", "24", "1"},
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}],
           HoldForm], "48", "1", "136", "0"},
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"1", ",", "1"}], "}"}],
           HoldForm], "0", "0", "0", "3"}
        },
        GridBoxAlignment->{
         "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxDividers->{
         "Columns" -> {False, True, {False}, False}, "ColumnsIndexed" -> {}, 
          "Rows" -> {False, True, {False}, False}, "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
          "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}],
       {OutputFormsDump`HeadedRows, OutputFormsDump`HeadedColumns}],
      Function[BoxForm`e$, 
       TableForm[
       BoxForm`e$, 
        TableHeadings -> {{{0, 0}, {1, 0}, {1, 1}}, {{0, 0}, {0, 1}, {1, 0}, {
          1, 1}}}]]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["1", "2"], ",", 
     TagBox[
      TagBox[GridBox[{
         {
          StyleBox["\[Null]",
           ShowStringCharacters->False], 
          TagBox[
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}],
           HoldForm], 
          TagBox[
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}],
           HoldForm], 
          TagBox[
           RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}],
           HoldForm], 
          TagBox[
           RowBox[{"{", 
            RowBox[{"1", ",", "1"}], "}"}],
           HoldForm]},
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}],
           HoldForm], "531", "54", "10", "28"},
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}],
           HoldForm], "177", "8", "0", "0"},
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"1", ",", "1"}], "}"}],
           HoldForm], "0", "3", "0", "0"}
        },
        GridBoxAlignment->{
         "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxDividers->{
         "Columns" -> {False, True, {False}, False}, "ColumnsIndexed" -> {}, 
          "Rows" -> {False, True, {False}, False}, "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
          "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}],
       {OutputFormsDump`HeadedRows, OutputFormsDump`HeadedColumns}],
      Function[BoxForm`e$, 
       TableForm[
       BoxForm`e$, 
        TableHeadings -> {{{0, 0}, {1, 0}, {1, 1}}, {{0, 0}, {0, 1}, {1, 0}, {
          1, 1}}}]]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", 
     TagBox[
      TagBox[GridBox[{
         {
          StyleBox["\[Null]",
           ShowStringCharacters->False], 
          TagBox[
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}],
           HoldForm], 
          TagBox[
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}],
           HoldForm], 
          TagBox[
           RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}],
           HoldForm]},
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}],
           HoldForm], "460", "4", "159"},
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}],
           HoldForm], "185", "0", "0"},
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"1", ",", "1"}], "}"}],
           HoldForm], "0", "3", "0"}
        },
        GridBoxAlignment->{
         "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxDividers->{
         "Columns" -> {False, True, {False}, False}, "ColumnsIndexed" -> {}, 
          "Rows" -> {False, True, {False}, False}, "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
          "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}],
       {OutputFormsDump`HeadedRows, OutputFormsDump`HeadedColumns}],
      Function[BoxForm`e$, 
       TableForm[
       BoxForm`e$, 
        TableHeadings -> {{{0, 0}, {1, 0}, {1, 1}}, {{0, 0}, {0, 1}, {1, 
         0}}}]]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", 
     TagBox[
      TagBox[GridBox[{
         {
          StyleBox["\[Null]",
           ShowStringCharacters->False], 
          TagBox[
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}],
           HoldForm], 
          TagBox[
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}],
           HoldForm], 
          TagBox[
           RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}],
           HoldForm]},
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}],
           HoldForm], "423", "5", "195"},
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}],
           HoldForm], "185", "0", "0"},
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"1", ",", "1"}], "}"}],
           HoldForm], "0", "3", "0"}
        },
        GridBoxAlignment->{
         "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxDividers->{
         "Columns" -> {False, True, {False}, False}, "ColumnsIndexed" -> {}, 
          "Rows" -> {False, True, {False}, False}, "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
          "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}],
       {OutputFormsDump`HeadedRows, OutputFormsDump`HeadedColumns}],
      Function[BoxForm`e$, 
       TableForm[
       BoxForm`e$, 
        TableHeadings -> {{{0, 0}, {1, 0}, {1, 1}}, {{0, 0}, {0, 1}, {1, 
         0}}}]]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", 
     TagBox[
      TagBox[GridBox[{
         {
          StyleBox["\[Null]",
           ShowStringCharacters->False], 
          TagBox[
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}],
           HoldForm], 
          TagBox[
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}],
           HoldForm], 
          TagBox[
           RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}],
           HoldForm], 
          TagBox[
           RowBox[{"{", 
            RowBox[{"1", ",", "1"}], "}"}],
           HoldForm]},
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}],
           HoldForm], "452", "6", "164", "1"},
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}],
           HoldForm], "185", "0", "0", "0"},
         {
          TagBox[
           RowBox[{"{", 
            RowBox[{"1", ",", "1"}], "}"}],
           HoldForm], "0", "3", "0", "0"}
        },
        GridBoxAlignment->{
         "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxDividers->{
         "Columns" -> {False, True, {False}, False}, "ColumnsIndexed" -> {}, 
          "Rows" -> {False, True, {False}, False}, "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
          "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}],
       {OutputFormsDump`HeadedRows, OutputFormsDump`HeadedColumns}],
      Function[BoxForm`e$, 
       TableForm[
       BoxForm`e$, 
        TableHeadings -> {{{0, 0}, {1, 0}, {1, 1}}, {{0, 0}, {0, 1}, {1, 0}, {
          1, 1}}}]]]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.544385419715523*^9, 3.544385518721488*^9, 
  3.544385806970245*^9, 3.544386652223967*^9, 3.544439584629273*^9, 
  3.544440317174637*^9, 3.5444413760035133`*^9, 3.544917569065002*^9, 
  3.544918009228554*^9, 3.544918904519593*^9}]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Try different methods (logistic)", "Subsection",
 CellChangeTimes->{{3.544308961231416*^9, 3.544308965614366*^9}, {
  3.544309368343341*^9, 3.544309371406606*^9}}],

Cell["\<\
Values for beta = 1.0, looks like NelderMead is fastest, although several \
methods find minimum.  It seems that minimum occurs for assumption that \
points are \"far away\" from the hyperplane in most methods.\
\>", "Text",
 CellChangeTimes->{{3.544052312053975*^9, 3.544052322650424*^9}, {
  3.544206120162146*^9, 3.544206124833916*^9}, {3.544285711506353*^9, 
  3.544285723440838*^9}, {3.544309767450357*^9, 3.544309771329819*^9}, {
  3.544310852689861*^9, 3.544310866719192*^9}, {3.544313673105018*^9, 
  3.544313723605607*^9}, {3.544313801962239*^9, 3.544313818296789*^9}, {
  3.544442559844864*^9, 3.544442560580418*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"useStep", "=", "False"}], "}"}], ",", 
    RowBox[{
     RowBox[{"soll", "[", "\"\<NelderMead\>\"", "]"}], "=", 
     RowBox[{"minP", "[", 
      RowBox[{"1.0", ",", 
       RowBox[{"Method", "\[Rule]", "\"\<NelderMead\>\""}]}], "]"}]}]}], 
   "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.543871186600027*^9, 3.54387119260325*^9}, {
   3.543871280095396*^9, 3.543871348732301*^9}, {3.543871381538703*^9, 
   3.543871469734889*^9}, {3.543871520564796*^9, 3.543871530812133*^9}, {
   3.543871612393056*^9, 3.543871616311381*^9}, {3.543871652973905*^9, 
   3.543871672667427*^9}, {3.543871995059092*^9, 3.543871995218156*^9}, {
   3.543949218261597*^9, 3.543949225930965*^9}, {3.543949321432448*^9, 
   3.543949373067781*^9}, {3.543949630545298*^9, 3.543949679278877*^9}, {
   3.543949730947589*^9, 3.543949759633005*^9}, 3.543949871667687*^9, {
   3.543950237866308*^9, 3.543950243201226*^9}, {3.543950344763688*^9, 
   3.543950360817996*^9}, {3.54395052113616*^9, 3.54395060325904*^9}, {
   3.54395125002737*^9, 3.543951269919314*^9}, {3.543955534491437*^9, 
   3.54395555772196*^9}, {3.543955859913995*^9, 3.543955862368361*^9}, {
   3.543955992697519*^9, 3.543955999025414*^9}, {3.543956510596297*^9, 
   3.543956538633755*^9}, {3.543956581362532*^9, 3.54395660883332*^9}, {
   3.544283788718416*^9, 3.544283790804611*^9}, {3.544286380274002*^9, 
   3.544286393352107*^9}, {3.544286455022481*^9, 3.544286457452221*^9}, 
   3.5443096787325*^9, {3.5444414540946407`*^9, 3.544441503694785*^9}, {
   3.544442226496357*^9, 3.5444422292835827`*^9}, {3.544467304720166*^9, 
   3.544467320574771*^9}, {3.544469546032007*^9, 3.544469549047608*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"36.008527`", ",", 
   RowBox[{"{", 
    RowBox[{"16.356293877779727`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "7.211340194595484`"}], ",", 
         RowBox[{"-", "87.78973656551017`"}], ",", 
         RowBox[{"-", "74.87091160365964`"}], ",", "17.599397457334977`", ",",
          "13.998337395950044`", ",", "12.647052018586534`", ",", 
         RowBox[{"-", "2.6457286298155833`"}], ",", "8.183022993146308`", ",", 
         RowBox[{"-", "71.80160457946424`"}], ",", 
         RowBox[{"-", "58.23854354389474`"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"6.653297065287375`*^18", ",", "2.1542087877863043`*^18", ",", 
         RowBox[{"-", "1.2981686008322752`*^18"}], ",", 
         "1.8702107253280228`*^18", ",", 
         RowBox[{"-", "1.6417855813485496`*^18"}], ",", 
         RowBox[{"-", "1.1718709139333553`*^18"}], ",", 
         RowBox[{"-", "3.4978086058419315`*^17"}], ",", 
         "1.68806941558277`*^17", ",", 
         RowBox[{"-", "1.0209807574926291`*^18"}], ",", 
         RowBox[{"-", "3.77123298651307`*^19"}]}], "}"}]}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.544286563430699*^9, 3.544286951714958*^9, 3.544309080630174*^9, 
   3.544309805006301*^9, 3.544310657194513*^9, 3.544311243077485*^9, {
   3.544441472136299*^9, 3.544441483043372*^9}, 3.544441521569489*^9, 
   3.5444420823661413`*^9, 3.5444426030237083`*^9, 3.544469585352428*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rewardFunction", "[", 
  RowBox[{"1.0", ",", 
   RowBox[{
    RowBox[{"soll", "[", "\"\<NelderMead\>\"", "]"}], "[", 
    RowBox[{"[", "2", "]"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.544470101941409*^9, 3.54447013739276*^9}, {
  3.544471128620721*^9, 3.54447113463416*^9}}],

Cell[BoxData["25.681116153737158`"], "Output",
 CellChangeTimes->{{3.544471123776165*^9, 3.544471135744158*^9}, 
   3.544471478035269*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"useStep", "=", "False"}], "}"}], ",", 
    RowBox[{
     RowBox[{"soll", "[", "\"\<DifferentialEvolution\>\"", "]"}], "=", 
     RowBox[{"minP", "[", 
      RowBox[{"1.0", ",", 
       RowBox[{"Method", "\[Rule]", "\"\<DifferentialEvolution\>\""}]}], 
      "]"}]}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.543871186600027*^9, 3.54387119260325*^9}, {
   3.543871280095396*^9, 3.543871348732301*^9}, {3.543871381538703*^9, 
   3.543871469734889*^9}, {3.543871520564796*^9, 3.543871530812133*^9}, {
   3.543871612393056*^9, 3.543871616311381*^9}, {3.543871652973905*^9, 
   3.543871672667427*^9}, {3.543871995059092*^9, 3.543871995218156*^9}, {
   3.543949218261597*^9, 3.543949225930965*^9}, {3.543949321432448*^9, 
   3.543949373067781*^9}, {3.543949630545298*^9, 3.543949679278877*^9}, {
   3.543949730947589*^9, 3.543949759633005*^9}, 3.543949871667687*^9, {
   3.543950237866308*^9, 3.543950243201226*^9}, {3.543950344763688*^9, 
   3.543950360817996*^9}, {3.54395052113616*^9, 3.54395060325904*^9}, {
   3.54395125002737*^9, 3.543951269919314*^9}, {3.543955534491437*^9, 
   3.54395555772196*^9}, {3.543955859913995*^9, 3.543955862368361*^9}, {
   3.543955992697519*^9, 3.543955999025414*^9}, {3.543956510596297*^9, 
   3.543956538633755*^9}, {3.543956581362532*^9, 3.54395660883332*^9}, {
   3.544283788718416*^9, 3.544283790804611*^9}, {3.544286380274002*^9, 
   3.544286393352107*^9}, {3.544286455022481*^9, 3.544286457452221*^9}, 
   3.544286521370533*^9, 3.544309680948317*^9, {3.544442094056748*^9, 
   3.5444420976624947`*^9}, {3.544442234109068*^9, 3.544442236435512*^9}, 
   3.544467327925989*^9, {3.544469533665*^9, 3.544469542328399*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"124.15512600000001`", ",", 
   RowBox[{"{", 
    RowBox[{"16.356293877779727`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "894.7377577201938`"}], ",", 
         RowBox[{"-", "10892.398550431559`"}], ",", 
         RowBox[{"-", "9289.512017729305`"}], ",", "2183.622602768242`", ",", 
         "1736.8256873542184`", ",", "1569.16669454085`", ",", 
         RowBox[{"-", "328.26537421773133`"}], ",", "1015.2980464209506`", 
         ",", 
         RowBox[{"-", "8908.691604754484`"}], ",", 
         RowBox[{"-", "7225.872269489925`"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"3.864806013176412`*^10", ",", "1.2513493583864653`*^10", ",", 
         RowBox[{"-", "7.540878373418313`*^9"}], ",", 
         "1.086378963891524`*^10", ",", 
         RowBox[{"-", "9.536899772722221`*^9"}], ",", 
         RowBox[{"-", "6.807232229144004`*^9"}], ",", 
         RowBox[{"-", "2.031827444864437`*^9"}], ",", "9.805756461747872`*^8",
          ",", 
         RowBox[{"-", "5.930730567885985`*^9"}], ",", 
         RowBox[{"-", "2.1906558336503067`*^11"}]}], "}"}]}], "}"}]}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.544286589187988*^9, 3.544287630065299*^9, 
  3.544309091657021*^9, 3.544309929285037*^9, 3.544310778545254*^9, 
  3.544311366205937*^9, 3.5444421938770037`*^9, 3.544469700331603*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rewardFunction", "[", 
  RowBox[{"1.0", ",", 
   RowBox[{
    RowBox[{"soll", "[", "\"\<DifferentialEvolution\>\"", "]"}], "[", 
    RowBox[{"[", "2", "]"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.544470101941409*^9, 3.54447013739276*^9}, {
  3.544471128620721*^9, 3.544471160442504*^9}}],

Cell[BoxData["25.681116153737158`"], "Output",
 CellChangeTimes->{3.544471162899666*^9, 3.544471484770929*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"useStep", "=", "False"}], "}"}], ",", 
    RowBox[{
     RowBox[{"soll", "[", "\"\<SimulatedAnnealing\>\"", "]"}], "=", 
     RowBox[{"minP", "[", 
      RowBox[{"1.0", ",", 
       RowBox[{"Method", "\[Rule]", "\"\<SimulatedAnnealing\>\""}]}], 
      "]"}]}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.543871186600027*^9, 3.54387119260325*^9}, {
   3.543871280095396*^9, 3.543871348732301*^9}, {3.543871381538703*^9, 
   3.543871469734889*^9}, {3.543871520564796*^9, 3.543871530812133*^9}, {
   3.543871612393056*^9, 3.543871616311381*^9}, {3.543871652973905*^9, 
   3.543871672667427*^9}, {3.543871995059092*^9, 3.543871995218156*^9}, {
   3.543949218261597*^9, 3.543949225930965*^9}, {3.543949321432448*^9, 
   3.543949373067781*^9}, {3.543949630545298*^9, 3.543949679278877*^9}, {
   3.543949730947589*^9, 3.543949759633005*^9}, 3.543949871667687*^9, {
   3.543950237866308*^9, 3.543950243201226*^9}, {3.543950344763688*^9, 
   3.543950360817996*^9}, {3.54395052113616*^9, 3.54395060325904*^9}, {
   3.54395125002737*^9, 3.543951269919314*^9}, {3.543955534491437*^9, 
   3.54395555772196*^9}, {3.543955859913995*^9, 3.543955862368361*^9}, {
   3.543955992697519*^9, 3.543955999025414*^9}, {3.543956510596297*^9, 
   3.543956538633755*^9}, {3.543956581362532*^9, 3.54395660883332*^9}, {
   3.544283788718416*^9, 3.544283790804611*^9}, {3.544286380274002*^9, 
   3.544286393352107*^9}, {3.544286455022481*^9, 3.544286457452221*^9}, 
   3.544286533145898*^9, 3.544286630556627*^9, 3.544309682676946*^9, {
   3.544442105462574*^9, 3.544442109043648*^9}, {3.544442239325658*^9, 
   3.5444422411799583`*^9}, 3.544467332758294*^9, {3.544469526705481*^9, 
   3.544469529304849*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"37.74326200000001`", ",", 
   RowBox[{"{", 
    RowBox[{"16.395790476154932`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "300.4132184082535`"}], ",", "604.133346846323`", ",", 
         RowBox[{"-", "611.7978087762775`"}], ",", "181.83272422440797`", ",",
          "154.48649266618312`", ",", "102.09285810775943`", ",", 
         RowBox[{"-", "21.457133928227012`"}], ",", "78.5009854763022`", ",", 
         "871.3699716900284`", ",", 
         RowBox[{"-", "206.96440301156645`"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1.208657256613724`*^6", ",", "391339.7938548775`", ",", 
         RowBox[{"-", "235829.04325601112`"}], ",", "339747.87640509097`", 
         ",", 
         RowBox[{"-", "298251.5240295272`"}], ",", 
         RowBox[{"-", "212885.46920377685`"}], ",", 
         RowBox[{"-", "63542.201968250934`"}], ",", "30665.954956044898`", 
         ",", 
         RowBox[{"-", "185474.32662130837`"}], ",", 
         RowBox[{"-", "6.850931295402231`*^6"}]}], "}"}]}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.544286589426818*^9, 3.544286641052566*^9, 
  3.544287743184302*^9, 3.544309101130609*^9, 3.544311183576157*^9, 
  3.544311425809086*^9, 3.544311512868629*^9, 3.5444422112589493`*^9, 
  3.544469736442585*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rewardFunction", "[", 
  RowBox[{"1.0", ",", 
   RowBox[{
    RowBox[{"soll", "[", "\"\<SimulatedAnnealing\>\"", "]"}], "[", 
    RowBox[{"[", "2", "]"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.544470101941409*^9, 3.54447013739276*^9}, {
   3.544471128620721*^9, 3.544471160442504*^9}, 3.544471362658313*^9}],

Cell[BoxData["26.753465932902547`"], "Output",
 CellChangeTimes->{3.54447147190233*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"useStep", "=", "False"}], "}"}], ",", 
    RowBox[{
     RowBox[{"soll", "[", "\"\<RandomSearch\>\"", "]"}], "=", 
     RowBox[{"minP", "[", 
      RowBox[{"1.0", ",", 
       RowBox[{"Method", "\[Rule]", "\"\<RandomSearch\>\""}]}], "]"}]}]}], 
   "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.543871186600027*^9, 3.54387119260325*^9}, {
   3.543871280095396*^9, 3.543871348732301*^9}, {3.543871381538703*^9, 
   3.543871469734889*^9}, {3.543871520564796*^9, 3.543871530812133*^9}, {
   3.543871612393056*^9, 3.543871616311381*^9}, {3.543871652973905*^9, 
   3.543871672667427*^9}, {3.543871995059092*^9, 3.543871995218156*^9}, {
   3.543949218261597*^9, 3.543949225930965*^9}, {3.543949321432448*^9, 
   3.543949373067781*^9}, {3.543949630545298*^9, 3.543949679278877*^9}, {
   3.543949730947589*^9, 3.543949759633005*^9}, 3.543949871667687*^9, {
   3.543950237866308*^9, 3.543950243201226*^9}, {3.543950344763688*^9, 
   3.543950360817996*^9}, {3.54395052113616*^9, 3.54395060325904*^9}, {
   3.54395125002737*^9, 3.543951269919314*^9}, {3.543955534491437*^9, 
   3.54395555772196*^9}, {3.543955859913995*^9, 3.543955862368361*^9}, {
   3.543955992697519*^9, 3.543955999025414*^9}, {3.543956510596297*^9, 
   3.543956538633755*^9}, {3.543956581362532*^9, 3.54395660883332*^9}, {
   3.544283788718416*^9, 3.544283790804611*^9}, {3.544286380274002*^9, 
   3.544286393352107*^9}, {3.544286455022481*^9, 3.544286457452221*^9}, 
   3.544286546705133*^9, 3.544309684539936*^9, {3.5444421303899117`*^9, 
   3.54444213358759*^9}, {3.544442244589446*^9, 3.544442246467742*^9}, 
   3.544467338150757*^9, {3.544469507961934*^9, 3.544469518298304*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"460.24803199999997`", ",", 
   RowBox[{"{", 
    RowBox[{"16.356293877779724`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "449171.0721833984`"}], ",", 
         RowBox[{"-", "5.468139249386972`*^6"}], ",", 
         RowBox[{"-", "4.66346731941821`*^6"}], ",", "1.0962096354130304`*^6",
          ",", "871911.2329916861`", ",", "787744.0297179215`", ",", 
         RowBox[{"-", "164793.89279351287`"}], ",", "509694.0784917329`", ",", 
         RowBox[{"-", "4.472290056828752`*^6"}], ",", 
         RowBox[{"-", "3.627490940016172`*^6"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"181.92068253902093`", ",", "58.90239344706213`", ",", 
         RowBox[{"-", "35.495745007675566`"}], ",", "51.13705431752318`", ",", 
         RowBox[{"-", "44.89123991693055`"}], ",", 
         RowBox[{"-", "32.0423929266775`"}], ",", 
         RowBox[{"-", "9.5640354422482`"}], ",", "4.615677153267113`", ",", 
         RowBox[{"-", "27.91660319550941`"}], ",", 
         RowBox[{"-", "1031.1658615412425`"}]}], "}"}]}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.544286615172856*^9, 3.544288109421205*^9, 
  3.544309161526895*^9, 3.544313363426142*^9, 3.544442348465538*^9, 
  3.544470198301038*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rewardFunction", "[", 
  RowBox[{"1.0", ",", 
   RowBox[{
    RowBox[{"soll", "[", "\"\<RandomSearch\>\"", "]"}], "[", 
    RowBox[{"[", "2", "]"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.544470101941409*^9, 3.54447013739276*^9}, {
   3.544471128620721*^9, 3.544471160442504*^9}, 3.54447134226671*^9}],

Cell[BoxData["25.681116153737158`"], "Output",
 CellChangeTimes->{3.544471468859688*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"useStep", "=", "False"}], ",", 
      RowBox[{"globalMinimum", "=", "False"}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"soll", "[", "\"\<ConjugateGradient\>\"", "]"}], "=", 
     RowBox[{"minP", "[", 
      RowBox[{"1.0", ",", 
       RowBox[{"Method", "\[Rule]", "\"\<ConjugateGradient\>\""}]}], 
      "]"}]}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.543871186600027*^9, 3.54387119260325*^9}, {
   3.543871280095396*^9, 3.543871348732301*^9}, {3.543871381538703*^9, 
   3.543871469734889*^9}, {3.543871520564796*^9, 3.543871530812133*^9}, {
   3.543871612393056*^9, 3.543871616311381*^9}, {3.543871652973905*^9, 
   3.543871672667427*^9}, {3.543871995059092*^9, 3.543871995218156*^9}, {
   3.543949218261597*^9, 3.543949225930965*^9}, {3.543949321432448*^9, 
   3.543949373067781*^9}, {3.543949630545298*^9, 3.543949679278877*^9}, {
   3.543949730947589*^9, 3.543949759633005*^9}, 3.543949871667687*^9, {
   3.543950237866308*^9, 3.543950243201226*^9}, {3.543950344763688*^9, 
   3.543950360817996*^9}, {3.54395052113616*^9, 3.54395060325904*^9}, {
   3.54395125002737*^9, 3.543951269919314*^9}, {3.543955534491437*^9, 
   3.54395555772196*^9}, {3.543955859913995*^9, 3.543955862368361*^9}, {
   3.543955992697519*^9, 3.543955999025414*^9}, {3.543956510596297*^9, 
   3.543956538633755*^9}, {3.543956581362532*^9, 3.54395660883332*^9}, {
   3.544283788718416*^9, 3.544283790804611*^9}, {3.544286380274002*^9, 
   3.544286393352107*^9}, {3.544286455022481*^9, 3.544286457452221*^9}, 
   3.544286546705133*^9, {3.544308981488115*^9, 3.544309002381021*^9}, {
   3.5444421415498743`*^9, 3.544442144331594*^9}, {3.544442249684146*^9, 
   3.544442260740018*^9}, {3.5444422915652122`*^9, 3.544442294836607*^9}, 
   3.544467344718458*^9, {3.544469502002991*^9, 3.544469504994262*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"FindMinimum", "::", "\<\"cvmit\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"\\!\\(\\*StyleBox[\\\"\\\\\\\"Failed to converge to the \
requested accuracy or precision within \\\\\\\"\\\", \\\"MT\\\"]\\)\[NoBreak]\
\\!\\(\\*StyleBox[\\!\\(100\\), \
\\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\" \
iterations.\\\\\\\"\\\", \\\"MT\\\"]\\) \\!\\(\\*ButtonBox[\\\"\
\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/FindMinimum/cvmit\\\", ButtonNote -> \
\\\"FindMinimum::cvmit\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.544309161869667*^9, 3.544313370246946*^9, 
  3.544442511717819*^9, 3.544470205474635*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"FindMinimum", "::", "\<\"cvmit\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"\\!\\(\\*StyleBox[\\\"\\\\\\\"Failed to converge to the \
requested accuracy or precision within \\\\\\\"\\\", \\\"MT\\\"]\\)\[NoBreak]\
\\!\\(\\*StyleBox[\\!\\(100\\), \
\\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\" \
iterations.\\\\\\\"\\\", \\\"MT\\\"]\\) \\!\\(\\*ButtonBox[\\\"\
\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/FindMinimum/cvmit\\\", ButtonNote -> \
\\\"FindMinimum::cvmit\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.544309161869667*^9, 3.544313370246946*^9, 
  3.544442511717819*^9, 3.544470205946004*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7.4188719999999675`", ",", 
   RowBox[{"{", 
    RowBox[{"16.493440966378714`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "0.1173274240232999`"}], ",", 
         RowBox[{"-", "0.724784394822841`"}], ",", 
         RowBox[{"-", "0.4440266075374293`"}], ",", "0.05822388639639961`", 
         ",", "0.08651665095584028`", ",", "0.10386425559965952`", ",", 
         RowBox[{"-", "0.020948318619957287`"}], ",", "0.06537118611455815`", 
         ",", 
         RowBox[{"-", "0.6981601337729721`"}], ",", "0.11835569459287275`"}], 
        "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0.7464170810861995`", ",", "4.356278268219319`", ",", 
         RowBox[{"-", "0.6449049142553437`"}], ",", "1.2698974161653367`", 
         ",", 
         RowBox[{"-", "1.212678699054957`"}], ",", 
         RowBox[{"-", "0.6923575447998583`"}], ",", 
         RowBox[{"-", "0.19104927369894983`"}], ",", "0.1576961550259397`", 
         ",", 
         RowBox[{"-", "1.7391278682704086`"}], ",", 
         RowBox[{"-", "3.628258272635406`"}]}], "}"}]}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.544309161935644*^9, 3.544313370378034*^9, 
  3.544442512806735*^9, 3.544470205988773*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rewardFunction", "[", 
  RowBox[{"1.0", ",", 
   RowBox[{
    RowBox[{"soll", "[", "\"\<ConjugateGradient\>\"", "]"}], "[", 
    RowBox[{"[", "2", "]"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.544470101941409*^9, 3.54447013739276*^9}, {
   3.544471128620721*^9, 3.544471160442504*^9}, 3.544471330083255*^9}],

Cell[BoxData["26.35746144170673`"], "Output",
 CellChangeTimes->{3.544471463323774*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"useStep", "=", "False"}], ",", 
      RowBox[{"globalMinimum", "=", "False"}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"soll", "[", "\"\<PrincipalAxis\>\"", "]"}], "=", 
     RowBox[{"minP", "[", 
      RowBox[{"1.0", ",", 
       RowBox[{"Method", "\[Rule]", "\"\<PrincipalAxis\>\""}]}], "]"}]}]}], 
   "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.543871186600027*^9, 3.54387119260325*^9}, {
   3.543871280095396*^9, 3.543871348732301*^9}, {3.543871381538703*^9, 
   3.543871469734889*^9}, {3.543871520564796*^9, 3.543871530812133*^9}, {
   3.543871612393056*^9, 3.543871616311381*^9}, {3.543871652973905*^9, 
   3.543871672667427*^9}, {3.543871995059092*^9, 3.543871995218156*^9}, {
   3.543949218261597*^9, 3.543949225930965*^9}, {3.543949321432448*^9, 
   3.543949373067781*^9}, {3.543949630545298*^9, 3.543949679278877*^9}, {
   3.543949730947589*^9, 3.543949759633005*^9}, 3.543949871667687*^9, {
   3.543950237866308*^9, 3.543950243201226*^9}, {3.543950344763688*^9, 
   3.543950360817996*^9}, {3.54395052113616*^9, 3.54395060325904*^9}, {
   3.54395125002737*^9, 3.543951269919314*^9}, {3.543955534491437*^9, 
   3.54395555772196*^9}, {3.543955859913995*^9, 3.543955862368361*^9}, {
   3.543955992697519*^9, 3.543955999025414*^9}, {3.543956510596297*^9, 
   3.543956538633755*^9}, {3.543956581362532*^9, 3.54395660883332*^9}, {
   3.544283788718416*^9, 3.544283790804611*^9}, {3.544286380274002*^9, 
   3.544286393352107*^9}, {3.544286455022481*^9, 3.544286457452221*^9}, 
   3.544286546705133*^9, {3.544308981488115*^9, 3.544309023884123*^9}, {
   3.544442155598072*^9, 3.544442159236096*^9}, {3.544442283396757*^9, 
   3.544442306586224*^9}, 3.544467350029086*^9, {3.544469474180334*^9, 
   3.544469491659443*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"FindMinimum", "::", "\<\"lsbrak\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"\\!\\(\\*StyleBox[\\\"\\\\\\\"Unable to bracket a minimum \
along the direction \\\\\\\"\\\", \
\\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\!\\({0, 0.12550865415375473`, 0, \
0, 0, 0, 0, 0, 0, 0}\\), \\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\
\" from the point \\\\\\\"\\\", \\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\!\
\\({\\(\\(-0.06563686017330356`\\)\\), \\(\\(-0.12550865415375473`\\)\\), \
0.1901308758732626`, \\(\\(\[LeftSkeleton] 4 \[RightSkeleton]\\)\\), \
\\(\\(-0.3999405286388935`\\)\\), 0.40978328093989036`, 0.39338889979834435`}\
\\), \\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\".\\\\\\\"\\\", \
\\\"MT\\\"]\\) \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/FindMinimum\\\", ButtonNote -> \
\\\"FindMinimum::lsbrak\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.544309162203753*^9, 3.544313372288804*^9, 
  3.54447020755652*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"FindMinimum", "::", "\<\"lsbrak\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"\\!\\(\\*StyleBox[\\\"\\\\\\\"Unable to bracket a minimum \
along the direction \\\\\\\"\\\", \
\\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\!\\({0, 0.0583414738710753`, 0, \
0, 0, 0, 0, 0, 0, 0}\\), \\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\
\" from the point \\\\\\\"\\\", \\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\!\
\\({0.602164570687847`, \\(\\(-0.0583414738710753`\\)\\), \
0.46632136103184874`, \\(\\(\[LeftSkeleton] 4 \[RightSkeleton]\\)\\), \
\\(\\(-0.2600226969467423`\\)\\), 0.17432140426394016`, 0.14905154772989582`}\
\\), \\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\".\\\\\\\"\\\", \
\\\"MT\\\"]\\) \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/FindMinimum\\\", ButtonNote -> \
\\\"FindMinimum::lsbrak\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.544309162203753*^9, 3.544313372288804*^9, 
  3.54447024761014*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"42.958470000000034`", ",", 
   RowBox[{"{", 
    RowBox[{"16.36373992183409`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "1.1301468558292542`"}], ",", 
         RowBox[{"-", "17.206033409743164`"}], ",", 
         RowBox[{"-", "14.418671021565748`"}], ",", "3.3817615989761283`", 
         ",", "2.699165538169824`", ",", "2.4096476165494307`", ",", 
         RowBox[{"-", "0.5095905911222525`"}], ",", "1.5735051179804027`", 
         ",", 
         RowBox[{"-", "13.475166092714517`"}], ",", 
         RowBox[{"-", "12.621748453470031`"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1.2022918896650188`*^13", ",", "3.889599833466091`*^12", ",", 
         RowBox[{"-", "2.342738126136884`*^12"}], ",", 
         "3.377436805077646`*^12", ",", 
         RowBox[{"-", "2.9661053017701055`*^12"}], ",", 
         RowBox[{"-", "2.1175321705216714`*^12"}], ",", 
         RowBox[{"-", "6.319840721180125`*^11"}], ",", 
         "3.04912032654478`*^11", ",", 
         RowBox[{"-", "1.844135049433768`*^12"}], ",", 
         RowBox[{"-", "6.814470540967495`*^13"}]}], "}"}]}], "}"}]}], "}"}]}],
   "}"}]], "Output",
 CellChangeTimes->{3.544309162558283*^9, 3.544313374429566*^9, 
  3.544470249394811*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rewardFunction", "[", 
  RowBox[{"1.0", ",", 
   RowBox[{
    RowBox[{"soll", "[", "\"\<PrincipalAxis\>\"", "]"}], "[", 
    RowBox[{"[", "2", "]"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.544470101941409*^9, 3.54447013739276*^9}, {
  3.544471128620721*^9, 3.544471160442504*^9}, {3.544471307404651*^9, 
  3.544471309865966*^9}}],

Cell[BoxData["25.677859608860555`"], "Output",
 CellChangeTimes->{3.544471459795944*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"useStep", "=", "False"}], ",", 
      RowBox[{"globalMinimum", "=", "False"}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"soll", "[", "\"\<Newton\>\"", "]"}], "=", 
     RowBox[{"minP", "[", 
      RowBox[{"1.0", ",", 
       RowBox[{"Method", "\[Rule]", "\"\<Newton\>\""}]}], "]"}]}]}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.543871186600027*^9, 3.54387119260325*^9}, {
   3.543871280095396*^9, 3.543871348732301*^9}, {3.543871381538703*^9, 
   3.543871469734889*^9}, {3.543871520564796*^9, 3.543871530812133*^9}, {
   3.543871612393056*^9, 3.543871616311381*^9}, {3.543871652973905*^9, 
   3.543871672667427*^9}, {3.543871995059092*^9, 3.543871995218156*^9}, {
   3.543949218261597*^9, 3.543949225930965*^9}, {3.543949321432448*^9, 
   3.543949373067781*^9}, {3.543949630545298*^9, 3.543949679278877*^9}, {
   3.543949730947589*^9, 3.543949759633005*^9}, 3.543949871667687*^9, {
   3.543950237866308*^9, 3.543950243201226*^9}, {3.543950344763688*^9, 
   3.543950360817996*^9}, {3.54395052113616*^9, 3.54395060325904*^9}, {
   3.54395125002737*^9, 3.543951269919314*^9}, {3.543955534491437*^9, 
   3.54395555772196*^9}, {3.543955859913995*^9, 3.543955862368361*^9}, {
   3.543955992697519*^9, 3.543955999025414*^9}, {3.543956510596297*^9, 
   3.543956538633755*^9}, {3.543956581362532*^9, 3.54395660883332*^9}, {
   3.544283788718416*^9, 3.544283790804611*^9}, {3.544286380274002*^9, 
   3.544286393352107*^9}, {3.544286455022481*^9, 3.544286457452221*^9}, 
   3.544286546705133*^9, {3.544308981488115*^9, 3.544309002381021*^9}, {
   3.544309053131146*^9, 3.544309058537931*^9}, {3.544442323491729*^9, 
   3.54444232653594*^9}, 3.544467356716648*^9, {3.544467438281415*^9, 
   3.544467444216632*^9}, {3.544469465364196*^9, 3.544469469452007*^9}, {
   3.544471274949572*^9, 3.544471300475236*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"FindMinimum", "::", "\<\"lstol\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"\\!\\(\\*StyleBox[\\\"\\\\\\\"The line search decreased \
the step size to within tolerance specified by AccuracyGoal and PrecisionGoal \
but was unable to find a sufficient decrease in the function.  You may need \
more than \\\\\\\"\\\", \
\\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\!\\(MachinePrecision\\), \\\"MT\\\
\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\" digits of working precision to \
meet these tolerances.\\\\\\\"\\\", \\\"MT\\\"]\\) \\!\\(\\*ButtonBox[\\\"\
\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/FindMinimum/lstol\\\", ButtonNote -> \
\\\"FindMinimum::lstol\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.544309164318407*^9, 3.544313394502238*^9, 
  3.544470269195563*^9, 3.544471307075887*^9, 3.544471448651922*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"23.90636499999995`", ",", 
   RowBox[{"{", 
    RowBox[{"16.356293877779727`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "0.000921532375963405`"}], ",", 
         RowBox[{"-", "0.0112185966819242`"}], ",", 
         RowBox[{"-", "0.009567707473008991`"}], ",", 
         "0.0022490160858082207`", ",", "0.001788838890813436`", ",", 
         "0.0016161589354709582`", ",", 
         RowBox[{"-", "0.00033809602733309176`"}], ",", 
         "0.0010457034471366131`", ",", 
         RowBox[{"-", "0.009175482457593882`"}], ",", 
         RowBox[{"-", "0.007442269183742023`"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0.4874050226733351`", ",", "0.15781230377512098`", ",", 
         RowBox[{"-", "0.09510080641569195`"}], ",", "0.13700727343949515`", 
         ",", 
         RowBox[{"-", "0.12027338176023997`"}], ",", 
         RowBox[{"-", "0.08584853025206439`"}], ",", 
         RowBox[{"-", "0.025624128214800944`"}], ",", "0.012366401498453581`",
          ",", 
         RowBox[{"-", "0.07479464839484483`"}], ",", 
         RowBox[{"-", "2.762717316592727`"}]}], "}"}]}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.544309164477827*^9, 3.544313396590362*^9, 
  3.544470273432347*^9, 3.544471419674802*^9, 3.544471452716916*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rewardFunction", "[", 
  RowBox[{"1.0", ",", 
   RowBox[{
    RowBox[{"soll", "[", "\"\<Newton\>\"", "]"}], "[", 
    RowBox[{"[", "2", "]"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.544470101941409*^9, 3.54447013739276*^9}, {
   3.544471128620721*^9, 3.544471160442504*^9}, 3.544471241895293*^9}],

Cell[BoxData["25.681116153737158`"], "Output",
 CellChangeTimes->{3.544471244439549*^9, 3.54447145656448*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"useStep", "=", "False"}], ",", 
      RowBox[{"globalMinimum", "=", "False"}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"soll", "[", "\"\<QuasiNewton\>\"", "]"}], "=", 
     RowBox[{"minP", "[", 
      RowBox[{"1.0", ",", 
       RowBox[{"Method", "\[Rule]", "\"\<QuasiNewton\>\""}]}], "]"}]}]}], 
   "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.543871186600027*^9, 3.54387119260325*^9}, {
   3.543871280095396*^9, 3.543871348732301*^9}, {3.543871381538703*^9, 
   3.543871469734889*^9}, {3.543871520564796*^9, 3.543871530812133*^9}, {
   3.543871612393056*^9, 3.543871616311381*^9}, {3.543871652973905*^9, 
   3.543871672667427*^9}, {3.543871995059092*^9, 3.543871995218156*^9}, {
   3.543949218261597*^9, 3.543949225930965*^9}, {3.543949321432448*^9, 
   3.543949373067781*^9}, {3.543949630545298*^9, 3.543949679278877*^9}, {
   3.543949730947589*^9, 3.543949759633005*^9}, 3.543949871667687*^9, {
   3.543950237866308*^9, 3.543950243201226*^9}, {3.543950344763688*^9, 
   3.543950360817996*^9}, {3.54395052113616*^9, 3.54395060325904*^9}, {
   3.54395125002737*^9, 3.543951269919314*^9}, {3.543955534491437*^9, 
   3.54395555772196*^9}, {3.543955859913995*^9, 3.543955862368361*^9}, {
   3.543955992697519*^9, 3.543955999025414*^9}, {3.543956510596297*^9, 
   3.543956538633755*^9}, {3.543956581362532*^9, 3.54395660883332*^9}, {
   3.544283788718416*^9, 3.544283790804611*^9}, {3.544286380274002*^9, 
   3.544286393352107*^9}, {3.544286455022481*^9, 3.544286457452221*^9}, 
   3.544286546705133*^9, {3.544308981488115*^9, 3.544309002381021*^9}, {
   3.544309053131146*^9, 3.544309058537931*^9}, {3.544309105448899*^9, 
   3.544309107056691*^9}, {3.544442337662065*^9, 3.544442341651642*^9}, 
   3.544467361188885*^9, {3.54446742509011*^9, 3.544467427857808*^9}, {
   3.544469462340654*^9, 3.544469463300476*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"FindMinimum", "::", "\<\"lstol\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"\\!\\(\\*StyleBox[\\\"\\\\\\\"The line search decreased \
the step size to within tolerance specified by AccuracyGoal and PrecisionGoal \
but was unable to find a sufficient decrease in the function.  You may need \
more than \\\\\\\"\\\", \
\\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\!\\(MachinePrecision\\), \\\"MT\\\
\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\" digits of working precision to \
meet these tolerances.\\\\\\\"\\\", \\\"MT\\\"]\\) \\!\\(\\*ButtonBox[\\\"\
\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/FindMinimum/lstol\\\", ButtonNote -> \
\\\"FindMinimum::lstol\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.544309178928197*^9, 3.544313400950732*^9, 
  3.544470277281734*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"FindMinimum", "::", "\<\"cvmit\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"\\!\\(\\*StyleBox[\\\"\\\\\\\"Failed to converge to the \
requested accuracy or precision within \\\\\\\"\\\", \\\"MT\\\"]\\)\[NoBreak]\
\\!\\(\\*StyleBox[\\!\\(100\\), \
\\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\" \
iterations.\\\\\\\"\\\", \\\"MT\\\"]\\) \\!\\(\\*ButtonBox[\\\"\
\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/FindMinimum/cvmit\\\", ButtonNote -> \
\\\"FindMinimum::cvmit\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.544309178928197*^9, 3.544313400950732*^9, 
  3.544470277711292*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4.1963619999999455`", ",", 
   RowBox[{"{", 
    RowBox[{"16.581662878786798`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "0.16524982900724425`"}], ",", 
         RowBox[{"-", "2.0117257507200232`"}], ",", 
         RowBox[{"-", "1.7156873409221676`"}], ",", "0.4032949849416472`", 
         ",", "0.3207757129420888`", ",", "0.2898106494554874`", ",", 
         RowBox[{"-", "0.06062759205881096`"}], ",", "0.1875162004877939`", 
         ",", 
         RowBox[{"-", "1.6453533288195388`"}], ",", 
         RowBox[{"-", "1.3345520970119513`"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
        "2.9055289155608155`*^7", ",", "1.1056562638896601`*^7", ",", 
         "5.41675884390836`*^7", ",", 
         RowBox[{"-", "9.977202389408596`*^6"}], ",", 
         RowBox[{"-", "5.97041383953188`*^6"}], ",", 
         RowBox[{"-", "3.46694796190764`*^7"}], ",", 
         RowBox[{"-", "792363.8126660407`"}], ",", "658332.320937794`", ",", 
         RowBox[{"-", "1.2815124482101675`*^7"}], ",", 
         RowBox[{"-", "2.1730621403904196`*^7"}]}], "}"}]}], "}"}]}], "}"}]}],
   "}"}]], "Output",
 CellChangeTimes->{3.544309179006269*^9, 3.544313401097131*^9, 
  3.544470277741652*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rewardFunction", "[", 
  RowBox[{"1.0", ",", 
   RowBox[{
    RowBox[{"soll", "[", "\"\<QuasiNewton\>\"", "]"}], "[", 
    RowBox[{"[", "2", "]"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.544470101941409*^9, 3.54447013739276*^9}, {
   3.544471128620721*^9, 3.544471160442504*^9}, 3.544471224951778*^9}],

Cell[BoxData["25.093069134669413`"], "Output",
 CellChangeTimes->{3.544471226164311*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"useStep", "=", "False"}], ",", 
      RowBox[{"globalMinimum", "=", "False"}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"soll", "[", "\"\<InteriorPoint\>\"", "]"}], "=", 
     RowBox[{"minP", "[", 
      RowBox[{"1.0", ",", 
       RowBox[{"Method", "\[Rule]", "\"\<InteriorPoint\>\""}]}], "]"}]}]}], 
   "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.543871186600027*^9, 3.54387119260325*^9}, {
   3.543871280095396*^9, 3.543871348732301*^9}, {3.543871381538703*^9, 
   3.543871469734889*^9}, {3.543871520564796*^9, 3.543871530812133*^9}, {
   3.543871612393056*^9, 3.543871616311381*^9}, {3.543871652973905*^9, 
   3.543871672667427*^9}, {3.543871995059092*^9, 3.543871995218156*^9}, {
   3.543949218261597*^9, 3.543949225930965*^9}, {3.543949321432448*^9, 
   3.543949373067781*^9}, {3.543949630545298*^9, 3.543949679278877*^9}, {
   3.543949730947589*^9, 3.543949759633005*^9}, 3.543949871667687*^9, {
   3.543950237866308*^9, 3.543950243201226*^9}, {3.543950344763688*^9, 
   3.543950360817996*^9}, {3.54395052113616*^9, 3.54395060325904*^9}, {
   3.54395125002737*^9, 3.543951269919314*^9}, {3.543955534491437*^9, 
   3.54395555772196*^9}, {3.543955859913995*^9, 3.543955862368361*^9}, {
   3.543955992697519*^9, 3.543955999025414*^9}, {3.543956510596297*^9, 
   3.543956538633755*^9}, {3.543956581362532*^9, 3.54395660883332*^9}, {
   3.544283788718416*^9, 3.544283790804611*^9}, {3.544286380274002*^9, 
   3.544286393352107*^9}, {3.544286455022481*^9, 3.544286457452221*^9}, 
   3.544286546705133*^9, {3.544308981488115*^9, 3.544309002381021*^9}, {
   3.544309063202416*^9, 3.544309069345512*^9}, {3.544309635421726*^9, 
   3.544309646683093*^9}, {3.544313900737064*^9, 3.54431390911798*^9}, {
   3.544442348230555*^9, 3.544442351327034*^9}, {3.544467366516773*^9, 
   3.544467414010643*^9}, {3.544469458949189*^9, 3.544469460444657*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"29.232556000000045`", ",", 
   RowBox[{"{", 
    RowBox[{"16.395790476154932`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "0.0014666312344041332`"}], ",", 
         "0.0029494068966079965`", ",", 
         RowBox[{"-", "0.0029868254913356213`"}], ",", 
         "0.0008877158475104286`", ",", "0.0007542102688852271`", ",", 
         "0.0004984220878986261`", ",", 
         RowBox[{"-", "0.00010475472834194728`"}], ",", 
         "0.0003832454765748886`", ",", "0.0042540691795765855`", ",", 
         RowBox[{"-", "0.0010104105585755593`"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0.014171225047480912`", ",", "0.004588368137500441`", ",", 
         RowBox[{"-", "0.0027650411086858496`"}], ",", 
         "0.003983465108268285`", ",", 
         RowBox[{"-", "0.0034969298214819664`"}], ",", 
         RowBox[{"-", "0.0024960326324920228`"}], ",", 
         RowBox[{"-", "0.0007450175329064422`"}], ",", 
         "0.00035955119529756767`", ",", 
         RowBox[{"-", "0.002174642731947792`"}], ",", 
         RowBox[{"-", "0.08032557527077669`"}]}], "}"}]}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.544470304430923*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rewardFunction", "[", 
  RowBox[{"1.0", ",", 
   RowBox[{
    RowBox[{"soll", "[", "\"\<InteriorPoint\>\"", "]"}], "[", 
    RowBox[{"[", "2", "]"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.544470101941409*^9, 3.54447013739276*^9}, {
   3.544471128620721*^9, 3.544471160442504*^9}, 3.544471209528381*^9}],

Cell[BoxData["26.753465932902547`"], "Output",
 CellChangeTimes->{3.544471211129072*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Try different methods (step)", "Subsection",
 CellChangeTimes->{{3.544308961231416*^9, 3.544308965614366*^9}, {
  3.54430936121579*^9, 3.544309364311283*^9}}],

Cell["\<\
Values for beta = 1.0, looks like DifferentialEvolution is the winner.  Also, \
the local (gradient-based) methods don't do so well, as expected.\
\>", "Text",
 CellChangeTimes->{{3.544052312053975*^9, 3.544052322650424*^9}, {
  3.544206120162146*^9, 3.544206124833916*^9}, {3.544285711506353*^9, 
  3.544285723440838*^9}, {3.54430971094143*^9, 3.54430972058852*^9}, {
  3.544311095531781*^9, 3.544311113585889*^9}, {3.544471833474622*^9, 
  3.544471863128712*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"minP", "[", 
   RowBox[{"1.0", ",", 
    RowBox[{"Method", "\[Rule]", "\"\<NelderMead\>\""}]}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.543871186600027*^9, 3.54387119260325*^9}, {
   3.543871280095396*^9, 3.543871348732301*^9}, {3.543871381538703*^9, 
   3.543871469734889*^9}, {3.543871520564796*^9, 3.543871530812133*^9}, {
   3.543871612393056*^9, 3.543871616311381*^9}, {3.543871652973905*^9, 
   3.543871672667427*^9}, {3.543871995059092*^9, 3.543871995218156*^9}, {
   3.543949218261597*^9, 3.543949225930965*^9}, {3.543949321432448*^9, 
   3.543949373067781*^9}, {3.543949630545298*^9, 3.543949679278877*^9}, {
   3.543949730947589*^9, 3.543949759633005*^9}, 3.543949871667687*^9, {
   3.543950237866308*^9, 3.543950243201226*^9}, {3.543950344763688*^9, 
   3.543950360817996*^9}, {3.54395052113616*^9, 3.54395060325904*^9}, {
   3.54395125002737*^9, 3.543951269919314*^9}, {3.543955534491437*^9, 
   3.54395555772196*^9}, {3.543955859913995*^9, 3.543955862368361*^9}, {
   3.543955992697519*^9, 3.543955999025414*^9}, {3.543956510596297*^9, 
   3.543956538633755*^9}, {3.543956581362532*^9, 3.54395660883332*^9}, {
   3.544283788718416*^9, 3.544283790804611*^9}, {3.544286380274002*^9, 
   3.544286393352107*^9}, {3.544286455022481*^9, 3.544286457452221*^9}, 
   3.544309689474838*^9, {3.544442364745883*^9, 3.544442369833488*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"13.82989700000009`", ",", 
   RowBox[{"{", 
    RowBox[{"27.311154930693107`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "1.6063946787401595`"}], ",", "1.174168811321988`", ",",
          "1.698681045148504`", ",", "0.38295286750940705`", ",", 
         "1.1492147817442313`", ",", "1.7865920468913592`", ",", 
         RowBox[{"-", "1.8525869130257104`"}], ",", 
         RowBox[{"-", "0.9402640474078876`"}], ",", 
         RowBox[{"-", "0.08322384275843928`"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0.2620756683360974`", ",", "0.538740871643622`", ",", 
         RowBox[{"-", "1.25686897398679`"}], ",", "0.6738439837457977`", ",", 
         
         RowBox[{"-", "0.45725975451279455`"}], ",", 
         RowBox[{"-", "0.7795817300307094`"}], ",", 
         RowBox[{"-", "0.8646413348964445`"}], ",", "0.13718830212196742`", 
         ",", "0.5285422402130134`", ",", 
         RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.544286563430699*^9, 3.544286951714958*^9, 
  3.544309080630174*^9, 3.544309402937033*^9, 3.544309504253471*^9, 
  3.544310892769461*^9, 3.544310938084993*^9, 3.544311042449802*^9, 
  3.544471580123657*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"minP", "[", 
   RowBox[{"1.0", ",", 
    RowBox[{"Method", "\[Rule]", "\"\<DifferentialEvolution\>\""}]}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.543871186600027*^9, 3.54387119260325*^9}, {
   3.543871280095396*^9, 3.543871348732301*^9}, {3.543871381538703*^9, 
   3.543871469734889*^9}, {3.543871520564796*^9, 3.543871530812133*^9}, {
   3.543871612393056*^9, 3.543871616311381*^9}, {3.543871652973905*^9, 
   3.543871672667427*^9}, {3.543871995059092*^9, 3.543871995218156*^9}, {
   3.543949218261597*^9, 3.543949225930965*^9}, {3.543949321432448*^9, 
   3.543949373067781*^9}, {3.543949630545298*^9, 3.543949679278877*^9}, {
   3.543949730947589*^9, 3.543949759633005*^9}, 3.543949871667687*^9, {
   3.543950237866308*^9, 3.543950243201226*^9}, {3.543950344763688*^9, 
   3.543950360817996*^9}, {3.54395052113616*^9, 3.54395060325904*^9}, {
   3.54395125002737*^9, 3.543951269919314*^9}, {3.543955534491437*^9, 
   3.54395555772196*^9}, {3.543955859913995*^9, 3.543955862368361*^9}, {
   3.543955992697519*^9, 3.543955999025414*^9}, {3.543956510596297*^9, 
   3.543956538633755*^9}, {3.543956581362532*^9, 3.54395660883332*^9}, {
   3.544283788718416*^9, 3.544283790804611*^9}, {3.544286380274002*^9, 
   3.544286393352107*^9}, {3.544286455022481*^9, 3.544286457452221*^9}, 
   3.544286521370533*^9, 3.544309691499581*^9, {3.5444423726578712`*^9, 
   3.5444423772016497`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"73.99474999999995`", ",", 
   RowBox[{"{", 
    RowBox[{"22.215915259970977`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "2.223633419146406`"}], ",", 
         RowBox[{"-", "0.5121503171312785`"}], ",", 
         RowBox[{"-", "0.5977642683668387`"}], ",", 
         RowBox[{"-", "0.6584753539305203`"}], ",", "0.3737867374437467`", 
         ",", "1.5598743509708324`", ",", 
         RowBox[{"-", "0.7028497598015775`"}], ",", "1.7951701817191663`", 
         ",", "0.7315995519942707`", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
        "2.777611453370928`", ",", "1.3110710211717351`", ",", 
         "8.477911000974649`", ",", "0.81207212666331`", ",", 
         RowBox[{"-", "1.7460964676632078`"}], ",", 
         RowBox[{"-", "1.074460166836724`"}], ",", 
         RowBox[{"-", "3.9911300033334545`"}], ",", 
         RowBox[{"-", "0.25734631785608575`"}], ",", 
         RowBox[{"-", "2.198143667343248`"}], ",", "1"}], "}"}]}], "}"}]}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.544286589187988*^9, 3.544287630065299*^9, 
  3.544309091657021*^9, 3.544309405347074*^9, 3.544309550216052*^9, 
  3.544310892940264*^9, 3.544310972120363*^9, 3.544311094645938*^9, 
  3.544471654520203*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"minP", "[", 
   RowBox[{"1.0", ",", 
    RowBox[{"Method", "\[Rule]", "\"\<SimulatedAnnealing\>\""}]}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.543871186600027*^9, 3.54387119260325*^9}, {
   3.543871280095396*^9, 3.543871348732301*^9}, {3.543871381538703*^9, 
   3.543871469734889*^9}, {3.543871520564796*^9, 3.543871530812133*^9}, {
   3.543871612393056*^9, 3.543871616311381*^9}, {3.543871652973905*^9, 
   3.543871672667427*^9}, {3.543871995059092*^9, 3.543871995218156*^9}, {
   3.543949218261597*^9, 3.543949225930965*^9}, {3.543949321432448*^9, 
   3.543949373067781*^9}, {3.543949630545298*^9, 3.543949679278877*^9}, {
   3.543949730947589*^9, 3.543949759633005*^9}, 3.543949871667687*^9, {
   3.543950237866308*^9, 3.543950243201226*^9}, {3.543950344763688*^9, 
   3.543950360817996*^9}, {3.54395052113616*^9, 3.54395060325904*^9}, {
   3.54395125002737*^9, 3.543951269919314*^9}, {3.543955534491437*^9, 
   3.54395555772196*^9}, {3.543955859913995*^9, 3.543955862368361*^9}, {
   3.543955992697519*^9, 3.543955999025414*^9}, {3.543956510596297*^9, 
   3.543956538633755*^9}, {3.543956581362532*^9, 3.54395660883332*^9}, {
   3.544283788718416*^9, 3.544283790804611*^9}, {3.544286380274002*^9, 
   3.544286393352107*^9}, {3.544286455022481*^9, 3.544286457452221*^9}, 
   3.544286533145898*^9, 3.544286630556627*^9, 3.544309692835284*^9, {
   3.544442379897916*^9, 3.544442385113508*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"12.096161999999962`", ",", 
   RowBox[{"{", 
    RowBox[{"26.429852325430275`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1.0814778718214917`", ",", "0.40253407941891817`", ",", 
         RowBox[{"-", "0.8828769225873113`"}], ",", 
         RowBox[{"-", "0.6708039713893696`"}], ",", 
         RowBox[{"-", "1.167216019422789`"}], ",", 
         RowBox[{"-", "0.007797514691933266`"}], ",", 
         RowBox[{"-", "0.37006615002419985`"}], ",", 
         RowBox[{"-", "0.8553706133426272`"}], ",", 
         RowBox[{"-", "1.2607324022692872`"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "0.31729634881058755`"}], ",", 
         RowBox[{"-", "1.9253698967794777`"}], ",", "0.5622871760600028`", 
         ",", "2.0640329565358266`", ",", "0.2513327460315202`", ",", 
         RowBox[{"-", "1.4132762937836973`"}], ",", 
         RowBox[{"-", "1.3611476688094664`"}], ",", "1.4059296536246966`", 
         ",", 
         RowBox[{"-", "0.4108363195762459`"}], ",", "1"}], "}"}]}], "}"}]}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.544286589426818*^9, 3.544286641052566*^9, 
  3.544287743184302*^9, 3.544309101130609*^9, 3.544309406802833*^9, 
  3.544309559850016*^9, 3.544310893040667*^9, 3.544310979053059*^9, 
  3.544471666749253*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"minP", "[", 
   RowBox[{"1.0", ",", 
    RowBox[{"Method", "\[Rule]", "\"\<RandomSearch\>\""}]}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.543871186600027*^9, 3.54387119260325*^9}, {
   3.543871280095396*^9, 3.543871348732301*^9}, {3.543871381538703*^9, 
   3.543871469734889*^9}, {3.543871520564796*^9, 3.543871530812133*^9}, {
   3.543871612393056*^9, 3.543871616311381*^9}, {3.543871652973905*^9, 
   3.543871672667427*^9}, {3.543871995059092*^9, 3.543871995218156*^9}, {
   3.543949218261597*^9, 3.543949225930965*^9}, {3.543949321432448*^9, 
   3.543949373067781*^9}, {3.543949630545298*^9, 3.543949679278877*^9}, {
   3.543949730947589*^9, 3.543949759633005*^9}, 3.543949871667687*^9, {
   3.543950237866308*^9, 3.543950243201226*^9}, {3.543950344763688*^9, 
   3.543950360817996*^9}, {3.54395052113616*^9, 3.54395060325904*^9}, {
   3.54395125002737*^9, 3.543951269919314*^9}, {3.543955534491437*^9, 
   3.54395555772196*^9}, {3.543955859913995*^9, 3.543955862368361*^9}, {
   3.543955992697519*^9, 3.543955999025414*^9}, {3.543956510596297*^9, 
   3.543956538633755*^9}, {3.543956581362532*^9, 3.54395660883332*^9}, {
   3.544283788718416*^9, 3.544283790804611*^9}, {3.544286380274002*^9, 
   3.544286393352107*^9}, {3.544286455022481*^9, 3.544286457452221*^9}, 
   3.544286546705133*^9, 3.544309695291905*^9, {3.544442387689707*^9, 
   3.544442394553426*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"74.85761999999994`", ",", 
   RowBox[{"{", 
    RowBox[{"27.47793043454964`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0.6077118659088301`", ",", "0.9167152189924686`", ",", 
         RowBox[{"-", "0.8911496533434491`"}], ",", 
         RowBox[{"-", "0.6450278140901737`"}], ",", 
         RowBox[{"-", "0.27197446582253715`"}], ",", "0.18494848355908866`", 
         ",", 
         RowBox[{"-", "0.3351637708012123`"}], ",", 
         RowBox[{"-", "0.2919236740455702`"}], ",", 
         RowBox[{"-", "0.4699499489734187`"}], ",", 
         RowBox[{"-", "1"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0.022653486082188312`", ",", 
         RowBox[{"-", "0.4807668225856361`"}], ",", "0.5097687688303751`", 
         ",", 
         RowBox[{"-", "0.6256740760330879`"}], ",", 
         RowBox[{"-", "0.2113724096595888`"}], ",", 
         RowBox[{"-", "0.5241673541812504`"}], ",", "0.006981194962451642`", 
         ",", "0.07246760841358624`", ",", 
         RowBox[{"-", "0.9620165487195211`"}], ",", "1"}], "}"}]}], "}"}]}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.544286615172856*^9, 3.544288109421205*^9, 
  3.544309161526895*^9, 3.544309409038154*^9, 3.544309592334454*^9, 
  3.544310893048081*^9, 3.544311005023335*^9, 3.544471742369224*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"globalMinimum", "=", "False"}], "}"}], ",", 
    RowBox[{"minP", "[", 
     RowBox[{"1.0", ",", 
      RowBox[{"Method", "\[Rule]", "\"\<ConjugateGradient\>\""}]}], "]"}]}], 
   "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.543871186600027*^9, 3.54387119260325*^9}, {
   3.543871280095396*^9, 3.543871348732301*^9}, {3.543871381538703*^9, 
   3.543871469734889*^9}, {3.543871520564796*^9, 3.543871530812133*^9}, {
   3.543871612393056*^9, 3.543871616311381*^9}, {3.543871652973905*^9, 
   3.543871672667427*^9}, {3.543871995059092*^9, 3.543871995218156*^9}, {
   3.543949218261597*^9, 3.543949225930965*^9}, {3.543949321432448*^9, 
   3.543949373067781*^9}, {3.543949630545298*^9, 3.543949679278877*^9}, {
   3.543949730947589*^9, 3.543949759633005*^9}, 3.543949871667687*^9, {
   3.543950237866308*^9, 3.543950243201226*^9}, {3.543950344763688*^9, 
   3.543950360817996*^9}, {3.54395052113616*^9, 3.54395060325904*^9}, {
   3.54395125002737*^9, 3.543951269919314*^9}, {3.543955534491437*^9, 
   3.54395555772196*^9}, {3.543955859913995*^9, 3.543955862368361*^9}, {
   3.543955992697519*^9, 3.543955999025414*^9}, {3.543956510596297*^9, 
   3.543956538633755*^9}, {3.543956581362532*^9, 3.54395660883332*^9}, {
   3.544283788718416*^9, 3.544283790804611*^9}, {3.544286380274002*^9, 
   3.544286393352107*^9}, {3.544286455022481*^9, 3.544286457452221*^9}, 
   3.544286546705133*^9, {3.544308981488115*^9, 3.544309002381021*^9}, {
   3.544442400924428*^9, 3.544442408541864*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"FindMinimum", "::", "\<\"fmgz\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"\\!\\(\\*StyleBox[\\\"\\\\\\\"Encountered a gradient that \
is effectively zero. The result returned may not be a minimum; it may be a \
maximum or a saddle point.\\\\\\\"\\\", \\\"MT\\\"]\\) \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/FindMinimum/fmgz\\\", \
ButtonNote -> \\\"FindMinimum::fmgz\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.544311005671249*^9, 3.544442485966029*^9, 
  3.544471742916952*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"FindMinimum", "::", "\<\"fmgz\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"\\!\\(\\*StyleBox[\\\"\\\\\\\"Encountered a gradient that \
is effectively zero. The result returned may not be a minimum; it may be a \
maximum or a saddle point.\\\\\\\"\\\", \\\"MT\\\"]\\) \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/FindMinimum/fmgz\\\", \
ButtonNote -> \\\"FindMinimum::fmgz\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.544311005671249*^9, 3.544442485966029*^9, 
  3.544471743275158*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"FindMinimum", "::", "\<\"fmgz\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"\\!\\(\\*StyleBox[\\\"\\\\\\\"Encountered a gradient that \
is effectively zero. The result returned may not be a minimum; it may be a \
maximum or a saddle point.\\\\\\\"\\\", \\\"MT\\\"]\\) \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/FindMinimum/fmgz\\\", \
ButtonNote -> \\\"FindMinimum::fmgz\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.544311005671249*^9, 3.544442485966029*^9, 
  3.544471743390545*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"General", "::", "\<\"stop\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"\\!\\(\\*StyleBox[\\\"\\\\\\\"Further output of \\\\\\\"\\\
\", \\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\!\\(FindMinimum :: \\\"fmgz\\\
\"\\), \\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\" will be \
suppressed during this calculation.\\\\\\\"\\\", \\\"MT\\\"]\\) \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/General/stop\\\", \
ButtonNote -> \\\"General::stop\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.544311005671249*^9, 3.544442485966029*^9, 
  3.544471743393297*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.898864000000042`", ",", 
   RowBox[{"{", 
    RowBox[{"34.010585177856086`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0.28727727635142086`", ",", "0.22846844966192048`", ",", 
         RowBox[{"-", "0.08293590068993112`"}], ",", 
         RowBox[{"-", "0.02320210785974436`"}], ",", 
         RowBox[{"-", "0.4724650929625469`"}], ",", 
         RowBox[{"-", "0.02606454352207388`"}], ",", 
         RowBox[{"-", "0.3105845244878346`"}], ",", 
         RowBox[{"-", "0.2040148992125294`"}], ",", "0.16375376559267507`", 
         ",", 
         RowBox[{"-", "1"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "0.39173641604068943`"}], ",", "0.11027160952501158`", 
         ",", "0.1521600123076675`", ",", 
         RowBox[{"-", "0.41739418845415155`"}], ",", "0.4470895399950692`", 
         ",", 
         RowBox[{"-", "0.2891612243669436`"}], ",", "0.36488273595624676`", 
         ",", 
         RowBox[{"-", "0.14586263811607203`"}], ",", "0.03002544068500035`", 
         ",", 
         RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.544309161935644*^9, 3.544309409331828*^9, 
  3.544309593090333*^9, 3.544310893054339*^9, 3.544311005744632*^9, 
  3.544442487236249*^9, 3.544471743484888*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"globalMinimum", "=", "False"}], "}"}], ",", 
    RowBox[{"minP", "[", 
     RowBox[{"1.0", ",", 
      RowBox[{"Method", "\[Rule]", "\"\<PrincipalAxis\>\""}]}], "]"}]}], 
   "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.543871186600027*^9, 3.54387119260325*^9}, {
   3.543871280095396*^9, 3.543871348732301*^9}, {3.543871381538703*^9, 
   3.543871469734889*^9}, {3.543871520564796*^9, 3.543871530812133*^9}, {
   3.543871612393056*^9, 3.543871616311381*^9}, {3.543871652973905*^9, 
   3.543871672667427*^9}, {3.543871995059092*^9, 3.543871995218156*^9}, {
   3.543949218261597*^9, 3.543949225930965*^9}, {3.543949321432448*^9, 
   3.543949373067781*^9}, {3.543949630545298*^9, 3.543949679278877*^9}, {
   3.543949730947589*^9, 3.543949759633005*^9}, 3.543949871667687*^9, {
   3.543950237866308*^9, 3.543950243201226*^9}, {3.543950344763688*^9, 
   3.543950360817996*^9}, {3.54395052113616*^9, 3.54395060325904*^9}, {
   3.54395125002737*^9, 3.543951269919314*^9}, {3.543955534491437*^9, 
   3.54395555772196*^9}, {3.543955859913995*^9, 3.543955862368361*^9}, {
   3.543955992697519*^9, 3.543955999025414*^9}, {3.543956510596297*^9, 
   3.543956538633755*^9}, {3.543956581362532*^9, 3.54395660883332*^9}, {
   3.544283788718416*^9, 3.544283790804611*^9}, {3.544286380274002*^9, 
   3.544286393352107*^9}, {3.544286455022481*^9, 3.544286457452221*^9}, 
   3.544286546705133*^9, {3.544308981488115*^9, 3.544309023884123*^9}, {
   3.544442418479816*^9, 3.544442421709745*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"FindMinimum", "::", "\<\"lsbrak\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"\\!\\(\\*StyleBox[\\\"\\\\\\\"Unable to bracket a minimum \
along the direction \\\\\\\"\\\", \
\\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\!\\({0, \
\\(\\(-0.24787348721335978`\\)\\), 0, 0, 0, 0, 0, 0, 0}\\), \\\"MT\\\"]\\)\
\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\" from the point \\\\\\\"\\\", \
\\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\!\\({0.23817887939121962`, \
0.24787348721335978`, 0.4114634145391526`, \\(\\(\[LeftSkeleton] 3 \
\[RightSkeleton]\\)\\), 0.303199830579842`, \
\\(\\(-0.42421225595153067`\\)\\), 0.30643595262045453`}\\), \\\"MT\\\"]\\)\
\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\".\\\\\\\"\\\", \\\"MT\\\"]\\) \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/FindMinimum\\\", ButtonNote -> \
\\\"FindMinimum::lsbrak\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.544311007084484*^9, 3.544311140179626*^9, 
  3.544471746198338*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"6.93294500000009`", ",", 
   RowBox[{"{", 
    RowBox[{"28.10560794936538`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "0.24030481886312244`", ",", "0.17320558109033657`", ",", 
         "0.43995944845394097`", ",", "0.2743747824162983`", ",", 
         "0.17266357629404963`", ",", "0.37522217906184596`", ",", 
         RowBox[{"-", "0.3735194834675288`"}], ",", "0.4080288371200479`", 
         ",", "0.3813762627124983`", ",", 
         RowBox[{"-", "1"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "1.9130599505286403`"}], ",", "1.1010325907072056`", 
         ",", 
         RowBox[{"-", "0.37783228756825754`"}], ",", "0.2731059393125568`", 
         ",", 
         RowBox[{"-", "1.2133413472730632`"}], ",", "0.00941126509334634`", 
         ",", "0.1359826704652991`", ",", "0.33482437867861997`", ",", 
         RowBox[{"-", "6.6872741991179385`"}], ",", "1"}], "}"}]}], "}"}]}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.544309162558283*^9, 3.544309409943754*^9, 
  3.544309597140193*^9, 3.54431089306125*^9, 3.544311009213857*^9, 
  3.544311141133572*^9, 3.544471750563404*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"globalMinimum", "=", "False"}], "}"}], ",", 
    RowBox[{"minP", "[", 
     RowBox[{"1.0", ",", 
      RowBox[{"Method", "\[Rule]", "\"\<Newton\>\""}]}], "]"}]}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.543871186600027*^9, 3.54387119260325*^9}, {
   3.543871280095396*^9, 3.543871348732301*^9}, {3.543871381538703*^9, 
   3.543871469734889*^9}, {3.543871520564796*^9, 3.543871530812133*^9}, {
   3.543871612393056*^9, 3.543871616311381*^9}, {3.543871652973905*^9, 
   3.543871672667427*^9}, {3.543871995059092*^9, 3.543871995218156*^9}, {
   3.543949218261597*^9, 3.543949225930965*^9}, {3.543949321432448*^9, 
   3.543949373067781*^9}, {3.543949630545298*^9, 3.543949679278877*^9}, {
   3.543949730947589*^9, 3.543949759633005*^9}, 3.543949871667687*^9, {
   3.543950237866308*^9, 3.543950243201226*^9}, {3.543950344763688*^9, 
   3.543950360817996*^9}, {3.54395052113616*^9, 3.54395060325904*^9}, {
   3.54395125002737*^9, 3.543951269919314*^9}, {3.543955534491437*^9, 
   3.54395555772196*^9}, {3.543955859913995*^9, 3.543955862368361*^9}, {
   3.543955992697519*^9, 3.543955999025414*^9}, {3.543956510596297*^9, 
   3.543956538633755*^9}, {3.543956581362532*^9, 3.54395660883332*^9}, {
   3.544283788718416*^9, 3.544283790804611*^9}, {3.544286380274002*^9, 
   3.544286393352107*^9}, {3.544286455022481*^9, 3.544286457452221*^9}, 
   3.544286546705133*^9, {3.544308981488115*^9, 3.544309002381021*^9}, {
   3.544309053131146*^9, 3.544309058537931*^9}, {3.544442433003796*^9, 
   3.5444424355460463`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"FindMinimum", "::", "\<\"fmgz\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"\\!\\(\\*StyleBox[\\\"\\\\\\\"Encountered a gradient that \
is effectively zero. The result returned may not be a minimum; it may be a \
maximum or a saddle point.\\\\\\\"\\\", \\\"MT\\\"]\\) \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/FindMinimum/fmgz\\\", \
ButtonNote -> \\\"FindMinimum::fmgz\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.544311011243167*^9, 3.544471751534145*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"FindMinimum", "::", "\<\"fmgz\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"\\!\\(\\*StyleBox[\\\"\\\\\\\"Encountered a gradient that \
is effectively zero. The result returned may not be a minimum; it may be a \
maximum or a saddle point.\\\\\\\"\\\", \\\"MT\\\"]\\) \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/FindMinimum/fmgz\\\", \
ButtonNote -> \\\"FindMinimum::fmgz\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.544311011243167*^9, 3.544471752436826*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"FindMinimum", "::", "\<\"fmgz\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"\\!\\(\\*StyleBox[\\\"\\\\\\\"Encountered a gradient that \
is effectively zero. The result returned may not be a minimum; it may be a \
maximum or a saddle point.\\\\\\\"\\\", \\\"MT\\\"]\\) \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/FindMinimum/fmgz\\\", \
ButtonNote -> \\\"FindMinimum::fmgz\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.544311011243167*^9, 3.544471752587338*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"General", "::", "\<\"stop\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"\\!\\(\\*StyleBox[\\\"\\\\\\\"Further output of \\\\\\\"\\\
\", \\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\!\\(FindMinimum :: \\\"fmgz\\\
\"\\), \\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\" will be \
suppressed during this calculation.\\\\\\\"\\\", \\\"MT\\\"]\\) \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/General/stop\\\", \
ButtonNote -> \\\"General::stop\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.544311011243167*^9, 3.544471752589742*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.9197089999999197`", ",", 
   RowBox[{"{", 
    RowBox[{"29.53749094507465`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0.14112779500508377`", ",", 
         RowBox[{"-", "0.056813793666588175`"}], ",", "0.35657383531980713`", 
         ",", "0.13660456705911284`", ",", "0.1565036431797341`", ",", 
         "0.04548418122671194`", ",", 
         RowBox[{"-", "0.3465324310583546`"}], ",", "0.018937837389589984`", 
         ",", 
         RowBox[{"-", "0.39293990364300835`"}], ",", 
         RowBox[{"-", "1"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "0.11267651333665396`"}], ",", 
         RowBox[{"-", "0.11996780449058336`"}], ",", "0.36114476390270067`", 
         ",", 
         RowBox[{"-", "0.26672206845245217`"}], ",", 
         RowBox[{"-", "0.194543971503019`"}], ",", 
         RowBox[{"-", "0.3656699040004874`"}], ",", 
         RowBox[{"-", "0.2799830311023831`"}], ",", "0.29009172521413595`", 
         ",", 
         RowBox[{"-", "0.05111780682282607`"}], ",", 
         RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.544309164477827*^9, 3.544309410167863*^9, 
  3.5443096000081*^9, 3.544310893133054*^9, 3.544311011305151*^9, 
  3.544471752714836*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"globalMinimum", "=", "False"}], "}"}], ",", 
    RowBox[{"minP", "[", 
     RowBox[{"1.0", ",", 
      RowBox[{"Method", "\[Rule]", "\"\<QuasiNewton\>\""}]}], "]"}]}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.543871186600027*^9, 3.54387119260325*^9}, {
   3.543871280095396*^9, 3.543871348732301*^9}, {3.543871381538703*^9, 
   3.543871469734889*^9}, {3.543871520564796*^9, 3.543871530812133*^9}, {
   3.543871612393056*^9, 3.543871616311381*^9}, {3.543871652973905*^9, 
   3.543871672667427*^9}, {3.543871995059092*^9, 3.543871995218156*^9}, {
   3.543949218261597*^9, 3.543949225930965*^9}, {3.543949321432448*^9, 
   3.543949373067781*^9}, {3.543949630545298*^9, 3.543949679278877*^9}, {
   3.543949730947589*^9, 3.543949759633005*^9}, 3.543949871667687*^9, {
   3.543950237866308*^9, 3.543950243201226*^9}, {3.543950344763688*^9, 
   3.543950360817996*^9}, {3.54395052113616*^9, 3.54395060325904*^9}, {
   3.54395125002737*^9, 3.543951269919314*^9}, {3.543955534491437*^9, 
   3.54395555772196*^9}, {3.543955859913995*^9, 3.543955862368361*^9}, {
   3.543955992697519*^9, 3.543955999025414*^9}, {3.543956510596297*^9, 
   3.543956538633755*^9}, {3.543956581362532*^9, 3.54395660883332*^9}, {
   3.544283788718416*^9, 3.544283790804611*^9}, {3.544286380274002*^9, 
   3.544286393352107*^9}, {3.544286455022481*^9, 3.544286457452221*^9}, 
   3.544286546705133*^9, {3.544308981488115*^9, 3.544309002381021*^9}, {
   3.544309053131146*^9, 3.544309058537931*^9}, {3.544309105448899*^9, 
   3.544309107056691*^9}, {3.544442441035821*^9, 3.544442444338045*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"FindMinimum", "::", "\<\"fmgz\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"\\!\\(\\*StyleBox[\\\"\\\\\\\"Encountered a gradient that \
is effectively zero. The result returned may not be a minimum; it may be a \
maximum or a saddle point.\\\\\\\"\\\", \\\"MT\\\"]\\) \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/FindMinimum/fmgz\\\", \
ButtonNote -> \\\"FindMinimum::fmgz\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.544311011967043*^9, 3.544471753170092*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"FindMinimum", "::", "\<\"fmgz\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"\\!\\(\\*StyleBox[\\\"\\\\\\\"Encountered a gradient that \
is effectively zero. The result returned may not be a minimum; it may be a \
maximum or a saddle point.\\\\\\\"\\\", \\\"MT\\\"]\\) \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/FindMinimum/fmgz\\\", \
ButtonNote -> \\\"FindMinimum::fmgz\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.544311011967043*^9, 3.544471753510831*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"FindMinimum", "::", "\<\"fmgz\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"\\!\\(\\*StyleBox[\\\"\\\\\\\"Encountered a gradient that \
is effectively zero. The result returned may not be a minimum; it may be a \
maximum or a saddle point.\\\\\\\"\\\", \\\"MT\\\"]\\) \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/FindMinimum/fmgz\\\", \
ButtonNote -> \\\"FindMinimum::fmgz\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.544311011967043*^9, 3.544471753625088*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"General", "::", "\<\"stop\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"\\!\\(\\*StyleBox[\\\"\\\\\\\"Further output of \\\\\\\"\\\
\", \\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\!\\(FindMinimum :: \\\"fmgz\\\
\"\\), \\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\" will be \
suppressed during this calculation.\\\\\\\"\\\", \\\"MT\\\"]\\) \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/General/stop\\\", \
ButtonNote -> \\\"General::stop\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.544311011967043*^9, 3.544471753679193*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.8568699999999122`", ",", 
   RowBox[{"{", 
    RowBox[{"37.35317608936745`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "0.35028457160248433`"}], ",", "0.2489257358454462`", 
         ",", "0.3468713860215471`", ",", "0.27724248339157787`", ",", 
         "0.4699664154470996`", ",", 
         RowBox[{"-", "0.25585175156150886`"}], ",", 
         RowBox[{"-", "0.04045210064179888`"}], ",", 
         RowBox[{"-", "0.10278971211783883`"}], ",", 
         RowBox[{"-", "0.39117834845560107`"}], ",", 
         RowBox[{"-", "1"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "0.09020494655148226`"}], ",", "0.28636697139143896`", 
         ",", "0.36883812756800827`", ",", "0.018449531306165334`", ",", 
         RowBox[{"-", "0.1609443989684905`"}], ",", "0.28881777580281187`", 
         ",", "0.21912269917049254`", ",", "0.26952379546071914`", ",", 
         RowBox[{"-", "0.007815784990037655`"}], ",", 
         RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.544309179006269*^9, 3.544309410473061*^9, 
  3.544309600741103*^9, 3.544310893227889*^9, 3.544311012031181*^9, 
  3.544471753731967*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"globalMinimum", "=", "False"}], "}"}], ",", 
    RowBox[{"minP", "[", 
     RowBox[{"1.0", ",", 
      RowBox[{"Method", "\[Rule]", "\"\<InteriorPoint\>\""}]}], "]"}]}], 
   "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.543871186600027*^9, 3.54387119260325*^9}, {
   3.543871280095396*^9, 3.543871348732301*^9}, {3.543871381538703*^9, 
   3.543871469734889*^9}, {3.543871520564796*^9, 3.543871530812133*^9}, {
   3.543871612393056*^9, 3.543871616311381*^9}, {3.543871652973905*^9, 
   3.543871672667427*^9}, {3.543871995059092*^9, 3.543871995218156*^9}, {
   3.543949218261597*^9, 3.543949225930965*^9}, {3.543949321432448*^9, 
   3.543949373067781*^9}, {3.543949630545298*^9, 3.543949679278877*^9}, {
   3.543949730947589*^9, 3.543949759633005*^9}, 3.543949871667687*^9, {
   3.543950237866308*^9, 3.543950243201226*^9}, {3.543950344763688*^9, 
   3.543950360817996*^9}, {3.54395052113616*^9, 3.54395060325904*^9}, {
   3.54395125002737*^9, 3.543951269919314*^9}, {3.543955534491437*^9, 
   3.54395555772196*^9}, {3.543955859913995*^9, 3.543955862368361*^9}, {
   3.543955992697519*^9, 3.543955999025414*^9}, {3.543956510596297*^9, 
   3.543956538633755*^9}, {3.543956581362532*^9, 3.54395660883332*^9}, {
   3.544283788718416*^9, 3.544283790804611*^9}, {3.544286380274002*^9, 
   3.544286393352107*^9}, {3.544286455022481*^9, 3.544286457452221*^9}, 
   3.544286546705133*^9, {3.544308981488115*^9, 3.544309002381021*^9}, {
   3.544309063202416*^9, 3.544309069345512*^9}, {3.544442449091743*^9, 
   3.544442451586029*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2.8415679999999606`", ",", 
   RowBox[{"{", 
    RowBox[{"35.3239933843232`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "0.48842470758876594`"}], ",", "0.24915628372339294`", 
         ",", "0.025375547022228107`", ",", 
         RowBox[{"-", "0.4673636843482388`"}], ",", "0.11436500452907294`", 
         ",", "0.140334632178994`", ",", "0.014505230131284685`", ",", 
         "0.37854444479054106`", ",", 
         RowBox[{"-", "0.1485151873535756`"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0.39966358196474405`", ",", 
         RowBox[{"-", "0.11479489443038221`"}], ",", 
         RowBox[{"-", "0.051213150037575206`"}], ",", "0.4897014868446967`", 
         ",", 
         RowBox[{"-", "0.47888086282579706`"}], ",", 
         RowBox[{"-", "0.4662797070768066`"}], ",", "0.19725690043021293`", 
         ",", "0.19597484839021928`", ",", "0.3477843700677081`", ",", 
         RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.544309178608587*^9, 3.544309410714551*^9, 
  3.54430960417703*^9, 3.544310893316772*^9, 3.544311014666984*^9, 
  3.544471756763007*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Calculations for step model.", "Subsection",
 CellChangeTimes->{{3.5448946900336*^9, 3.544894693921315*^9}, {
  3.544895709739426*^9, 3.544895712523028*^9}}],

Cell["\<\
Expectation value for learning gain, 1-P(G)-P(s) in terms of: cbl = correct \
before learning, wbl = wrong before learning, cal = correct after learning, \
and wal = wrong after learning.  \
\>", "Text",
 CellChangeTimes->{{3.544895399873748*^9, 3.544895635047272*^9}, {
   3.544895688198088*^9, 3.544895699987773*^9}, 3.545511920223437*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"bind", "[", 
   RowBox[{"x_", ",", "a_", ",", "b_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"x", "^", "a"}], " ", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "-", "x"}], ")"}], "^", "b"}], " ", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"a", "+", "b", "+", "1"}], ")"}], "!"}], ")"}], "/", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"a", "!"}], " ", 
      RowBox[{"b", "!"}]}], ")"}]}]}]}]], "Input",
 CellChangeTimes->{{3.545491446388631*^9, 3.545491484322995*^9}, {
  3.545491581831626*^9, 3.545491606157081*^9}, {3.545491680681152*^9, 
  3.54549169316004*^9}, {3.545491972418733*^9, 3.545491974681139*^9}, {
  3.545493057544851*^9, 3.545493066206763*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"bind", "[", 
    RowBox[{"x", ",", "a", ",", "b"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"Assumptions", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"a", ">", 
       RowBox[{"-", "1"}]}], ",", 
      RowBox[{"b", ">", 
       RowBox[{"-", "1"}]}]}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.545491487532605*^9, 3.545491529880721*^9}, 
   3.545491704289093*^9}],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{
  3.545491501643875*^9, 3.545491532467003*^9, {3.545491585674589*^9, 
   3.545491594006665*^9}, {3.545491699370546*^9, 3.545491704865899*^9}, 
   3.545491977219587*^9, {3.545493061462026*^9, 3.54549307489072*^9}, {
   3.545493815682741*^9, 3.545493819600965*^9}, 3.545503980762714*^9, 
   3.545505605001643*^9, 3.545578472739799*^9, 3.545675748553052*^9, 
   3.545736480981834*^9}]
}, Open  ]],

Cell["Find the expecation value for the learning gain.", "Text",
 CellChangeTimes->{{3.54557837831205*^9, 3.54557838765299*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"1", "-", 
  RowBox[{"Integrate", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"g", "+", "s"}], ")"}], " ", 
     RowBox[{"bind", "[", 
      RowBox[{"g", ",", "cbl", ",", "wbl"}], "]"}], " ", 
     RowBox[{"bind", "[", 
      RowBox[{"s", ",", "wal", ",", "cal"}], "]"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"g", ",", "0", ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"s", ",", "0", ",", "1"}], "}"}], ",", 
    RowBox[{"Assumptions", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"cbl", ">", 
        RowBox[{"-", "1"}]}], ",", 
       RowBox[{"wbl", ">", 
        RowBox[{"-", "1"}]}], ",", 
       RowBox[{"cal", ">", 
        RowBox[{"-", "1"}]}], ",", 
       RowBox[{"wal", ">", 
        RowBox[{"-", "1"}]}]}], "}"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.545578398562622*^9, 3.545578487427134*^9}}],

Cell[BoxData[
 RowBox[{"1", "-", 
  FractionBox[
   RowBox[{"1", "+", "wal"}], 
   RowBox[{"2", "+", "cal", "+", "wal"}]], "-", 
  FractionBox[
   RowBox[{"1", "+", "cbl"}], 
   RowBox[{"2", "+", "cbl", "+", "wbl"}]]}]], "Output",
 CellChangeTimes->{{3.545578466546341*^9, 3.545578491082285*^9}, 
   3.545675751251811*^9}]
}, Open  ]],

Cell["\<\
Find the probability that learning has occurred (that is, find the \
probability that s+g<1).\
\>", "Text",
 CellChangeTimes->{{3.545504063369813*^9, 3.545504095806903*^9}, {
  3.545511935657396*^9, 3.545511962871716*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"int", "[", 
   RowBox[{"cbl_", ",", "wbl_", ",", "cal_", ",", "wal_"}], "]"}], ":=", 
  RowBox[{"Integrate", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"bind", "[", 
      RowBox[{"g", ",", "cbl", " ", ",", "wbl"}], "]"}], " ", 
     RowBox[{"bind", "[", " ", 
      RowBox[{"s", ",", "wal", " ", ",", "cal"}], "]"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"g", ",", "0", ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"s", ",", "0", ",", 
      RowBox[{"1", "-", "g"}]}], "}"}], ",", 
    RowBox[{"Assumptions", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"cbl", ">", 
        RowBox[{"-", "1"}]}], ",", 
       RowBox[{"wbl", ">", 
        RowBox[{"-", "1"}]}], ",", 
       RowBox[{"cal", ">", 
        RowBox[{"-", "1"}]}], ",", 
       RowBox[{"wal", ">", 
        RowBox[{"-", "1"}]}]}], "}"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.544894696545002*^9, 3.544894962948435*^9}, {
  3.544895010633988*^9, 3.544895057790159*^9}, {3.544895178609935*^9, 
  3.544895208829724*^9}, {3.54489532477612*^9, 3.544895354397756*^9}, {
  3.544895648880509*^9, 3.544895671293358*^9}, {3.545489436246312*^9, 
  3.545489487997069*^9}, {3.545493826973004*^9, 3.545493900700997*^9}, {
  3.545503957546076*^9, 3.545503972231885*^9}, {3.545504022974548*^9, 
  3.545504029980315*^9}, {3.5455044908847*^9, 3.545504548705465*^9}, {
  3.545505573614115*^9, 3.545505574595533*^9}, {3.545507789414026*^9, 
  3.545507824737971*^9}, {3.545507905601457*^9, 3.545507936766752*^9}, {
  3.545508328560052*^9, 3.545508353245317*^9}}],

Cell["\<\
Recursion relation that produces same result:\
\>", "Text",
 CellChangeTimes->{{3.545510490537981*^9, 3.545510516198134*^9}, {
  3.54551099472401*^9, 3.545511023130238*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "f", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"0", ",", "m_", ",", "0", ",", "n_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "+", "m"}], ")"}], "/", 
    RowBox[{"(", 
     RowBox[{"2", "+", "m", "+", "n"}], ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"a_", ",", "b_", ",", "0", ",", "d_"}], "]"}], ":=", 
   RowBox[{"1", "-", 
    RowBox[{"f", "[", 
     RowBox[{"0", ",", "d", ",", "a", ",", "b"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"f", "[", 
   RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "=", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"c", "+", "d", "+", "1"}], ")"}], 
     RowBox[{
      RowBox[{"f", "[", 
       RowBox[{"a", ",", "b", ",", 
        RowBox[{"c", "-", "1"}], ",", "d"}], "]"}], "/", "c"}]}], "-", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"1", "+", "d"}], ")"}], " ", 
     RowBox[{
      RowBox[{"f", "[", 
       RowBox[{"a", ",", "b", ",", 
        RowBox[{"c", "-", "1"}], ",", 
        RowBox[{"d", "+", "1"}]}], "]"}], "/", "c"}]}]}]}]}]}], "Input",
 CellChangeTimes->{{3.545508257753729*^9, 3.545508293766094*^9}, {
  3.54550836279459*^9, 3.545508399840835*^9}, {3.545508438999042*^9, 
  3.545508468373682*^9}, {3.545508510084142*^9, 3.545508562249081*^9}, {
  3.545508665885641*^9, 3.545508686546265*^9}, {3.545508866458886*^9, 
  3.545508888810192*^9}, {3.54550892505642*^9, 3.545508939486689*^9}, {
  3.545509510254507*^9, 3.545509565780974*^9}, {3.545509687455061*^9, 
  3.545509769246806*^9}, {3.545509805100682*^9, 3.545509830712019*^9}, {
  3.545510257374372*^9, 3.545510283993057*^9}, {3.545510336739677*^9, 
  3.545510375419007*^9}, {3.545510884569753*^9, 3.545510914103058*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "ff", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ff", "[", 
    RowBox[{"0", ",", "m_", ",", "0", ",", "n_"}], "]"}], ":=", 
   RowBox[{"N", "[", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"1", "+", "m"}], ")"}], "/", 
     RowBox[{"(", 
      RowBox[{"2", "+", "m", "+", "n"}], ")"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ff", "[", 
    RowBox[{"a_", ",", "b_", ",", "0", ",", "d_"}], "]"}], ":=", 
   RowBox[{"1", "-", 
    RowBox[{"ff", "[", 
     RowBox[{"0", ",", "d", ",", "a", ",", "b"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ff", "[", 
   RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"ff", "[", 
    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "=", 
   RowBox[{"Min", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"ff", "[", 
       RowBox[{"a", ",", "b", ",", 
        RowBox[{"c", "-", "1"}], ",", "d"}], "]"}], "+", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"1", "+", "d"}], ")"}], " ", 
       RowBox[{
        RowBox[{"Max", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"ff", "[", 
            RowBox[{"a", ",", "b", ",", 
             RowBox[{"c", "-", "1"}], ",", "d"}], "]"}], "-", 
           RowBox[{"ff", "[", 
            RowBox[{"a", ",", "b", ",", 
             RowBox[{"c", "-", "1"}], ",", 
             RowBox[{"d", "+", "1"}]}], "]"}]}], ",", "0"}], "]"}], "/", 
        "c"}]}]}], ",", "1"}], "]"}]}]}]}], "Input",
 CellChangeTimes->{{3.545508257753729*^9, 3.545508293766094*^9}, {
  3.54550836279459*^9, 3.545508399840835*^9}, {3.545508438999042*^9, 
  3.545508468373682*^9}, {3.545508510084142*^9, 3.545508562249081*^9}, {
  3.545508665885641*^9, 3.545508686546265*^9}, {3.545508866458886*^9, 
  3.545508888810192*^9}, {3.54550892505642*^9, 3.545508939486689*^9}, {
  3.545509510254507*^9, 3.545509565780974*^9}, {3.545509687455061*^9, 
  3.545509769246806*^9}, {3.545509805100682*^9, 3.545509830712019*^9}, {
  3.545510257374372*^9, 3.545510283993057*^9}, {3.545510336739677*^9, 
  3.545510375419007*^9}, {3.545510884569753*^9, 3.545510914103058*^9}, {
  3.545677696927575*^9, 3.545677748482885*^9}, {3.54567963799169*^9, 
  3.545679688667807*^9}, {3.545736845431419*^9, 3.5457368586742163`*^9}, {
  3.545737060174024*^9, 3.545737088812133*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"int", "[", 
     RowBox[{"cbl", ",", "wbl", ",", "cal", ",", "wal"}], "]"}], "-", 
    RowBox[{"f", "[", 
     RowBox[{"cbl", ",", "wbl", ",", "cal", ",", "wal"}], "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"cbl", ",", "0", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"wbl", ",", "0", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"cal", ",", "0", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"wal", ",", "0", ",", "2"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.545507829589693*^9, 3.545507897644796*^9}, {
  3.545510441102703*^9, 3.545510452964733*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.545507916382859*^9, 3.545507947984116*^9, 
  3.545508917013312*^9, 3.545510463371654*^9, 3.545510528130597*^9, 
  3.545511078092044*^9, 3.545736532679957*^9, 3.545737133314522*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Block", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"cbl", "=", "5"}], ",", 
     RowBox[{"wbl", "=", "6"}], ",", 
     RowBox[{"cal", "=", "12"}], ",", 
     RowBox[{"wal", "=", "8"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "[", 
      RowBox[{"cbl", ",", "wbl", ",", "cal", ",", "wal"}], "]"}], ",", 
     RowBox[{
      RowBox[{"f", "[", 
       RowBox[{"cbl", ",", "wbl", ",", "cal", ",", "wal"}], "]"}], "-", 
      RowBox[{"ff", "[", 
       RowBox[{"cbl", ",", "wbl", ",", "cal", ",", "wal"}], "]"}]}]}], 
    "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.545736396614563*^9, 3.5457364656907883`*^9}, {
  3.545736543421125*^9, 3.5457365693200912`*^9}, {3.5457369593101673`*^9, 
  3.545736993385874*^9}, {3.545737114739552*^9, 3.54573711921764*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FractionBox["240754", "310155"], ",", 
   RowBox[{"-", "0.000016074549394340387`"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.5457365358177977`*^9, 3.545736570895694*^9}, 
   3.545736864376832*^9, {3.545736963179554*^9, 3.545736994130509*^9}, {
   3.545737092977456*^9, 3.545737097393531*^9}, {3.545737133508526*^9, 
   3.545737136532444*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Block", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"cbl", "=", "7"}], ",", 
     RowBox[{"wbl", "=", "8"}], ",", 
     RowBox[{"max", "=", "50"}]}], "}"}], ",", 
   RowBox[{"ListPlot3D", "[", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"f", "[", 
        RowBox[{"cbl", ",", "wbl", ",", "cal", ",", "wal"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"cal", ",", "0", ",", "max"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"wal", ",", "0", ",", "max"}], "}"}]}], "]"}], ",", 
     RowBox[{"PlotRange", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1"}], "}"}]}]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.545736396614563*^9, 3.5457364656907883`*^9}, {
  3.545736543421125*^9, 3.545736826049268*^9}, {3.5457369235485687`*^9, 
  3.545736928261374*^9}, {3.5457372869843493`*^9, 3.545737295512774*^9}, {
  3.545737331894603*^9, 3.5457373445850077`*^9}, {3.545737375622883*^9, 
  3.5457373765529613`*^9}, {3.545737609091404*^9, 3.545737609653524*^9}}],

Cell[BoxData[
 Graphics3DBox[GraphicsComplex3DBox[CompressedData["
1:eJxk3QlUjW3b8PESKWMIIalUmqR5bnfu3ayUNMiQKfNQKEmiUEQoJbkrhCYp
IVFokKQIzVJKI0KjUkn69vu9Hcf1fSfrWWsvv+da3antv47jOq+7W2KT24ot
Y3h4eJ7N5OHh44FfXYbw2t31P78aRn/PQ8DLy/7vr1EXQP/grZV99/WLURdC
3xXGaYlZ9HjUhdHFpjfca1O+O+oi6AaliYMro2JHXRTd59Lw5KaGyFEXRx+e
cmsd+/uFUZdEL/JOLEtaFzjqUuhyr78Vz/jkN+oyzMfnVQpNyz446rLoN6TT
frf37R11eXRLD75Km5Dto66IXlq3MnsP36ZRV0JX2nmz4fnj1aOuzHz8YO+v
0yfZj7oKuvqioEv1661HXRXdwevQG6JrNupq6MsldSaJfmePujr6f88v/PL7
pDfqGuhDD/qW3KvWGHVN9IL8xf7mhiqjroXu6f1ihsIuhVHXRl9fuPOWQ6f0
qOug97We+pCYIDHquuhVle/MgsJFR10P3SLk18BC49mjrs98/rG7H6gLzhh1
A/Sjmpc2Plo2ddRZ6O8LJ73m/yg46obob4d9EjUPjBt1wnw+stvPpjTy/q/7
MZ7TtT4i8scw639/z0bfM/yQ/VVy8H/dj3HzfXkXjqv0jV7PQX8pdaS7pKN7
9HrGv5x8lJvp3jF6vRG6c7B87JuuttHrGX8s42VaL/959Hpj9Jg/W/UVeZpH
r2fcLtBp7WGHhtHrTdBJissld7mPo9czXtccMPPzyurR603RD79YEvVbpHL0
esbd7YQ2JtiXjV5vxnz+F2JqrDrejV7PuMq0F9qWDa9HrzdHn+iWXMreXDh6
PeMe0cOpT1xejF5vgS6YYTR+THHe6PWMxzpEROw9l8uC3//vKw/x+r+/vlId
4yElR8XrXBwbqY7xEMnx/1Og91THeIisjPuua34lVMd4yBvlc/ODSwqojvGQ
KO+yig1vc6iO8ZCsFXYPp219SHWMhzS9SfBf3ppKdYyH1LZdPJb9K57qGA+p
Uiz+M/NRDNUxHtK/dr5JccRlqmM8pG4iO/WNaSjVMR4icbIju2dPENUxHjIS
cDt3bIE/1TEeMmtKXmRhli/VMR4y4WKPUpi7F9UxHuI3MEvs+9B+qmM8RKFx
5HL6/T1Ux3jIuMMnfmZu3kZ1jIcMr3UK7j8LXdVAd5j7vvRClDPVMR6SOjfx
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
CZNHg3LH+iugnxz01s4GtXljXKiOCZNFZxc0zru0geqYMJmi9nqN9BhnqmPC
RMJjzW3vXauojgmTcbHySZNWOFIdEyZvHy6eZHYT7gOYoNu+Tzp1DrvK+Noi
MxuPMOiqKfq3BxkLt062pDomTPRa4kNlfsN9WjN0j8h7aS8sTKiOcbuh1Drv
UQeH6hj361zln+NWR6iOCZMYn40L5ERgvrVAF7HYG7OnRZfqmDB5uq98m9Y0
bapjIqTkzDqLy0adVMdESNe58GhyGuY0AfTKlya7FMZ+pzomQvImFuSaTIW+
CaNvOPco2Gi4heqYCFlWqtXqLNBEdUyEHPQIeDorrp7qmAjR9hbTSqr6QHVM
hEx3/iJnlVxJdUyEqH8fab8hBucUMuhs0zZTbRbss7Lo+/YKuyVpF1EdEyH/
zWhuXScI3VNE74sXllsfDN1TQj/91irl0OosqmMiJGwHq+pzaAbVMRESojV4
81r0A6pjIuTL+P6tWnYwB6ox1y9hz3iuDHuxOvpkk1nyEvGJVMe4n2fVyy/G
dXCeoonuWPHwjukD6KEW+n8BO24nil2lOiZCJAajTLRT/6M6xv36/8r++aoX
9mhd9KTDLMmbJXC/UQ+93YEn3EcuhOqYCAmQzn8wqxL2awP0xZWXnezHQSdZ
6B/zfC+ufwn3Jw3Ro+45OhbyQScJuuPOsTtZ1r5Ux0TI9znNJw5zDlMdEyFO
y5b0byw6SHVMhOhdE353tBjmTA66qwlHfqLOfqpj3O9X8Ihs2F83qmMiZJLb
s/u8UrupjokQv/sB5+YXw/5ujF7LL/hGtGUL1TER8vXGJmnRtS5Ux0RI9tac
rliZjVTHRIiaY3ZqyN51VMdEiHuWfEjElDVUx0SIOOum+stZTlTHuP/cDtuX
Pd4OVMdEyOey+bn9StBVc3S+OsnQPbLQVcbHus5ryX8KXbVAX73K/LtJKHSV
8Q0+W7bPzDenOiZKYtZXhtieozsmSmK9x6WYbYA5TQC9Pi6AXD0Kc5oQ+qr0
d5pm82APFUZ3G5H4OcbjC9UxUbLuq+Ju5ewW/DzgNUhCOHmpOPRNHH3nr20/
fTZ/ojomShpO5fG94qmlOiZKHFwMvlXPh/MIGfQDT/vLAzNhrpNFnxb+JDfm
Ncx18ui29jdupV0opjomSj6H5LJSLQqpjomSQ1u8XB7E51MdEyXFxSVOZReg
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
Eh7XmNx4UR24OuELapMvT1oK90dPo3/n1jdPwwC493w64Qsj2s1LDsM9yNRP
/UzNrzDlNNzfTf3U9xIOGe5OhHvnqZ/66Nsrgu/Pc/OcauqnNp0zeeHABU6X
qqmf+vIX4UP9FzldqqZ+6t9N32oTrnC6VE1905oeq98eeMTpUjX1TUv0VvlM
fsvpUjX1TWd3Razmq+fep6qpb7pNRrZxtzp3Tqaa+qaTDTrnpoVy+yPV1Ddt
7NitrdjGvX9VmxB+Va7Ow3QNp2PV1DeduU8xS/E3p2PV1Dd9VkJzyuNYTsc2
U390vkFvf6sl3PdKeUJ2+Kj5gpy+bab+6FHP08YEvuN0rINyGXVT9Dubm3dt
tiBcfvF9henpcB835ddjA9UVlnH6tpn6oyucqy52BnD61kH50DnP447e5vRt
M/VH31ZdNfWqCPee2EF5WX/Avd5A7j1xM/VHp7kMmWgwlNO9Dsq/988ZpZDE
zdM2U390auk708DFnO51UP7GQ7R2rByne5upPzq+rjq//A/nj95MfdCFRQoC
YfmcvnVQvtd73ovyT5y+baY+aPk+jz65sZCfxu3HDfoTS4/+ekP2/bn9OMwP
pqcKTyB8BOGqgatU/8K+fwj1O/8wKnp8BfbxQ6jfue6RWM2zzxyH/TjM575a
muJwAbgi4WYjT00QgnvTYD8O8+5H1p+PtXA6A/txmD8d0zKmPxo49SkfeRGu
/eQavDdRn/LY9+5tKlPhvhXqR1bXPCWY1Qn3g1A/cqijm43rbODUdzx+9O7R
R8i9wNR3fDdCqHGYDHDqL7Zq/Pf740G4n5H6i1988G+ouQ/3ilJ/sbTJ7Vk/
O+A+XOov9tQqz5isBJz6i1v3ihv5OsN9xNRfPMH9eOr9w3CPNvUR/5Oo0DQX
gPvKqY941UxTwSwrTpdgPw7z+fsm1qakcPojSn3BE9GcD95WnP7Aftygn/f5
8Bvhidx8KZry+RV2aJc7pz+wHzfoK08fNbd2gNMZUerzVYopm7ykhtMZUern
3R1R27KwgNOTaMpLzCVXhBZy86Vo6ud983P7EuUOTk9EqW93VFSWrbAEcOrP
5c+4/benlcubjab8h5Fc+3O4B0GU+nNH1Ux8Ft8PeTXcfpw8QtdPnuavIc8R
PwI+rt1Ymd7rNJLwiDXbvUaQ8zZihHdua+BrJucGpQhPGX6su5qcqxlPeECD
lewBWLeE/TjMnUM1LubmA1ck/NrDcm10Hjj1205sMd+YYw6c+m2H2uQsrBuA
9w7qqw2KCPJ74QSc+mpL9k0cEwX3WSDqnw07H3DzcB+sY1D/rJ1CqbAenCtG
1Cf780HXPS9rWN+gPtmvpwRdhsJ5OUT9sCkRG6M+2MH6BvXDDpM3O211HO73
oX7YmMUHZ2z+DOse1A/7IUdMylUZOPXDKtu/VepdC+sh1A8r+c/yqEYGrIeY
EK7/IfpRzm+4J5T6YYddXlHmbgyc+mFR5re9j8Jg/YT6XscV2J3+BTkA8tTf
apQk5Za1gXt+YT8O89MzJHNcZGBdhfITCn9iEtu45xf24zA/0PrdUyyAmz/I
U79q3PmT9ZMg11Se+lKnr49enCkO6zCUm+sMD104lPMXJFJf6p1zf36pD+Ge
a3nqP+U/8TBMfzQ3f4D9OMyrlcc11lpyz3Ui5ToCSe5T1nPzB3nqM1WTtxgz
/gz4TLn9uAxzJBprcvUbee64/TjMvdK7T58kXJhwE4Np2zPheYT9OMxVtTwv
XCDfg1KET306R/Ai5IHAfhzmXe9fTsoGnwLsx2H+QLJB6SGc44X9OMxjqx4M
hMK6AezHDfpbD1/Z+gbuw82jftKVTap7H0EeCOzHYT5/yO++yNnAqW9U5pfy
6rximLdT3+jF/QYex4I47kH9obcmRnW/hNwPD+oPHXtQ5GqpA3DqAz29Vzhe
x4V7fj2oDzTK0y/3Txn3/HpQv6evS2LBsTTu+fWgfs8hZ04KKooCp37P9JtZ
t/shH8mD+j2L+VXCBEq459qD+j19m563DFMGTv2eTzLu55QFwj0+JoQ/PGk1
SbEc7kuifs9lWb7oujJw6vdUe/Nt9qQA7nmH/TjM2wbu1QiXwv3glLvJb6vj
U+a4FvV1Htjj4BcUxD3vsB+HeZms/9d7M7jnPYNysYrwGONo7nmH/TjMc5f1
iPk5cc+7FvVpjj/c3WC5i/se16J+zGuJZ2X5dLl1jwzK7V/vd/gsw+lABvVj
Dre6l7KKj/se16K+S5NnE2cZDHDPO+zHYf51qf6e8VLc93sG5Z9rstSkNDgd
0KL+ylu16rF8cyDfg9uPG/R5rfQe3kGeU24/DvNlFb2hdwkXIXy23xkFOcLF
CT++QrboLnnvlib8wZRNi/jJ+p4M4VPHnnluRfYFJtK/k3z0eho5v6pA+J5z
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
1TD1D+Z65VhUGabCvgxdd5XuMXgdrM98Lsx9ApD3cpEW3s+F+Qaj60nz933j
/VyD/90nU5usGpp4PxfmCvELDd7ow34EXcd7vs5y6K8I5vPi99ZftSMb4tjP
i7luWa5q1D/m8w6uL/k3/qpvZj7v4PrVjWH7rzxkPi/mhTWu9hPWwd+h6zz1
G1qHDqtt5+0D5v/tuX/54S+mD5jPXpS/OCi+mbcPmO9T/hffqPSNtw+Yi079
k9V/uom3D4PrYAduvPotBOuldH3ApXdqyAW/et4+4D4lSryQKo0q5+0D5hVl
92bfb8/j7QPmVfu9HG8/yODtw2DOjLrM2REzk3j7MJiLstvo5KS1XG5DNX1/
Pz9a9lRdUBhvHwbzbeKX7HYdu4K3D5jvFLLc5xT3H28fMG8sKcnf2DqHtw+D
eSk/Hjrt9LPg7QPmaxcfPqtbo28GfQFeO65B2kRiBjN/mICkhQVGv+1/y9sH
zBcdeFOjaVbC2wfMj3X4bF1o+4i3D4M5EiclRT4tusXbB8xfRnzasunuFWa+
MQGtM86okdodyvt5MZ/x4+2UrKsBvJ938L0+c7eGYoQv7+fF3GhSaLmV0lre
z4u5sWNumuc1T+Z7XAmNOXY6f47GR+Z7XAn5Sq6flaVdwfu5MBcr63Z2HVPI
+7kwf/5l26s4U2YeMnj/u86EYfOyTjDf10ro+skNJ0boHuWtH/P3KQ5fLhke
5K0f87/lI7SuXdvL9F8ddR1tNU8yr2L6r45q1Awnn9J4w/RfHYmfWuQ1y6eU
6ac62jUl9O37eReZfqoj6do9O6dpJDL9VEfeVz6aZtw9yfvfxXW5G6kj55xP
vP9dzLUGTrauXPuO9+9jnjQz6Py1yRm8fx/zt64/Q1d5XGb6rIPavmeHnKv4
zPRHBx1Nd3FU/Af32HLPO9ahaXNFdEXyGd3D3HHlnpJVSozuYe6b/stWr6eN
t8+YL3imLh9s1cr7eTF3Ob1qYqBCM2+dmOcJHblTkAvzcPr+/vnkq+JcX3i/
o+/v6iveV8acquIdP5g/Dzok15D9nvffC3OPzaM0hsP9IB70/f3mFFf9fJsK
3v4MnmOvN6yMdixl+oCQ6oeQZ0Jb2D4gtOlNZRXJu0uk7++9iwJL35H9Pvr+
fn3YtfjRsS1MHxB66Kw5beAg832HufiM+DN/06uZz4tQcrP9wpgVn5jPi9CB
Pf9nayxPH7yJ5l8Hh29xijoP666h+dfB4Zcd97tD0y+j+gto/6/rE4y/sqPV
a6D1eFz3HLm53qH6Cyhu2X/U0X/lG1R/ge4N8XzAofrtFar7geKfebuvqtx7
gOp+oPhJl/6fIjz3UN0PWu/H8uFY3dJbqO4Hiqs+XBr2uec6qjuB9vSfnLm/
dSKaO4Hi8Ye86m/Bzg98gOi/2y9nc2oUeoPqHtC59/ed7lhwPER1D+h8+5aD
h2Xmo+Uv0Doxv/mbjmbfRrUXtN6mdsnV17BzDh8g+u8fZLR3ZL5/g2o+UJyH
gz9iEew+iw+I/vu5Jb0eGvL3Uc0BnTv6uGTCtFlvUdWD5scZJCYX+zy0BwBn
vcBk
   "], {{
     {EdgeForm[None], GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1:eJxMnXfcVvP/x697dd/3dd3nXOe6GrL3lj0qoyEjSinasiUlZTWMSCEisooS
EVJkkxUpisie2Xtl7y/9Xk+v9/3w++P9eL8++5zz+ZxzPvP13vCok3oMq8zl
csc3y+WqpHeRVEjw27o6l/tNnr9LNqzL5b6tzeVWSRanudyMJrncn4VcLi/8
i8LbC3dLJEo8IZ/LdRfuIXy+cB/hk4QvFb5ZerhkhGR26JMlLyq/6U2cb9/E
fpMV/2W5r5fMlLwS+gbJcslUyTTJIl3DNdK/6xqWpA7/S/hZ6aubOGyp5ErJ
VZJloQlbIbkuyn4+8rtW8prkRsksyVOp/f5Qnrfquk6RnCq5LfRpkn6J9WW6
5k7SmaQk2Sd0WdIusT5NcfaTbippJtk/dHNJ+8T6dMXZS7hIGcIHSa8lWVty
gKSFZA3JnZIxkjMk0yXHSwZLrpMMCnevxH6TlE9/4VHClwvPkh5W4bq5QzI6
8rqd8iUjJa/HM7hJMjf8SN9b+QyVvkT5XC99gmSI5FrJcVH2zPAj3o2SE6O8
D5XXHZI7JR9I5oX7o/CbT51KLpVMljwuuUhysWSh6mKi9C+qi8eEzxP+SfhJ
6UsizcKIO0lyv+RcyTjJA6FJ80Tq8F+V9lHpC5s430ckF4T7Icl4yQTJgtDn
S55V2nulcw253A/Sj8U1Pp86ryr5vyn8mXAq/KjwOcI/qqy3hL8ULjY4/J4m
zuvx1Hn/rDjLhO8SXi38qfTdEe8N+X8snShtVz3HNaNNzJXfSMkoycOKc7r0
90r7pvTNktmSZ+R/i/Tf8l8pfZtkjuStCCfs6dT1/D/FWZo6/B/h96Rvb+Jy
Po764freDz/q7x3JrZHv05IpkiskSySXh3ux5LJwP5m6bn8ruJzTmvi6SX9q
uGkToyVjooxR4ab8MyRnRnsZE+5HlOdZ0j8UfH2EnxXP7mzJ2HjW6H/rI+qN
9nJgvE8tJR0laYXfvaclUyRXSI5Sm79ceqra/JHClwpfI/xMhF8pOTqxnib/
59HxTiyTXCW5WvIc6chH8iTvUIXzeopvHt8QybMRl3iLw4+yT1T+j0jfpPz/
jOuj/P9JlkY5wxOnuUVxRiQOv1X4B+nHJI/zvZD/Kum75f+99KMRNlr+X0jP
l/8Y4a+F78o77sMVLvsJviVx3UcozsVca975XlRh96fkLblH8pJkRoW/E8ck
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
JKlOnV9bxW+Q/5tVbutrC38u/QXvfLX1l5J6xf9Rup3ibyr/H6rsXk/4K+mv
eS7V1t9IalPrPRV/Q/l/K7yKb5Dwp1W+7o2q7fedZBPh76uc7+bCP0n/LGmS
uvw9lM8W1fZj3bEudbq95F+Q/xtVvodmwh9U+T5bVPteP+b6Ej/jDRX/EekL
qvy9fzQ03/i7q/y/4dt/T2jq4K4q/2MIW1bl/gR9hPlV/t8QdqdkTLi/S/w/
25R1ySr/z3A/I7miyv2ObxKXuZHifJu477Kx8O+J3+Fthdeo9rV/UuX/P984
4rWsth/P8XHJRRHGf4D/NH2fpVEO17pYcllcx6rE4ZuwdiZ9SaR5VN+/C3P+
Dj4uuUhysaQlz036ILXnK6WPkBwpKcr/KOl95D9V+hjJsZKrIpywKZKBksMl
0yL8OMl1kkGsPUtukAyVnCiZHn6DJddIjo58Z0qGRLxS4rj7qdybpE+SDJc0
o08ofYD850iflrP7Nsmp4Z4rGSkZJZkvOUNypqScOI/9lbY5fRXhA4XnRVzc
d0rGRJpZkmFR9oy43hMkWWK9r9K2SJx3F+GO7s7lNFzJ7R06k/zeYL2j4rSR
jmF6rm1oDW1yPzf8263KbaU4fzEXKdxaeLec1+0J2zXW7XEfJFlLsrakq2TN
cHcLv3WoM54j98098+wkzcmLfpH0dsyfS7eTtJf8oXKbSu8s/9nSIyQnc5+R
B2F/MqfDtbAHIMrhWrvQhuI6DpSsEe7OUSZpbon8KLNpYt1Z+aSJ287ewm+r
r3VLhdfhj0+8Bn+9/N+s8N4C9hS8E+G3xVoI/bJ/JG0U/y/qS/EnSB8s6ZFz
u0b3lOQT690V513WDSq8Hj4ocd4z5P+G9E1R3uDE6+Iz816DoZzVOa+bsT7E
2OkryQPh/kAyr8LrWLxnh0gOlbwX5ZDXcYnX5qczVkq8jn5d3usYrKHhflVy
Q4XX1V8LTZpfGtxetsn7HSbvXjm/w70lfSTnRH10jXa/f9RDbeK63CXv9r1f
hI2NOiNNXeK4uynO5dKH5fxu1yRuIzvI/2zpAyJNQt9eukPe72HHaPu8hx3C
3SSx306Kc6l0P0l/SX3iNtRG/pPDj7wmxX30lRQS39+eitOQ2K+d8Lh4B2jv
o6Otc2+8x53CfW48A+KdF3Epj7ZfT1uQ/Ma8tvT2rJFx/xHGWvHH0p/wPijC
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
8XUR72n6xfSHJY/w7az2fe6isi6XHlLwMzuHeTDJ9vIfJ32c/O/hWri2eKaE
E7ZUciV9VMmz9Fsl18R1zJPcIdlD+cxl/pC9uxE+NergPObxJNulzvtYxbmb
eb4o75m4Xsp4mH9RXPdi+vvVvu6n6I+HewflM0F6kPJpWeNn86nkoSiHsLsk
Z0YZXN9oyRjJtko7SvoY9h6H3xmS+aFJc2Dq/M5VnLWU/2fCn0s2Ef5e+gfJ
X3HdPJta+b8i/apkH6VdQV5Ku6/wy+QpXK04Lwq/JKmpsSZs79T3OVpx/pBe
EnX4Z2jKqFT8F6qdb4Xw89V2d1La5dyD0v4tvSzqh7HFxtXe89I89b6ZAxWn
T/ixv+bQau+bYY9M+9Rt5XTFaZHar4vw7fhJRkr+ibyp29WhKXtuhPNMWynt
adJHF9wub49wntmj1X7/2qWup9MUZwPdyzfC30q6yv9r2or8u6R+t8ext6fG
4askB6XW4+W/mfx/FP6JexX+Lsrplrp+JijO2jWuN/JaV/jLan8b1quxpjy+
JbxnvIf7Ke1rtJmC8+B6+X7U1bhuX4trXRDtlLIXVvubsSr8eI6/RXulXn+V
LAo35T0Y7bRj6u/OKPa/RR64O6Quc2TB49oNop52l/9t0iMK/n7cWm03/9K+
tV5LuTjWUVg/YUzWvdbnkPg2c46I8z2/pw7ftsH/3gERRt9qB8Zxkj9SrxFu
pziXRt64+X/2rPX5oaNrfT5pe8mvqc9HbdPg/2GvuI4JUT5hv6Q+H7W14hwX
5ewk+TN1XtvL/6/UYTtwZkd4MPE4Z5H6nFIr4SlxH5xt+lv+Q8lH/hfGdRHv
Q/k3oa8o/zbSNbV2t5ZUh5vy/+F/2sRnpf7k39fE17Q6Nsdwb//jn0X/PrVu
pjy/SR22kfBXqdepNhDet9ZnyDjr1UmS1fpcGc+JvMnrE8Uv8m9V/PdTl9Nc
eBfpCkml5CP510u3lP8e0nW1du8uqQ33XpK8pCD5PnW8zRS/o3Ra6zI6SJJw
7xp5V0k+VvwG+syK3y7ywP1B6vAW8j8pyiNf+lB7RpnfpX6mmzb4GzZDcr2k
rfxnSw9X+9xVeJrwUOHWwjOFhxX8nt0kuTm+faSbGe/VjZJZ8Q29IdxtUvud
VPC3hv/JtPj2XSu5TrKb4kyXPrHg7yN+uHnv7632v47/It93/gn8p/kf8O3/
KDRhhdR8JB2Uz56p/4WnFPwf4F91T3wjuHbuk//0LfEedk/9Dp9f8L/orkjD
/3lOfAc58/Rjjc+fMI/CmUPaC218l6gf+pu7RTtdldpvEz3nb1O3y40b3C/b
OdJw3pEzirxXJ0f9UJ+MHdtG/Q2N/KizH1KHb97gvmr7aCOnhabtcJ6Sc4mc
jxwT18j5RfrLe0e7HhWaezgjwjk3yTmun2t8duXM8OO8I/NPXeNamR86IMr4
OXU5W+l6fkxd/hbCP6VOt6Vwj2rvAf33H1btPYvsT2Qebq1q7yflnMkrfKNr
fO7k5Rq7OW+zgv9ujc+vvEa/KuZHmSf9UjJFZX0uvbTgOdKvhJcVfDaLcNyc
P/usxvEuVpwXmMMp+IzW1/zDauLcD//1Gp/ler7G8U5JvWYzR/FvrfFaAW7W
B/j/8X9jruu0Gq9vcGZrmeTZGp/XWhpuNuwtr3G+FynP55jDKfh8F3FxT0pd
/qKCz5lxXd9KrpL/98Qp+CzgpzW+H87XfUC/tsZnhlbSp6zxmT38PqrxObH3
6HfW+EwemjTMh11Y47Wmx0KzvvFwjddvWI8alVrfyVpM6ryfLvjc0js1Lu+S
1PX2FGdAhN8QXlzw+cZV/NclV6a+j2cLPgOJH/dzufw/kX6m4LWi9eOZcqbx
4xqHcU7pLfriNT6fRP1TBmeW3qxx2OTU4UsKPhPJfZN+QOr6mVLwXDt9CPoO
rOFsVON+B3Px9MsZB2wj+b3a/biDU/cDLlDaHWrcP6MP1SN1/+nCgte+qmrc
N2RtiQ2a9O96pu7zTVScHWucjjStapw3fcPtaR/VznfbGvvRJ20d+dHH7J16
HHJJwWt6jDFws17YEG7WE8pxD7tE+ZTNeh39Wvo+rLcVazyOOSR13hcVvIbX
JOJ1inDGJX1S60sVZ3TqdjG/4DXGnaMc1joYtzC+6Ze6r3ZZwWsY9Llx945n
TL+b9Y01I+zASEffv29qPVlp+6eun8sLXr9aJ+qMNZbmUd5hqfO7ouA1sU1r
3JdkTYxnSl2xnrZduAcq/ua0wYLX9raQbFnj9UP0VpLDU+urCl7baRblsX64
dbQL1hepP+rq2CiHuu0X5VPGEan9ri543XGbSMP88cU1Xt97IjRremekXuO8
W/H3qPZZL86BlVPv6d9f/vtUe08/bvaJ1Ea8NPV5sE4F7wf5u8rnyVrRfqX/
lGxHm5L+X5X3hhDOGS/mC5tWey98MXWZ+xQ8V4cf5wDYu5FF2YwFj5YcI9lc
8QdKH1bw/xy/Y6Mve2q1xw/bVrt8ys5Snx/Yt+B9Ivlq78cvpT57sJ/8O1b7
TAJu9nck4W4XcUm/aerxT/+C11i4Rvbvsy+motrn2PpX+2wA5wDW4p/Lv50x
Zmq/gwqee94s4q2ReizVlXmA1OcZDhBumvocQmfhbvGPIoz1q3Xjf3ZU3CfP
mHWhVuFmHWmbcLMusWW1z3ixz6W62mf7Gug3SndU/m3Cj7rcNe6D83lc++rY
wJ2k9tu74DWrFvEfHRh5w8e2ZmrdjfFX/GO5h7VT53uw/A9N/T24mPFX6uc1
gHMT9NvJr+C1MtY4Wds8PfXa5DzG++HHOud9NV7XJOy01H5zC16zGhth56VO
s0D+z9R4PZ61etZbpoSbdbwzojzWUi6PsFNT70W4nTFsjf+ruMekfm/ukv9T
NV6z5/1hvWJCjf9brI1cGmG804zf+I6PTL0ufkfBaw7jarx+zrriqBqvz7OW
OCau6Y7ww/1gxCX9tGjvPK8zU6/H31Pwt+SXape3tfxPol0U3P8dVm03feIT
w02/85R4Z+jvHi8ZTNtR2pNpXwX3hQdFGH3WEdUOow87PNxbMYai3XENqfM4
vOC++QmSIdXuo6OJt1HqNt2HsXnqttK74O8X42H6wRun7rf1Lfjc/w817vtu
kPp71Ev+66Ruuz2EN0k9H9GPPlXq9/lQ4fVSv8OH0B9L/Y3rWfDaE2fVn2mq
+otzXYdJpiU+B7YCjqx6uSXXSpZJrpJcLXlGcoXkSqRo/az6mculp0aaZyPu
NZJBivNtncY5ijNP+Ev5fSR8VdHhzwmvkL5OMl2yvuRreF4ki4QvlUyWPBX6
Mq5JaW+RflFpV0rfJpkjeVNys2S25B3JrRG2kWSV8vsObpsoZ4bkacmUuJ8l
ksvDfXXR971c+T8pfUlcx0jm7JlLl5wu6Rju1orfQXqY4u8kvKPwYOFjpXeo
s3uQZCfJzpJzmO9nHl5ygmRXyW6SXZS2tfQQpd1VeHfhocJDIpyw4ZI9JHuS
l+LsQh6MayJv3CMifC/SFa1PVJwxzMEz9y4ZLdkn3KPinnCfEeH7w6MTz/V2
SVvWtihf+ZzNukGd3adI2knaS85iDSHC2hSdx0mMlSKcZ/RW1A/1N01xbpJe
oTjXFF0nzwvfI322ZKzk3tDnUP9F6yWKc7/0uZJxkgdCn0f7KFo/zdyL8FnC
i+H6k75QMlHykGS8ZILkvbi/uZL3Q8+TfBD6DkmBsyXRvqrybq+0o0q4w+rt
nl203ztsoM77feAdekRyQZR9i+K8Ir1ScW4r+lm8J3yr8OvC7wo35F0OYXXC
r0q/JqnPWxPvRJ6vpK1kQdzH+ZK7JGfW+54XSi6WTJI8Lrko3NzfSMko2n3R
4csanPeNkllRBpq64XpnSm6QvCy5PtxTi/Z7ocHP7/TId17kPTrevVMlp8Vz
xG9M1P8Iycm8W0X7PaV85kufEfdwS4SfwntZ9P09ozgXCw8XfrLB13dSvd1z
ohyuY1LR6RYx31V0nS9t8D0NizRN8r4f7m9YPEvet3PjvTxI0kJhH8FdJami
nvl+SCqoW7h7JEcr/w+lp8GfQ7ups3uNeqf7RLKW8GdwWknWFP60zu5jig6/
Vmn7Cj8sPJn5PeGvhKcL9xF+UPhS4V7CdwtPYq5P+hnJUsmfkqfD/YdkSbgP
U/znpK+Ah0f62Tq7BxSdbor8ewvfJ3yJcD/hx4QvE/5belmk4WDN8jrfc1Pe
kzrf57rCX9b5Wo8t+v6u41wO7Vf4bUkD702d3UcV7TdVcQ4VvlP4YuEHpMdJ
zuP7UXQdjJX/AcLj+V42+BkQjvu++IYSL097lX5DUuT9k14pObJov2uUtp53
qM7xSrxn0u9JyvXW3M86wl/U+X6yeudBvJv4hsV3t5b2Iv2qpAnvQ53dA4tu
C1eqrMOFXxK+inOB9W4vuI8oOt3V8u9UdJsbI3xjnd9n3K2K5j47Wv4XSPeU
HEJ9UGfUp+Ty0AMlexYdforiny/dI9LwjLpLDpZMlBwq6UX7Lrpdj2BetOjw
k4WvkD6ca5TMkAyu83+pY9H/lVGKc3348S9qL/+jpE/nu8310pajfrpF2VdR
B3WOt5fi95Y+VfGnRlz+jddKjqvzv/HKKJ80exddzmjFvy7CuY4ORacb2eA8
tq/z/3WypH88o3aK00/6NMXZpGjuqn7CW9eZhwuur63qzFeFm+vbVrIdUjSf
8rENvpZtqBN00bx1R5FP0Zx0RwpvWzT/3TGc+ZD+sdYcVxsVzc/VR/6b19kP
vqsthX+pddk3CA+Nur9E0rfO1z1J0ifcOxZ9XcezLhB12DueUau47s2L5oA7
jDM6RZfTV3jTonm1+gtvUTT330Cus2jesQHCC6Qn1Lnt1Oh7+FJ844t595/o
WzE/zLob63GsH7IOw3oMa7ho1l9Ye2SdjfU21jZZ52ItjTlm5ppZb2MM+1yE
Mb+NH+turFkujfSsTS6OMhjbLo80UyJv1vbok6+IfJkXZp2MeWLmkplTfiv6
58w1M1/OvDp+rBHPibgro///TqRhDp65eO6TdbT1Yw6ENSPistbM+i/ls854
pvrJm6qf/ARnKvU82+s53afnOVZ4P+H7G9yPHCg5vN79msGSE+rdPz5Wcly9
+6HHR9i14TeIvkLR+nHlM0G4L/0I4fOEewovEB4n3F34Ib4VwscIP9bgPvXR
9XbTBz8q3FfEtRwhOYc9b9IPKP5o4R2E5wufJbyn8L30FYV3pk/R4LHMy/GM
zpR/W/nfI/9RwtsK39ngcQB5Hyk5v2j9qPzPZc+/8IPCZwjvJnx3g9coWKtg
3Zc1DjTrvIzRXosw1sRZr2c/AOvkrJfjZv3hw3Czxs5ae+OaPJp1C9bK0axB
sKbNmmHjWjqa/Q2s3aNPjb0EzOlNinUW1jXZR0DbYZ6PMNY362P8zvUyb8f8
HevUaOb02J/AXB9zho1r1cwnsubOuifrtqxxM2/J/CTvAXOGzF3SFplfpDz2
L1A+5fEsmDegPNoo+ZF+vJ5nLz3Phxu8L4P1VtaJ2ZuBZj2ateW58a6MjmfH
s2StmfeB9VDW9PFj7wF7NliTZf2UfRysq+K+Kd4nrot1JTTrvOzzeDLisRfg
zijj9CiTMhhj3xbvHHtHHo9rZW8B6zys97BfgbXfxv0LaJ7XmRHOGhN7He6J
NI17DijvlMibb8DweP+5XuYB0Kx/MVafHWGM8f+Nyz4Tzq7X+3s3seh3dKGe
59Ci+3mzhP+s91iRse//6EvWe0z8A+9cvfvXs4oOf5O2XfR443Xh7+o9BsD9
Wb3HNoxpPuU9CPcq6jDi/R15M4aeXnSf/mXl80e9x6hcx6/1HhszJqYvPkQy
VNJF0rLefcyTi+6D3tbgfjrhJ0ouKlo/If+f0fUe4/4Smnx/jHtiDHFj0foN
xf9denFcx0e89/Xus38cmmu9qehrf0vxW+rZfhL3envR8T6Qf4u80+NeR/iL
es8LlPIeczImW1v483qHZXn/iwibW/Rz/FD5rJl33ribC38Y11XOOw/Gc03z
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
0SLC+B42RBj/r0Klx1/8ryu53rz/4fzLcfMP5F9IvC6RN/8f/l/NKj1e41/H
Pw8337RyuKcn/pbyXeXd4h3jH8/7xnvY+P4dFWF8e3NRNu8y/2j+y/QX6DeU
Kv3fRzM+5V/P/TGu5DtcjHh8F/je8Z2Af/TrSrchvgn0LSiDfwH9Cf7t/Av4
v9NPOD6ug2cwKNLg5t/FP6xVpf8hpCcN/w7i0s/h30ed0Bdq/M+Rhn/IrpGG
79GOkS/Pgn7PDpX+D5I3/RyeB//C7aIMrrGm0t+6+qgP+jb4PZh3H6au0mPq
rlE/a8X90++hvzMs3LvHs94uyuZbt06lvwUHRbq1Ix7pyJf+Pu2SNsu4g3fr
j7zHAIw3CMMmIWOkRruIaMZV2A8cG2HYyGN8hc0+bBtiv6/RFiKaMRB2HrHf
hy0/7FZiu6/RjiWaMMYcjMHIC3uD50QZ+0eZjbYW0YwpNyzaVnTvBr+TsyW3
SO6g/yz9MX2VOn0Xam1HGtue2NXEvuYmdfZjXzv2/hg3Yt8TO4Dkje1I7Pxh
L5BxHjYCT4/r6xR+pHk7yry10nY4B0UZ2A/F5iA2ELENiO28mXGf8ADDO4x9
QzT27xjHMO5lvDsk4l5f9Z+9Q9Jgn3JK/J+wQ0pcbH5hb5G42M6jbGzqNdoR
RcO/fGT07ykDW6NXhxs7qEOjTOxUUlfYUsTu6IkRhg1JbCoydsGOJPMj2KTD
piFjGGwd7hDlHRNCmXBAY1+ScSG2ArEnydiR9LtHfqTn/8W/HNuF/A9nSW6q
9H8RTV3ey7yK9Jd58zF/KvxZpTnRP6m0m3/JgkrH47vwULhvSdwnoX8yO3Ff
iH7RTYn7e/Tr+NdOlUyrtJ1Y8v680nzSH9GWJAsT+/2SN580fpQNH/YXXFul
7Zqiv5I8kVj/yjqR/N8X/oD7SdwPod/1eGK/nxlDVfnf+G6luas/rHTZjyZu
Zz8y95U4/Ke8ueHfq3S+dyZug5/k3Y/gPq6V3E4bo9y8+ykzJTdUupzbJHMk
85m74Bnm3Tch/EbJXNqV9Id5//unS2ZI5iUO/yjvayEP0r8U4aRhHoL/7h/x
XO6XPCC5mzkxnm3ezwa/B+M+7+Ra4pneRdx47vPDzXOax/td6T4R98e93ZXY
77O82wHp7on2gb4XnbicL/KuQ/zui2c3N/Klr8s/mDEO306+ofTfsQs5O74n
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
7zzhnpn3NtHval72HMnx8q8re17uCOFy2fN4g4SzsufujhVOy54bPEY4KXu+
7mjh7pn35dCPypf/r6nzDreaSru4CJ5z7r3nJISbjL1gQUYsKHaxdxzboCj2
Njh2/ex1sI99VBQVREWxIr2pY0MFpNlQUUREkCJVEGmWb/2+9fL4/bGfrOwk
Ozn7JDs7+11rL48rnqn8s1p4ruQBwme08LzG/YS7NDc/hj7hmS08P3J/5e/c
wmMYdwg3tPC44FnClwufEH2bvQp7j92gY3dMPS6GNwdeVXh6MI7SIvU4Y6eq
33/NwkP5vfDoYJxyUmK/Zjyd3w6fDcY+R8Z2xi/z1Hn4brwTnhvsN1xpXtnj
o68qTVf6TunzxP7O+Dj3jbxpjImkHp89XvnD4jjWi9TnwV/js8Re0nhkvxm6
KMZHxyh/KmO8zAkmPAResfDNWg4tef12pdeURihdp9RP6VWl2yJvOJxqpcFK
g5RuiuVApeuV+scxNygNiPX/xvkZP36t7DFl6vSV+E3fKr1etv6LbS/gIav0
tdIbicv+o0HtR8mxPLbdojQsrvslHTNV6Rul98NHhf9m49TtEn4oY1XObHjX
whsqv8ozW/VvnlPythllt7ccQ33THtL2cY0sae8439w4ZpzK/BHeO2Mp2qee
sRulL8t+T7HO/4knC2V9qP1nMpZVdZ3Ngs8edceSbS8rfVvy/0S9cE7aXH4f
S75JBgvPVprFmFTq6+7Ib9FyTmwboDSz7G39lL6Pe+uLxN7leJQP1PKH2K95
6vKOU36Sui7/XvWSc6ZKXwnXKq67l+N/47q+Lvs9yLYxZfvarFYapbRKaaXS
RqnLOIN7MvF91ET42ri/+ipdE8tXiN2W7S2Px/zGscTzfoOyvabxnP5A5Uwi
tqtyepccV/2c/yaxlz2e9RuW7aHNMZuV7SPPtlmJy8Cf+n3hT4jbCm9Rtr89
Pvc94NQrTVTqWXIfmPX3EueVtf+WPNNxzOzE19imap93fNXxbedZxK8b3+7n
0Awofan0uNIEpfFKI7X/ODQF2v8+uAhK75Ts245vOF7hoxIfVy/8deLfs4nw
9MRl49vep+QYNOdopbyTaBN4NhKv42XfkvYj6mJ04uesQfnPRP1Rp1MS18Wm
yp8Kp1q4pfDcxHWznfBTaBr4LlBar2y/b7y/Lyv5OvitV/J8lvzsvpb42f5N
z/IVkcd6Y+q2Ae3n64mfgd/RRmn5fJQ1InF5v8LlE34djYP2vzruF465uOT7
gN/RWLZ3OR7nl2j92dh2QcnX3UvpQqWnY3144uNWw9dK/RzjSdQiysAPnecG
b3S80mmb8VXHZ/1tHfumjm2q/X9I7IGOv3mvqBvurXWjbtj2b9pE2jbao7K9
0SlrRuLy8HDnfYLnO/fQnbEvv7ko2z8d//U8lvzOLK6R66sotY97rqFsX3jK
mpn42vFhXzdd6/8mjMeDaYLymlS8Pq5sb6bfaUMSn/tn1cnQxM/DSuE+wqfS
DsIz1/JkpZNK1qO003In2jTtc7eWy7TPY4nzvhHun/hdslSYyfdpuw+q2vOT
5+ExpbOVuis9qjQkcd4K7T8o8bPxS4PHdp+m3nRsv8TvsCUN1jDtKNy2ZM3M
ziVf0+PaZxfaVe2zQvtsK9ymZL9xfMfxJMdLfUuenwbrk8hrWbLXOp7rcEpW
Cm9X8vFolnbQcnulWur28diq9Tl7KO1esg5n15LPjS5nt1jvovRE/OYeOu9e
Wk5rsL5nzzj+icRlfNtgjRS/ifOdFXXziNKZseymNFj7/0fL5ZSTui/SgetJ
/Q4+XLgiPJZnVfgJLSeW/f93K7vtHq30iNKHsd697HuCY+C40BZvrGOrqd95
xwg/puX42I//ZJLSZ0rl1H2gI7TPc1pOLvvd+GwsOf4Zpc/jmIbUxx1dtS88
dT8ZnV1cF+8T3lX4nfGe5j84Q+l02ovE5R6gY19M/JzPbzDHC67XPHQKWp5W
8r3bJo5j/Q/t8zzPddXxJ/ooh/EMMr7Eu0O4h5YfRX29nLiNW6gy61LX35HM
y5q4XVuk/L6J26bF8MkTt00LhJ/Uvp+UXe79yhtZcluPbqx9yffBo4mfq68b
fO28e3j2zlN6MtaHJW5fVjW47fmJcylNSLzMqtb+Ha50WLQfcBsWlqwbJO/Q
kjWHhygdTNk6dn8tp6vMnsL7CH/XYA0i2w8qWX94aBzzlPY5QssZDdYadojz
vVUyl4Brmqh9lnKeqt9nP5e8Tr9whtL3Jb//p3OuktvyaSX3gfpGHut/YUyv
bL+8fnEcx9CPmFdyP4z+6fxYH6/zLtCyedX1uyzO/QHPsNKKkrV5+yntW3Lb
St1wzEc69hd+K/18nqeS19+P41hHv3dAyfU1NtrL3+I+pe9Dv+cZlXOstv/Q
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
         "]], 
        Polygon3DBox[CompressedData["
1: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
L+JZiN5U/TGBZazRWKvtLfkTGdd5S/JRgd8Faz7WfpXQ9/4cNjOd6/yCx9Zx
oj0Zn3T8YxnP8at0/LkFj6UjRS14/5LfKdkdoqcl30b8rIzfwWLx+Uo03qlu
Z+x1BY+9Y0R76L9tqz52tugp1a2vWF/YUbIuqr+d5HdJNkf0jGTbi7874/+e
5XwFz6WHiN7V9zdV9/dnzDoquuq2BY/dPUXvSV6n7+Bx6YNXip5ivBC/UOVR
oicbvH5mrY6NKKf6CckXSzZe9LTkSfFPq3y1aIn4zXQ903QtHfT/wbre/3S+
+ZJdJnpC8s0ln55xnUd0vasl3zptm/WNkt9XsC+hl2iw+AUF+yKOFZ0hfn7B
vpNjRKeLf1v8FmnbyG8Q/0DBvpSjREPE3yP+cpUPFp0q/t6CfSuHigaJv79g
X0pv0WniHxF/u8pDRWeJ30LXe0vG17yQ+QT9QOc7X7RI8j9Kttceqmdzue63
ovv+Lu1ntILvW/wKlaeJloovlm3PPEL1R6Cv5W0/nR2tv9Nl2y97qTxc8rKO
35D2O3pFx8fEP6TyFZxDfK5s++nhqn+F6qckf1aya0XPSH573r6d9aIhqvOn
rn+GZKeJFkqeLtr/Mln0LPdT8LWeKnpE/D/i56h8Dtcg/m/xs1UeJnpM/F/i
Z6p8huhR8YHa+zHtb+JV8fMkvwBfiOgU9AHxU1Q+mWcs/gBd/27qa8N1bRN0
/Q163jvrWe8kulvPuyC+icrb06foD1XLduSbr3hdx1qrpegKtfG42l+Q8js/
T+2/Kv5flZfjY8OfJX5eytd0Ln1Q52+mYy/XsVfp/EW1v0PG57wTf5/qJ3Uv
K1X/at6n5I0k25oxt2I7D/ae1qIRaiMr+TYZ17lN8pU6PqPj38Tnp+NfEx/n
2YifIP4t8Zum7ZO6XvzD4m/l2xUNE/+o+Lu4VtE54mcX3BdYYx0v/taCv2V0
9mOQ5237/k50BvaFgvsSOn8/ye8q+NtuKxoofm7BbXfinYh/SPx0+oboTPF3
iz8L34joJPF3FPzuWAOdIH5GwX2LNcDR4m8p+F2zBukr/s6C20JHPJHvseC+
yZrvWPHTCz43a4qjxM8p+N5biQaIn1lw32QN01/8QvF3pHxNZ4ufVfBYwJru
OPpD1WvZbRlz9fyz+h5fT/ubf07ykvj1aY9xy8UfVbB+uLkoZLwrWBf9UeNj
Tnyfguezkqgivm/B67WtRFXxRxQ83+aoI/7wguentKhBfO+C57+iqCy+V8Hz
e0JUL/5I8QeoHED0n7LtF3307kbpe3y1bH37d/F7Y58qW//9S/y+4nvo+O10
7Hf6L6vj3yxbX/5T8paSdy/4Wtfrv7TkBxesm28Qn+H7L9g4s0L8v9iHC762
18X/h3204LXqL+Lzqt+z4PmeY4ridyxYvz9V9An2lMC+Weac9zU2Thf/T8w2
Dmwdt4j/N+b/PhLfpGBdv7/oIx1/NfbzuG0y2B9nqP5/MR/zMbbTgnWh31W/
oPM3LXh9dI7oc9XfpeD1IT67deJXlr0++EPlffQ8lpe93vxN/F6sBwpeixwv
+lj/XZe3P2ZuZL/aueD15Bmiz8TvVPD66zTRp9ivC9ZfeAeb6HpCfV+/pD0G
v8b4VvC38bbqx8XvX/C38Yb4mPjPxB+S9hw2U/xH4tunHYNwi/hPxHdJ2+Z8
q/h14numPWfeLv5D8W3SHmOmi39X/C5p+1Qni/9YfMe0YxxmiF8rfse0faI3
i/9UfPe0x6DbxP9e8Fxwkuhh8Q26n8/TnnNeFl8v/tO05/Rl4t9R/e3T9mFO
Yn6T/L2058iXxOfFv532nPGC+IL4d9KeU16kv4p/I+055Hnx3Qrui5/r+aTE
vyd+j7TH8Cni3xe/d9pj6FTx0woem7BRHCl+asFjGzabPuKvzdu+Oyeyh08p
eGzBJtRb8q4F9813dL468QcV3Bc/FJ8Uf2DBff898QnxH4jfN+05YRr9qeLr
m8O71fdUKtte2lvnGin+c9U/Im2b2yzV+UL8kWk/s9niJ+LPitvmiH3+S8mP
Tvsd3SH5evH9036ndzIe5u0b/kR0muqfVPH7u49vTed7Sv3lesmuE9XrWnqK
3zuntYX6zkk1+zvwdeHDy6Oz6PlfntV9iNpgDxH/pMpXiXqI7y1+XcY2sTL2
PvRfyR4XtVXbE6suLxK1E38V9iuVHxW1Fn8t+rbKi0X7ib9M7V2i8kHIsVVj
/9Xc2VZ0HTZ4yc+irmhfyUdjf1R5gWgvHT8K+2DW/+0pfrjqj1D5UK5H9d/C
vqy29hNdr/bGYw/I+ppasdaUfIhkrUTX4g/S8e9mrEM36Ph99My+1rO7uN72
/HtUf03cPhX8DXuyRlP5onr7A5hvnxA/LvI3N8Nup7a2En2hd9Jc/OEZ6wRf
Njg+5SnVnRC3v5t4kOfifmfY14kXeEzlMZF/50rskbr2h0T7BI6feVGymyL7
9s5qv7PaLok+Q9+S/K24fTr4Y5qyzpNsc9HnzPeSr4rbJ4R9+17x78Zts8e/
tIvqd1PdTUTr0Mcl/0CyeyL/xN3iX4vbR4S9nHiYZ1S+Jm7//ErxJ+DrEU1k
PK363fNNddD1j1D7Y1XuLWqv532h+EHcm2hvfDfih/Cu+E/8a2rvmDrbWCeo
va0KHus7itYw/qr9LVR3S1FC7R8tfvOs/6sTP7Lob/kovim1N0r8RJWP4XrE
X1P0tzpa1J3vu+hvjT5xkPgLxJ/Mt8b3J76/2t9K5a2JaVD7K3R9vevs8yJe
YqLqP5z1N9lN9Y9S/U1V3iyLw0PjL/5I1e0luhl7p+TPSrZUdIDkN4p/Juv/
9sd2gj9GdTuJblD9S9X+uZJ14hmp/TX4gyQ7UHST5K+LP1blpqKrxV+v9p5S
3ac5BluJ5IMk20d0DWuGou+9F/1X7Y2t+lvjHlqq/sWSD6VvwUv+no6/CtuY
aIqO35wYHsmuV71nVJ5U9b08J+qq42+o+tzU6Sz+fNUboPLuPFO19y7+1zo/
w8lqbzX+LJX3F92If0r8CJUPFU0Sv6uO75Oxz2K9vs/dxPfNWGf/ivW5+MEq
txR9K/5Q8a9lvIbLoz+IX5WxzaQg/mVinFSOl+zfaKvv6wt9W1skPf/sK341
uk/S83dPHf9Wxmv6oo5ZoeOHq1xXsv29l+RrMrYB1NOm+FcyjrHKic+pvebo
I9hYWC8wX4v/FZuD+DaqPybjMeNXne91tT9S5UTJ/oDhGn/iqv+C6u6I/qf6
yzKOEcyqThu195HkYdLzV1vJx2X8zH5jvcd8jT0WmxQ6ovg30QWT1keIZ7xY
/H2Rvf1anW9/lZerfEPN9oPR4h+N7L//Ej+g8ptqbxE6ls53Nut/0Q9qr534
CRm/o9+Z/5l/VX+I6C38X/jj6zxmTBf/gc73h2T/YFvW+fYt+v0wJv2k4/fR
8SuZm5PWT0eqflL8i+hmqt+q6PfBmPez6u+t+q+ieyWt36bEb4vtGJur+NZF
P1/G7F9Y36Ef4V+QfCnXQ/xFnfvUNPoL/hh9u/fxDet7bqX6a1W/Pmn9Yauy
x9dz6u3/34EYG7WdFn2MPUPtfRv3nMH6bPOyx9Oz6+2ffL7s9/er+Jux96v+
n3GP+cRLNin6206IPmI9LfkPcc8pxDvuKHk7vjXRJ5K3IOZI5RaiDdg7VP9j
1b0/0h92KvpdFUWfSp4KNVfW2UZ7iq7lgbznu0ci+8Eeqn+K6u4l+kb1dxff
L+M1+9fi5+c9fzKHEe/2XN5jTV20Pp9csf64Gl1L9/eQ5D/HPYcQTzmi6md7
v6iFnu92RV/7PzrmAx2zfdHnJkDqQ/Gt9fzf1/MqJ62f7S35mRk/g+/FtxR/
XsZz5I+s18R/krGPsaT+Mq1i/XYNuif+fV3PxDrPOVPrvT65Tu0vjfwR2NdG
qPxw5K/CH3SVyk9G/om91P7pGb/z7xpsDx4r2aLIP8F640b6b+T/eFjn+y1u
HWBY5G+aKNmSyL9xpJ7HJlnPIf/hKxRfUrks+l38aJ1vUtZjakfdz8fEe+ja
V+ET0PHtVf9PXctfvF/V36/q8t/oC+I/It5DdV8TzVP9xyQ/VPriYaIh+NZ4
/5Jtqet5WvJfeb/iG3GN2FuqrttTdLrqv5C3LkfMC/HCT0neW7I+orPwFeuc
/zFe61p71WxzxvY8l7lK/NNV1z1SdLbqLxTfQ+VDRIPx3fH9qn5V539Kx3yl
9up07zuqvcNZL+c9NzURXVXvmENiD3eS/AjicfKODR8Tzb/Pq/3+avtY0UVq
/+W8Y0kviebT5yTvl3OdCwPP4czlzdVeH7X3j9qviW+Grix+gOpvL76JqKi6
J+v9NFb5W91zY9V5Ke+5nBhy4qF7Vv0uK6I/1NZS8cfkfM4LdPzyvGOhR0bz
Xw0bmeqegJ4e3W9fdKNoPkYfIXZzXDSfLlZ7h6utI0Rnqr0nxPfK+b+h4pfl
HSt7YTTfPit5X8mOFp0n+SlF38sPzLm6/mckPyrnOudK/k3e7+9P0aP1bo+5
mxhb4m/Xox+r/C0+F9Y36Ld1/oYexB7J94++kvD892LeujsxM8Src//M/cRI
EQ++IW/bPMcsrLcfibGKb3SB+E+Jf1J5jeg+8d+jD/M9Jjw/fZv3t14n/jHx
3+XdV1LiHxe/Lm9f2gf4wMR/lrcv713R/eI/IV6qzm3eK/7zvH1zfJPz6/1+
iXU/L9LXvsrbd/WD6GHsKXp+9Vm/w1/1vqeI31XPcjdRdz3PyeQn5PxfN3zX
ed9LQdf3hI7vKPk/ehf/os/r+FP1fnZSWz9jI9X7+THva21Q/cWq/1Pe91Jh
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
cn4puQr7xp3vy/pvJeNvne0ls3V9K3Rtr4g21/U9VrRtY2vWuyXrBOgGl7J2
IP+gaFvF9qLz9d89Ov4d4qVFO5BvHDi/mjxr8n3uDZ1rTp0dK/4eWDvvmrA9
+OGidf160TC1t0DHX6Hjh4v+Fr+waF11U+wj4u8IHUvCNW9Bfq/qj477nCTl
PVq07WQL0Tmq/0jRulIVewz6b9G6VR77APpU4HMx5/xVss6F/DKVT9X1zwud
G0+f2578Znw6cV/jP6pzZ+BcoqGir8XPYQ6IO8aJXNGFgX1bXGNc1zc3cK7I
uaIfJL87cBmfLbk5dwXOZaKNb0tevzO3T6+zveq+0LlS74p21vXMUv0hcccQ
fIH+Fzj3if++JF4171gEckw35o8H/ja5h3+Z7wMfSxwC+TdD846dI6eV/Od5
kl8Qd4wAuZt3BL5XfLhf8f4D9z3q/Cz+6cB9B58wvuGJoWMFR2BvJ79L/E0q
30j8R8X5zhfoW5iXcPz5hcQPaq6YLdoBf4raOFCyVyS7Udd3vuQzs17jbC95
A/E0Cc9p+Mf+yds+zjeOfeOiqttiDbWj6v8neT7hMRX7wnRiStGfVG6m9m8v
21/wuvhdxX+A/17fwxzRNN1fj7L9SbdIvq3k7xBPlrMONUnyKZJvoeNXSN4U
f2rZ8+Ub4ieJv7Vse/xr4ptjfyVeQMfOFk3FP0T8Ts4622T8T8QL5DznTyk5
3/GYmHNiyZfcX3yLmG0K5G+Sr9s95pwl8i3JZz4q5pxa8jdLBfs3eObkl3eW
fNeY5yTyI8mP7RVzDiHxj2uJ58tZ57u55HzaA2POySK/k/zfTjHnUJG/ukr1
59N/RNeo/nfiN1edz8XfU3L+7P4x53CR//mD5Nvovw2S31dyPnDbmHOkyHcl
n6pVzDnb5JeSX7xfzDlV5Meu0fEv6tibIPqL+E1U51Px8/C3i1+o8ijRdeLr
mYd172clnN++RcGxLm2i9cfmBce67Bv5ax6u2P7/V4PjO/H74dvDp3pIyWsA
1gKHstaV/NGK/XF/NzjemDUKa5XDGFvEt9fx12TsQ/hDdcaV/T0u07l2qfGS
dI0Jz+HYs+rEhwnP2dh/0UeJPdo7shclC/5+mbOxTy+o2P/xZ4PxLsaU7a96
SbKdxScK/j6Z87FvlwvuX/jAwPNYRzyjntXTott1zZ8W/W4eF90m/qOiny3v
+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
smGTf4itYf+ic0vfyzj+mrxBcgNXRPGS2ATwqZBPi60A3EKwB1+O4h07FZ3b
+kYUz9ml6NzId6L4S+K7aZv5D38g8eyfZxwjjD9zdcXvN6Xy41H8JscyP+LP
B4cBPIb1UbwAOAvk5tMG8fDgYoA98WkUT7a24u8nrfKimm0m+MTAC8CW8n7F
31tG8ickWxnZ/MEXuEPyKWrvXXzLOetf08Sv41vJWX+ZKv4T8bWc9Zsugd9f
v5Ljb4lv5tt5JlqPE797ZtY2JPzfxNefnbVOhv+ceOvTs16T4V9vGvj8vUvW
94nPHpy1zwL/OvHQp2Ttc8N/foP4ZVl/M+h/++levte9bJ90PhLPlBjU8Rk/
a/AVn1d/fCFl/LzHao7ROz/j/GLw9ZC9KDqQ+b7mnJpf08YveSKyGVyb8bNM
lhwze2XG+b5HlBwjwP3tFPgdEIN6dcbvhvjp87L2URF/QP7D8Kxj7In3Jl58
QtYx0z0ifZG+0zvyP6B/0hePiuy96Kf0xf0i+yn6KH3pmMgej/5MX2kbrVfQ
H+lLxGCdG+nL9N19ovUg+mYqZ5/1GZF+Sl8+NLLfop/zbRCjMizSd/kWDors
ueRDjMw654H4c+LtGYvIwSC+g/yLS7POoSC+A7zK51J+J+BdEg8+JuscD+Lh
bxT/StZjBvo+8dsDs/Ypd4z0a75NYhSwR08Svyrre0BfBqOCmF3yycCuwD7A
2DxAVK3Yv7dv0joA/rh/q85/Yg5nLl8peYe0c5iOUf1iaF8LOvUZ4BVULWMO
Zi5+TfJ2abdxlOq/HloXoI2jxcdrzp8ij2ou8XtV508xBzEXLVf9lmnn+PRS
/Ub1xji7NcIXqKs5n4e8nnkqf6L6fdLO6Rmm+h+jr6T935niEzXLyPu5R+XP
JO+bdo7POZJ/iv6S9n9ni/+Q+RPdRnR6xRhkYKrdFeWng/EFZtr8CE/io9B1
uaYzVP/l0LoJ99AT36H41mnfY2/xa5hPVe4mGij+LfEHqNxVdIL4t0OXDxSd
KH516DLHDBBfqDm/mTznh7D3hm6LHCRykcCcAvPt9gj/gXzaH9LOCZ4j+d9V
P1t0OHQ5MJvAfLsjwmv4QO0dlvY7Og3/emhdj3s4Qvyq0LpWZ1F/8W+ELpMj
dywL+5rL5M3drfJ7kvdIO8fuVMnfRR9K+79TxL+Jvpr2Mzhe/PvoF2lfw2DG
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

         "]], Polygon3DBox[CompressedData["
1:eJwV13d0V+UdB+CbhCQgkICyQWIwrFhkFAvFgxXQHmsEEwgCCeqpggMJoCw3
NMgSBemxCpWKoMhoLXsKlaGsQNgrgLTKEAnDBAIy+7x/cHLOk8933Pfe3++G
1GcGdh0QG0XRHP/i/btZLYrmJUXRuYpRNCghinpUjaIbbC47y/JYNtvOGleO
opdui6Lz6nYnR9EfWJqfOZXUJEbRCbm46lG0UO0ltePVDmI75JqqzVN7Se1B
NdtYI9aPFbMd7Dqbo7ZYbT+1WWon3hFFDVhPllkuimLZGbltaquwP8ZF0eQq
UZRg7h65mnZJsMtYuZ/lCuSS5TrJTZSboF+qXA/WWb9bbASrz7LZg6yEnVNb
prYdO6b2W3ae3WAd2BV2lBWyJqy/6yhxHftcR0E4F/YC+4F9x9JZjJ9t7PeW
/QrsV8HO+82tw5LZB6yZXKxcWzaSFbKrbJzcNnNL3bQH2TU2nm1nZawTi9Fv
Pitlo5xfP1ab5eo3Xb/S8lHU8fYo2qK2gf2es98R+33j91vZ3ex5doytZ5Od
y9369dKvm3OJ1+9XubGsgF0wtz17U+5O1o21lzvvXGLNXcAusjF2yZO7onYM
28rOqm3HPlSbxnLYE2rLsxZyceb/3s6jnMEudsnen9pvr/0GeoC7mVHdjHS5
AXIdXFuZXFv9dsol6JfmHs2Ua8UKWTlWn01jtdRmq52itkhtU/2by22Xi5Or
KzdV7qxd9rCa7Gk2j90nt4PFs1Q2nf1P7i22zn6N7fcAu01uFjvMxrH+bIk5
j7PRLDPGQbMUuc3sJiuv3xhWm21k11ksG8lq2rmlnYfaOcfOyXo1kNsid0uu
otz4MFeuyJnWl0txfp85l2L77ZarYefecrPlurN79PuzXA39bspt1XOw3Fz9
9tjvTrka+rWQGyLXQ66SzHG1n8kdl5vt2nrKfc9fZwvCZ1rt78Jnhk1ju9mL
cp3Zj2pHsA2sGXuIlXMdn7NDLJ89x0rU/oPtYf1ZJqtklyOu7S67NHRtX9r5
v/q9KbdWLk3ufrkTbAY7weax3DBD7SK1Zc7gPc/kYLVF5n7FfmQZrC/7Qe3b
aterTVfbQe0mu7zC5rCdrq0OO8xeY/PZafZbVtmMo/ql2q+J/ebqV5EdZims
AfucbTL3S3bE3FbmPsYS2Rf6Fek32twX9avHNrEbLN59G8X22C+DTWKvmHve
vanFrunX0oznzVgavjtZL7+bxL5239rb9ySbqfak2q/MeEq/jqyhXK5cJPeT
2nGsB3ufLWVt1JaE+2bGBjvv9flNlZvAespNlFsh104un3VnE9h81pJdcB27
1CayQtebr/ZC+MywdfoV6leXLWEj1S6Ty6jgWtQ+HN4VrDeL0++M3Bo2iq1k
2XKD5MrYO/pt1u+Ufq3D9wbLZxvZUZbOSsMM9i07wNLY2lCr36rwjOs3WL9H
wjuPPRneKeaek6vmXjZleewBVsp+Cc+Lfuv126VffXaR/YV9x4pYYxavdjG7
zCY5g2FstNwT+r2n3yL9Wpt7iHVzjz52jya6vxXdoyS1N9V2lJvp/q5RO1Pu
DbULWVs7Z6udzl5nC9h9LItNZa+yf7PmLIMNYVlsLJtubiqrYkbEHmJzzNhg
xunwt4Bdztplo+dluF0GsMflRstNVVtX7cssk41h01h9tjycAVvOupjbj3Xx
HJTq19QZfOF5Xq3frPD5lVskd79cD7nD4RmSm2ruh86gqlxV+8XL/Sk8z/bb
b7+z4fveuSSwAmc6gk1T+5rcfNZKvy76vcS6sHfYR/arxeaE548tDvdSLocV
sWxzp5g72dwkcxeG515uqdwjcn3khrOubFy4H/qlsVXhWWMrWJZcHrvDzoks
g62z8xH7Zdi5xIwmzmCGM1hpRl92lbVga9g+tit8P7OBdrnm1nyvzxE2lK0M
3/fuRwO5GeFZZW+zNnY+JfeMfr+y5vqt0m+3XG92mTVjS9g2tlO/dDZA7RUz
DqvNl0txpt3D303eyZfkEl3HXlbLdVRwHe+6jmPhuVK7Wm01u9wT3gFsOPua
VWVN2G72KJsY3t32KzYj0u9f+l0wY5j79qR+1eWushZm9DFjEdvLHlP7gdqh
akvUHmXD2CqWZEZDM8rrt09tbbWV1L6v9pbcP9l5MwabkcP2h+dA7V/VvqHf
Ff3qsutyrdT2U7tCbh/rLDdZ7lW5S3JPsXv97BPeq+55Yvj+d1b11HY1o52z
KrbLC+ya2pZsrXM+yA6Ezxv7W/hbQL/48E5hd7E+bL8jWal3OXZQvyQzTtn5
E7v8Xb9GrHd4d5uRxC7LjWZb2M++X9qwLLmL+qWz2eZ+Y8YwVlcui7VRe5rd
7qwSzHrUjP+43kNqD4bnWe1Hdplgv/JyT6u9wu5Vu1y/HexhdoE1Yp+wxSxX
bTP9ntWvnnMpF/6GkKtjbqZca3NPym2WS1Xb14xDrne1mo/lGsrlyvWSq2iX
n8L/A+SK5Ta4v0PU9mS/Cc+1GbXNiAnPvNpf5Bqr/dQuy+ROyc1mZ9SuVfsy
i2EHzKis9rgznWLGRpYi92z4O8cuy/ROdi635DrJzXIua+X+Dyzn1LY=
         
         "]]}]}, {}, {}, {}, {}}, {
     {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl08dOVWEUBtANiDQBkQ7SBEXpiDHGGGOMsQ2dC4KiMx3b3kHp+A62Z1Ca
5R0Ujb2bKCDF9etg3S9fbgjn7L1v09CVM5czIiLDR2ZK9nGJOzwsjnge/7/o
47V+UU7zjMqtERtyrz8e5rQ+JZ+yzk29NyviApM80J/INXo2RbzSz8sJFlil
OztiiHEqSiLm5R+6Nkec0gflGHPc0FdkZ07EOe7ro3KWZRb1jtyIAUYo3xYx
I5doz4s4qffL2zzmN0sss8KbLf63XGWNt/q63CDyI97pGTKTLN7rm2Q2m/mg
58hc8vio58sCtvBJL5RFFLOVErZRymffl8lyKviiV8oqqvmq18hatvNNr5P1
NPBdb5RN7OCH3ixb2MlPfZdsZTd7+OXdHnGLq+ZzVral2ZjZcf2xvE0/pXp7
mqdZz/DCvEfkAB3c1ZftZ5ZRrunn0r5YsdMT+pwcYzDtOO3aDcwzTpnvh9JN
pNtwMy/dy4Kc4Dz39J50T27tCdf1SXmBXk7q6+7zKVOU68PpXtmwwkX3/ExO
c5E+9tJLD8fMo1t20clRvUO208aRNDO5m1YO67vkTlo4pDfLHTRxUG+UDdRz
QK+T26mlhmqqqGR/2rsspyz9NtNdSGOPkvSs6Wak14ii9Mx6obTWKEjPnf/v
TCOdqzVFh2ItYfyRnd5BN9owwn+//785n28R
       "]]}, {Line3DBox[CompressedData["
1:eJwNz9VNBGEYhtGfAggJgVsSLmiIEihgl8Xd3d3pAXeXNRZ3l0o4F5Pzzvck
k0xhSbQ4khVCiHmWc0Koyw1hifVcYQNXWZAdwhobva+ziRuM54UQyQ9h0252
22ILt5nQotqO3eq2yzbuMamVavt2u9sBO3jIlBbTjuxOt2N28YRprUw7tbvd
ztjDc15o5Vrc7nVLsI9J9jPFAaY5yAsOMcMi/3fJYe9XHOE1M75Z4Zs39qjb
Lcd4x0utUru3x90eOMFHXmlV2pM96fbMKb7wWqvWXu1ptzfO8J03Wo32Yc+6
fXKOX7zVarVve97thwv85SL/+A+ICFSQ
       "]], Line3DBox[CompressedData["
1:eJwNzzVORUEABdDBnY82ULEcOsISWACEFpd94O7uzg5wKXF311O8nDv3ZjJ5
BSVlxaVRIYRy33EkhKasEI7YzBO28JR5uSG0ymdyG8/ZzgsWpoVwyQ7nK3by
mhs5IVS4dyN36W7ZzTtu2ipt93KP7oG9fOSWrcr2JPfpntnPF27bqm2v8oDu
jYN8546txvYhD+k+OcwvjvCbo/zhGH85zj/muzchh4wQJhnFKUazyP/FcNo5
ljOM4673at2Ll2d1CZxjIvdsdbYkeV6XzAWmcN9Wb0uVF3VpXGI6D2wNtoi8
rMvgCjN5aGu0ZcmrumyuMYfrzOU/y9VOSQ==
       "]], Line3DBox[CompressedData["
1:eJwVz0VOBFEUBdDPAkgIwWkad3d3HbMEFgAhYcYUZ1u4u9O4b4JTg8q59W69
ql+FUzOT00khhFlXZkoIG6khZHCTWdxiNmPpIWzLOfIOc7nLGPN0e3KevM84
D5jPueQQCnjovpBHLOJDWggL9orlY7MSnrCUj7pFXZl8albOM1YwoVvSVcrn
ZlW8YDWfdMu6GvnSrJZXrOM163nDBt6ykXdsYtzevdwcnY0t0TnYynxdQm6L
vsF2PrOD8/6vky/uu/jK7qh3lhV7PfKbWS/f2Rc9q1vV9csfZgP85GC0r1vT
DclfZsP85kj0Ht26blT+MRvjL8f5xwn+AyxSQYE=
       "]], Line3DBox[CompressedData["
1:eJwNz0VOQ2EYhtEf12Jt5xRZDO7uxa24bwFdATNWhia4O5xBc577vbnJbSK5
0JpKCyEs+dWWhHBdFkINb1jHW9azPB7CnW7Q92zkA5uYsD3qZv3EFj6zlRW2
F92mX9nON3bwOBJCJ989d/GD3TyNhbDrvR796dbLL/bxzLZn69ffbgP84SDP
bfu2If3rNsw/jjBEQ0gyjaNM5xgzOM5K72XqCZ3FSWZzilW2HD2tcznDPM6y
2pav53QB51nIFE/8vwVGPC+yiEu88J0H3lvWxW4rLOEqL22HtjVd6rbOMm7w
ynZk29RRty3GuM04d/gPMCA8Wg==
       "]], Line3DBox[CompressedData["
1:eJwVz9VNRUEUBdChABIS3Hm4uzstUAIFQPjH3e3xcHcvhD/aQHpg3Y+btWf2
PTOZ2MjY8GhSCGHcN5kSQkZqCBPM5BSzOM3y9BCy5Rk5h7PM5RwrdHnyvJzP
BRZwkZW6QnlJLuIyY1xhla5YXpVLuMZSrvMzOYQNlllvRvdzi99pIeyZ247u
tbcT3cFd/ujiur3obHtxVnOfNUywlges4yHreRT9Z65BPpYbecImnkazumb5
TG7hOVt5EZ2na5Mv5XZesYPX0R26TvlG7uItu3nHL++7Z4/1A3v5yF9v2Df3
JPfZe2Y/X/inS+he5QF7bxzkO4f4wX/EiDgL
       "]], Line3DBox[CompressedData["
1:eJwNz0VOYEEARdFiASQkwALYAC5zGnencXcLm4FloN24u7v7BmDEjAFn8HNu
1UsNflz7SMVwRAhh1DcZFUJmdAgT/MMpZnGa8bEhZOsZncNZ5vIfE2x5+r/O
5xwLOM9EW6Fe0EVcZDGXmGQr0cu6lCss4yqTbeV6TVdwnZXc4HdkCJusct5i
Nbf5GRPCmHc7usbdLmu5x7/cZx0PWM9DNvCIKd416mPdxBM285SpthZ9plt5
zjZeMM3Wri91B6/YyWum27r0je7mLXt4xwxbr77XfXxgPx/54/+eOOD8zEG+
8Mv/jXv3qofcvXGY7xzhB38B219IsA==
       "]], Line3DBox[CompressedData["
1:eJwNz0VOBTAARdHiDh+bw4gt4LoDlsACcHd3d2dvuLv7GTTnNi9p0vy6htr6
qBBCk3MUCaExO4RDNvGYzTxhYW4ILfpUt/KMbTxnka1dX+gOXrKTVyy2delr
3c0b9vCWJbZefaf7eM9+PrDUNqAf9SCfOMRnltmG9Yse4StH+ca89BDeOeb+
wXF+coJfnOQ3p/jDaf6y3Jsz+k/PMmSGMMcoVtjmdbReYAwXGctK25KO08uM
5woTWGVb1Yl6jUlcZzKrbRs6RW8ylVtMY41tW6frHWZwlxEW+F8m99yzuM9s
HjCH/10qQ6Q=
       "]], 
      Line3DBox[{1276, 1277, 1278, 1279, 2952, 1280, 1281, 1282, 2953, 1283, 
       1284, 1285, 2954, 1286, 1287, 1288, 2955, 1289, 1290, 1291, 2956, 1292,
        1293, 1294, 2957, 1295, 1296, 1297, 2958, 1298, 1299, 1300, 1301, 
       1302, 1303, 1304, 2959, 1305, 1306, 1307, 2960, 1308, 1309, 1310, 2961,
        1311, 1312, 1313, 2962, 1314, 1315, 1316, 2963, 1317, 1318, 1319, 
       2964, 1320, 1321, 1322, 2965, 1323, 1324, 1325, 1326}], 
      Line3DBox[CompressedData["
1:eJwNzzVOAFEYRtHHBkgI7u7u7tazBBYAoadjE7i7uzsbwrXhFJPzzX+TSSZz
cHhgKCKEMOKJiwphPjqEWC4wnotM4GhkCIlc8p7EZSbzOSaE8dgQUuwVt1Su
Mo0v2oSWbq+5ZXCdmXzVJrUse8Mtm5vM4Zs2peXaW2553GY+37VprcDecSvk
Lov4oc1oxfaeWwn3WcoDlvGQ5TxiBY9ZyTH/V8UT79U8ZQ0/fXPWN2vtM7c6
nrOeX9qc1mBfuDXykk381ua1ZvvKrYXXbOWPtqC12Tdu7bxlB3+1Ra3TvnPr
4j27+actaT32g1svH9nHJ/bzH1mqQD8=
       "]], Line3DBox[CompressedData["
1:eJwNz0VORVEUBMD7kSkJARbAXiDB5ePu7i7rwW0VuLu7swesBp3q1yd38FIb
+6K9kRDCgGQmhrCaFEIG15jFdWYzLSWEDT1H32Qut5jH2YQQ8rntu4A7LOR3
cghT3kX1XVsR91jMH7dptxJ931bKA5bx123GrVw/tFXwiJX8c5t1q9KPbdU8
YQ2DfU5q9VNbHc9Yz3M28IKNvGQTr9jMdO+u9Rb9hq28ZRtX/F8773x38J6d
jHgzL136g62bj+xhjH1BevUnWx+f2c9Y+6IM6C+2Qb5yiHH2JRnW32wjfOco
4+3LMqZ/2Mb5yQl+cZL/R9dJ4g==
       "]], Line3DBox[CompressedData["
1:eJwVz8VRBUEABND5uMMvIACSQa6EQABQnHF3d3d3S4QbKeDu9vbQ9Xp6a6pm
iyqqyitjIYRqqY2HcJkfQg2vWMdr1rO4MIQbvUG/ZSPv2MQS3+71Zv2BLXxk
K89zQmjjk3M7n9nBFHf2pVN/sXXxld1MtR9Ij/5m6+U7+5hmP5R+/cM2wE8O
Mt1+JEP6l22Y3xzhD0f5yzH+cZyhIIQJlroX0yf1BE4xkdMs8y1Jn9GTORu9
n3O88H/z0ZudF6L3cZEZ7hzLUvQu23K0cYWZ9hNZjbptjVlcj7Sfyoaebdtk
Dreis/1MtvVc2w7zuMs49/gPkCJGCw==
       "]], Line3DBox[CompressedData["
1:eJwV0VVOg0EUgNEh4blocSvu7uwATVgCC4CwMZy2UNzd3TdCwuHh5nxzJ/Py
/7GpmcnptBDCrJnPCiE7N4Q55nCBuVzkcDSEqF7SeVxmPlc44q5Ar+pCxlnE
BEfdFeukLuEaS7nO30gIKZY5b7Ccm4x4EzdbusJumzHuMMM+YXZ1pd0eq7jP
TPukOdDVdoes4RFrecw6nrCep2zgGce8a9TnuokXbOYlx9216Cvdymu28YYT
7tr1re7gHTt5z/SMEB7Y5fzIbj4xy5s186x77F7Yy9f/72+/bt50n907+/nx
/0/sU+ZTD9h9cZDfHOIP/wA2Rz/f
       "]], Line3DBox[CompressedData["
1:eJwVz0VSQ0EUQNEO7iEhgTEzZmwAd3d3gs2g2B+yFtzdnfMHXef+96ornerM
1shmLISw7RwmQqhLhXDAeh6xgcccSofQqE90E0/ZzDMO27Xoc93KC7bxkiN2
7fpKd/CanbzhqF2XvtXdvGMP71kTD+GBvb4f2ccnptzZcZ51v9kLB/jKtPmu
86YHzd6jd/MjeiM/o/fwK/ptfnOMP5HujetfPcE/TjIkze2mdExPM4szzOaE
3azO0XPM5TzzOGm3oPP1Igu4xELW+n9FXPZdzAxLWOnOnlOqV8zKuMo4q8z3
nXK9ZpbgOpPcYAX/AdBxPIk=
       "]], Line3DBox[CompressedData["
1:eJwV0EVOBEEAhtHiBCRkgMEZ3N3dDwAb3Fa4u7u73AduxmNReV/3n1p0x2ZX
B1fiQgjrTmJCCHORECKcZxIXmMzhxBAWdVQvMYXLTOWIbUWn6VWmc40ZHLWt
60y9wSxuMptjti0d09vM4Q5zOW7b1Xl6j/ncZwGH4kMo5IHnIh6ymFF3fpwS
feRdKY9ZxhOW85QVPGMlz1nFCfcudLW+ZA2vWMtJ27Wu0zes5y0bOGW70436
nk18YDOnbY+6RT+xlc9s44ztRbfrV3bwjZ3//8z3dfHdczc/2MMUd36dXv3p
XR+/2M9vDvAPNC0wRQ==
       "]], Line3DBox[CompressedData["
1:eJwNz0VOA0AAhtHhBCQEDsBpcCvu0EKNllKcDTuugLu7u+u9eIvJ+yZ/MsmU
RnOR4YIQQt4pLwphvjiEMi6wgousZLQkhCVdpZdZzRXWMGZb1bV6jXVcZz0H
bBu6QW8ywi02ctC2rZv0Dpu5yxbGbXu6Ve+zjQdsZ8J2qDv0ETt5zC7OFobQ
zRP3Hp6yl2fs4zn7ecEoLxlj0ptXekBfc5A3jDNlu9UJfcck75li2vag0/qR
Q3xihkO2Z53VLxzmK3PM2N70iH5nnh8cZdb2qcf0F8f5zQnO+d8kf9yn+Mtp
/nGG/7OCRBo=
       "]]}, {Line3DBox[CompressedData["
1:eJwV0D8oJ2Acx/HvGXTxuzsDknQdXRKSJMkgSZIk6ZIk6ZdBkn+DJMkgSTJI
km64dEmGGyQZbrh0GQySDAZJBoMkg0GSvAxPr3fPp57hyU8Otw99iIhRpzgt
4jERUcKUTxGNzOAPfmWSpRxhDafZxNysiEXdodfZxy2OMc+2p2f0fy7xlD/5
zXalt/U99/nCQxba0tIjznQOr9/v+MAyW6V+1fVMfI5oYy6rbT26SA+yipNs
4Dzbucpe/uYQdzjFf1zgMdd4wU02ePNW7+onHjDVP52w0ZapL3UB71jOZzbb
avXHLxEtzGYXv7PN1q8r9DjrOMtWdtqWdbf+xQH+4QSTtr96Th9xhefc4A3f
AG3fPHc=
       "]], Line3DBox[CompressedData["
1:eJwV0D8o53Ecx/G3DPI/gyRdknRdkSRJhkuXfkm6nKRLkvtlkPwkgyTpBkmS
QUIySJeuG26QZLhBksEgyWCQLoNBksEgiYfh2+PZ59V7+Zb9GP6WSouIEV9l
VsRjTkQV03MjEixgJ1OFEaU6qas4wkZOsYXz7OIa+/mbo/zgblf/1Idc4BnX
WWb7r//oe+7xhUf8aMvOjjjXxbx+f+MDq211+lV/YW5eRDtL2GDr1Z/0EOs5
wWbOsoPL7OMvDnObK+4m9b6e4wlXeckt3nKHTzxghv90yoS7Qn2ly3nHGj6z
1fZZZ+ZHtLGI3axgu21A1+oxNnGaX/ndtqh79AYH+ZfjTNr+6Rl9zCVecJM3
fAORbj2Q
       "]], Line3DBox[CompressedData["
1:eJwV0DEo5nEcx/GvMsjxKEXXZUCSDEjSdRkkSZL0JEmSJIP0PEc3XLquyyBJ
MkhIBj1JMhgkGQySDAZJBoMkww26ZDBcuu5l+Pd69/v0Xf5lw+lkKisiJnw1
uRGveRG1zM6PaGche5kuiijVI7qGk2ziL07ZOvSC7uM6R7nDbzzkNM+4yGtu
sNzdg97VzzziP56zypb3IeJGf+Lj+xtfWGdr1JGIaGWCSZbwi21IV+sUP/MH
2zjHHq5wmFv8yn2uuvupT/Q8L7nGO2Zs2/pJH/AvT5njX12xmPes4B/W842d
7pp1bkFEFz9ygJVM2sZ0g/7OFs6wm/22JT2oNznOPU5xxHasZ/UFl3nLDH/z
P58NPbw=
       "]], Line3DBox[CompressedData["
1:eJwV0DEo5nEcx/HvMxh48AySLt1gkGRAknTdIEkyCEmS5CSDeE66QZKuU7ok
GSQkgySJMkgyGCQZbpBkMEgyGK5Lhht0nZfh3+vd79N3+Rd9SbeNJCJi1FeR
FfE3O6KSGTkRTcxjJ7/mRxTpAV3OMX7md07YmvW87uIaB7nDads3faR/8JwL
vOY6H7jLZx7zPy9Y6i4nGXGjC/n4/sYXVtpqdCI3ooEptvMjP9n6dJlOs5aT
bOQsO7jMfm5xlAdccTelT/UcL7nKO27atvVvfchXnjHTv9qzXekCfc9i/mEV
/7GOyVRECz+whyVsdzekq/U46znDVnbbFnWv3uAw9znBAduJ/ql/cYm33OQT
3wC1MD7x
       "]], Line3DBox[CompressedData["
1:eJwN0D8oJnAcx/Evww3u8WegLkm5QZJBTpd0GSRJBkmSJD1JBj08lwx6kkRJ
kgwSkuHSJbm64UkyGCQZDJIMBuky3CDpBoN0r+HX612fvsuvIjnWlcqJiLRX
lxfxmoj4wg/5Ee0sZi/TJRGf9bCu5QSbOMuMrUOv6D5uc4T7nLdN6iM9x3Ou
8oZLth39Rx/whceMjxEXLOAty/jIav5jnbsGnVsQ0coidrOc32xJXaPH2chp
tnGJPdzgEH/yO7PcdDejT/Uyr7jFe+7a9vSTPuQbz5jnr37ZrvUn/cBKPrOe
Wdu7btaJwohOlnKAVRzlV06xhQvsYr+7NT2ofzDF38xw2HaiF/Ul13nHXf7l
f4EjPyk=
       "]], Line3DBox[CompressedData["
1:eJwN0DEoJnAcx+GfblDcSwaDLkkGXTIokiTDJUk3oEsyCEkG3l6SQbouUZKE
4RKSQW+XLsogYTBIMhgkGQySDAZJhht0nuHf86lvv+Vf3JNsHcqIiJRXmRXx
73NEFTMTEc3MZweH8yNKdL+u4CjrOckJ23e9oDu5zgH+5bRtTB/oKZ5xidec
s23oB73NVx4xIzti0Xauc/UNC/nIMr6xhp9yIhqZxx8sYp27Xl2uU6zlTzZx
ju1cYR//cIR7XHX3S5/oeV5yjXdM27b0s97nO0+Z7a92bFe6QN+zlC+s4p7t
v/6mE7kRLfzCLh7avupBXc1xNnCGbfzNbm4yyV1OsN/dsZ7VF1zmLdN84gd2
SkBa
       "]], Line3DBox[CompressedData["
1:eJwN0D8oJnAcx/EvGS5/npNikEQZJBkMXDIYJOm6QZJkkK5LBv+7brgkiZKe
hHTpSAY9SaIMktNlkGQwSDIYJN1g0CWDQV7Dr9e7PvUdfqU9A639aREx5NVk
RrxmR9TyQ07EZxawkyP5EWW6V1fzOxs4yTHbFz2vu7jGPm5z2vZDH+opnnGR
10za1vWD3uEzj5ieFbFgO9e5+obF/MdKLtledJ3OSEQ0M4/tLOFXVnGY9Rxn
C5Ps4G9+4yZHuc8VNyf0iZ7jJVd5x5RtSz/pA77xlNn+atd2pQv1Pcv5nzXc
t8XHiEadYCuL2M0/tgrdrz/xJ5s4w7+2Nv1L93CDg9zjGI85ywsu85YpPvId
4pVAfg==
       "]], 
      Line3DBox[{26, 77, 128, 179, 4041, 230, 281, 332, 4092, 383, 434, 485, 
       4143, 536, 587, 638, 4194, 689, 740, 791, 4245, 842, 893, 944, 4296, 
       995, 1046, 1097, 4347, 1148, 1199, 1250, 1301, 1352, 1403, 1454, 4398, 
       1505, 1556, 1607, 4449, 1658, 1709, 1760, 4500, 1811, 1862, 1913, 4551,
        1964, 2015, 2066, 4602, 2117, 2168, 2219, 4653, 2270, 2321, 2372, 
       4704, 2423, 2474, 2525, 2576}], Line3DBox[CompressedData["
1:eJwV0D0oBVAcxuFzk8F3kgw3dJMByWBAogxCkvKRJAMSUiRJBkmSQZJkkCQZ
JEkGgySDQZLBIMlgkGQwSDIYeAyn51dvneEf6x1tGYmEEMa88sQQfpJDqGBC
SghNzGIX8znEUk6yhvNsZjQzhFXdrbc5zENOMcd2phf0Ndf4wB3m2V71kf7i
OeOSQrhhoS1dP+pcvrGY3yy1Ver41BAamMEOxlht69clepxVnGUjl9nJTQ5w
nxM84RwvucI7bvGZB6z154c+1b+8Yoo73bPeFtUvuoCfLGMkzf1stTpNtzKb
PSxim230/9Z6mnVcZDu7beu6T+9yjMec4aDtQi/pW27wiXt85x9WtDx1
       "]], 
      Line3DBox[CompressedData["
1:eJwN0DsoBlAcxuFDMrh8JMogt2RAMhiEKIOQJCFJBklIbkkySJIMkiSD9CUZ
JEkGgySDQZLBIMlgkGQwSDIYPMPp+dXbfzl5fWNtozEhhAmvMiGEv6QQqpiQ
HEILM9nDqYwQCvWwLucM67jEVm6wl7sc4TFnmePuQi/rW27yiXsssL3rE/3D
S8YlhnDHYluafta5/GApf1luq9bxkRCamM4u5rPWNqDL9BRruMBmrrGbUQ7y
kNM8Y9Tdor7W63zgDl95xC+eM/ifG0b4yEZ3WfpNF/GbFYxN8X+2ep2q25nN
PpawwzauK/UcG7jCTvbatnS/3uckTznPIduVXtX33OYLD/jJf+WzPJk=
       "]], 
      Line3DBox[CompressedData["
1:eJwN0D8oBGAcx+FXknL+JN1gkCQZkAw3iIsySJIoJEmRhNClSzJIkgySJIMk
ySBJMhgkGQySDAZJBoMkg0GSQXmGt+dT337LW9Q/0T6eEkJIeLUZIfxlhhBn
JCuEVuazl8loCKV6VMc4zQYuctbWptd1H3c5xmPO8IJLvOUGn7jHEnfv+kT/
8JJpkRDuWG7L08+6iB+s5C9jtrhOzw6hmVF2s5j1tiFdpZOs4zxbuMoebnOY
h5ziGbfdLehrvcYH7vCV+7Yj/aXPmeKPbpjDRxbwjWX8ZjVTc/yfu0adqztY
yAFWsNOW0DV6lk1cZhf7bJt6UO9zkqec44jtSq/oe27xhQf85D8P6T3K
       "]], 
      Line3DBox[CompressedData["
1:eJwN0D8oJnAcx/EvSfI/OYNByGA40g3PIPlTBknSMyBd19MlXYjokmTQJckg
STJIkgyS9GQwSLrBoOsy3HBJBoMkg+GSDJfX8Ov1rk/f5Vf1dTw5lhERE15z
bsT//IgW5hdE9LCcXzj1IaJWj+oEZ9jORc7Zknpdp7jLMaa5aJvV53qJv7nB
G+7xkcd85U9m50Vcsc5dqb7V1XxiA9+YsDXrnMKILpZxgDVss33Tn/QUWznP
bq7yM7c5zENO85Tb7hb0pV7jX+7wnvu2I/1PnzHTH/1iMdO2a12hH/iRL2xk
VlFEB0vYy0oOsp597iZ1k55jJ5fZz5RtUw/pfX7nCX9wxHahV/QfbvGOB3zm
OysoPwE=
       "]], Line3DBox[CompressedData["
1:eJwN0D8oJnAcx/GvJHEekmQwSDIYJBkM0qFukCQMkqRH6dL5kyRJhqfrkgy6
LskgSTJI0pPhGSQZDJd0g0GSwSDJYJB0A6/h1+tdn77Lr3J4smciKyKmvJb8
iI+CiFYmEhHdLOcQZ0sjavS4buQ8v3GJKVuvXtNJ7nCSaS7ZFvSpXuYl13nL
FduuftJHfOcZc79E/GMp71jFZ9bzPxvdfdV5hRGdLOMAq9lmG9UNepat/MUu
/uEgt/iDB5zjMbfcLeq/epXX3OYD92yH+lWfMNsfXbCYaduNrtCPrOUbm5ix
5RRFtOsS9rGSI6zjNJuZYgdX2M+kuw39Xe9xhhn+5JjtXP/WV9zkPff5wk83
d0A2
       "]], Line3DBox[CompressedData["
1:eJwNyz8oBGAcx+FXSfLnlJDBgGQwSDIYJLkySNJlkCTdIIlDSZIMkiTDpUsy
SJdkuCRdBoMkg0GSwSDJYJBkMEgyeIb3fT717VcTn4olckIIM15nga84hCgj
jLGKI5wvD6FBJ3QrF9nFdS7b+vW2jvOA08xy3bakL/UG77jDZyZth/pDn/KX
V8wvDCFlu9cV+oV1/GQz/9jBgkgIvazkEOsZdTeuW/Q8O7nKPqY4zDQneMwF
njPtbk3f6C0+cp9vzNhO9Le+YG5RCLcsZdb2pKv1Oxv5wzae2fJKQujWZRxg
LUd5bmvSs7qdy+xhkoPc5RgznOMZVzjp7lpv6gfu8ZVH/OI/aR9AYg==
       "]], 
      Line3DBox[CompressedData["
1:eJwVzD0oBgAUhtFrkPwPkgwGSQaDJINBEjJIQgZJwiAJGSRJBkmSQZJkkL4k
w5ckGQySDAZJBoMkg0GSwSBJOYbbeeqtWzww3jGWEhETrjEjIiU7oom57GQR
+zmdH1Gux3UNZ9nMZc7buvSmHuQeJ3jMZducvtArvOUWn7hq29fv+oQ/vGR6
ZsS67U4X6GeW8oNV3LD96nqdmRPRxkL2sowjrOY0G7jIdq6zjwmO8pAzPGPC
zyV9/f+fD9zlK5O2I/2lz5maFXHDPB7bHnWxfmMFv1nLU1tabkSLzmc3SzjE
M1ulntR1nGcrV3lu69HbephJTvGUC7ziGu+5wxce8JN/PhpBew==
       "]]}, {}, {}}},
   VertexNormals->CompressedData["
1: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
d87s8obpgxw1UZEx6D0v9bQYrrfj3Tm0P665Q/8y4qrsjkJ274Q8ojB/I0PO
rz7rAj9jQqXazkUidnNfz/eYt1M0xEZSOIFbBE1yv0k4aqVTCKTB9Vy5nDoT
ZW8Ph8hz7pQ+CkVzTWuPLhP74S4VOaN8tnD0/rsqF/lgdMKYclSTmIvjUs9O
OViBUrxKyyRzIGqJb3Jxxjw34dmFkQ1zUCqOl/7H7I+ohG6WPSS8dCBfUXjO
BNwoage2rvuicJD0zCE88EFKxPbqXaBUdZd7kOONlD8uN9UQuS7trC0aNYAC
mX2N/AqeaGlpmLqN8K3jHMfX13dgqi8lZyHZDe2IsFnswXy+6shAxYIu/Gtw
8vA/7Yr8bVKmPmAe9/FhXXOdFnz4+tS36Y8Tko3PlCf2CTsCZy2vfbwFm3s4
7f7MOaCPIx/0hgkf3pCzM1NUg5J3/1kwsNmjoqYXt39hblDMTNlHpwKOrE4V
Xi62yPfHF2/iPEWiX9zC66Ay8ItYHN/zxxp5D6pOED6k/cQXuT/jBpxDHZ6P
he4haf3djwkfWjx9JnHIXQ7evxs7IdFmjlotPhwkfOgdWbWXsVoa/PJbXjv7
miK2omxKwodt+t2MnvxSsMqYcrXX2RjJTJpkET58o9yjx0YmAUlv35hdTTVC
thkD23P0WeOAw+deicFz0Zb0oWgD9ITRRY3wIfcs19GGDS8YOHnj3rcyHdRv
otvfQlzfWPKe5KtQuG6qL/OQ2RbZaKqxCBM5Vt89OiMnAbo9Fx69Z/dDm/ft
Yx2JOZSNOu88Vxbop+x7QFYfia4HRX5RxH3htSAny/k7D7wKOi70fEtE0+K+
5sS+0IV9XoYcOUVQpkluSRaTiR70HnluifNJY929B/SnSuGVs+CVNUM8T5mZ
nWLBHpDnbeO97lMGB9Lo1b9kFSCtolP0uTjXcU/d3mOIfRhM9UPoyZliVPA4
OUoLe6aa5eT7IO0yyNP22NeyVILqWlW5r2MfRudPds5KloKda1uawZ4yZPBz
z6AM5h1klS3VHcWgNdfEOexZhv5e19Y/i6+zB0ItGSiKQCQgVq7QtAw5NMfG
luG58lzano2lIwXAzLR0Mnm4FP13MqUvDnuMKswo3vJ8Hpyci0zJpypFUYlu
2dV43hx+uTI/KJkDI6OSuvrjxaiY3Cf4C85pDtf5p87bZEF8koyKZnoRMjWz
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
9+wUI+o3BvzTlT4tuEBXCneQ3+pRpMGu2EDU6TEP3h+qWxcCWsH0+TlHW+QV
EP2SqK9OHI0OihCMB+mPh3fAuDeSjPJYIPz9skCzEOZzmXDMQsbMzzoUabWb
fSX2y2vpwOzNT9lwKmwpZK43Fj1kTqkm+m5emptcN9bNh+sGGUP3V1KRDXMc
qx4+h5fPX1Z+wVkE245FXDr5moxUpZ+X5eDzHz6/fO8+dwlMfXs6J6SQi5jE
Trp1YTmSNvR4H1deCkVqjwRjHPPRx5PXvNmwPCZauGTNt5fBxvlduguKDKQq
cfK1H5brynAXTze/cljZ1ZxleqwYZZwjF+/EemBCL87oRlM5qF2uanK5UYLe
VDOf34P1hkhvV2h8TTmEHLge6/+yFHE9cGCNwXpm1781q7fMy+HNssiBzooy
5M5YbpKfI/zHsaWeh2WQ57z9dLViOUpvtz6qgDmLu/JzB7Yy2MGy2B6ZWI72
f/8rGYz5Y9ID9hCJUpD/ctNwhFGOjnlqJf/A3NRHXP+SQglcUUqrno0tR/+u
tfmR8fcwj4vx88gXQ0NTVQsPlKOUqqNvTuLvV3L/sNdZqgh2jjvXuPSXoabW
vv0i+Pcmim5KA+yHCi/7fCgyKkM/1jW7L2L+RTw/S1+TDhMbwy6/qStFG3zJ
bj1Yv6UXb9uUrpcHPQayW3OZS1FtgE3GFbyeZs6978ZtqDBimHC7WLcEXac/
bAzA66+8vOd5WVoOHF6vN747qhidmXrFpIz1WA7l0uSPVxQYX/tAvLaxCFlu
bsmYxVz98s25P/JZMMjddMFxkIGif+2yphL3l0qnidwNEjyN8ecx0CpEd/9U
sx7GegyY5qdC9DIhPZ5Lbv0NOho1/V6EMP++78PO+C9pIHZX4mXn3nwkKr2f
Qeg3hxDN/Q7BKWAXwphlukpDAZeNaoh+/4lFFV9XxST4NbgYTFGgIg+3xUI+
fA7f/huPOLgzATzV41tHe3LQj+961r6Yt77bFblDMQ5anS9HvQzNRlrKW4bb
MB9dfbkz62IM2IZrZzLJU1CGdMQ6dnzOaV1cQ+OvosBkr9Vi0yoZOSg4Pjv6
l6hrrSgOOhsJenX0tVsHSKiyf5z9MuasD86GJC6Gw8n1I/ClJRNp2V5J/9+u
2+Io2nIpFMxVvh+dd81Au02tBIcxv7LPufindDBYeI6efhyQhoTGJK3+YT6o
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
IQb6bcbpr4vX3/d5dvgu3mzQajnE/EyzEOlNIup1zKNi1yfFvM+C8q9OBTEW
BWiv/YkJPqLv4LNqq8FtMpT9kgsEVzrKHGs6G4I5R97w1bRcEvDD/iJm33y0
2fyE0hDmHgrc+9mxfzokm/DWwz8PFfi9ZzmMz4/FM/Ho83/ToftMUX9XALbT
5Nf7JmB+43z10TCuNHgFhd+3BFHRLas3Z4i+Ld50sWUvuRRsR0+F/QjORUdF
J24S/aozFE7TlYAkcG8zHH5+OQe9YpqnO2D+O1iO9erLBPD4UxE8kJSNnlvx
KZVgfq1w3e0u7XgoTrySvkqlIDVBl2ZiLvHOhX1Psp7HgqzARmv22ix0MnDE
dTOWiz7XE+LCPjEwGJzJk/2EjPJ/3o0n+r88Iyu1vfZGw8B4mRT/DAmV+w1b
EXG5DwER/TE/I0F9s4vFJC8J5XF6KlIwP18nv7+q4jJMC2R+UT+aiV7c1bO/
g7lixubddSnhoPR7PCuGKQOZzuTuGsK8f7e1EgclFI7xN/GyRKchvtN/OhaI
+J7bjub6lmCICJbiXdmSitZkPUvkJvKY1+Jf3lh3Cdw12zyNGpLR4e47tfuJ
+PyVdP6cM4FQb/TpfmBUEuJiN9qngXntb5N9LtfkgUvHturg1Dq0r3LXR0Jf
OXOKi0pw6kG83VdHiUBRJCJ2LJrgLIGTIvr/zsHZorrXvFJKKDC4QPH/dyt0
hulRIy7Q0lTToRN7HLEniuUT/uZUamPSM7I/RI3f9o0yt0AyS0wDRJ9XVM2B
dunKCIjeJ1yyX/0C+vpmMKGFqLvLFg18wh8H3nb2amirL5JgvZQYgXkevWBC
7mgK6HOf9vWwvYSe3lIeEMX8xJyVC+lJJjy8+Wz9HqdItKPq8q8SvD4h8myd
V4eyYJ/UhyLZ9XGopSnDaj3mT4vfrszeygGJ+p31lV+TUH4fE6cp3vfYFl+9
J0dpoDdzUPXKbDrS35rpT8Ln7Z2FyLo1kfmQnWkvavOThBxTajSe/CHqz/kc
xM0L4CIl53HkWQraONvPxor5LzlZC49HhWC7UC6zj5aDjE3fBxoS8ZxZQQ5q
PwPUHqRnWFZRUd2DjoyrWB4Z7f5Do1pFIG9/WP9QbB4a/cTmvQPzurqr3Qzv
ImwPpgpTxOhoQDJZ5TrWA+SapQb/gCKIkO8xn7lcgMqHXI5ZY36w5PzK9nNF
wJRDRU2FhWiyhsmViLc/vC/6xl2kCIw1QjQVLzOQvVWf9CbM52oc4iTyGHAy
jlI0x12E+MpNTQi+hYUTeLsLQZr2PGmnfhGSdEr7sRvzeZnn/Y/fFUApPezD
EccitN16afQk5k57dFWvDdHhS/OoF9WlCCmK5PclYW7/nKJh2JYPp1Z2J6Sf
KUJP0g7lvcQ8+bGJgjs9DxLTWV+kHS5Ci9tdpMTw75XOi901702DUZ6xhulV
BrIeRE8Je+zV9wc3hI5QYXX0yh/hSwwU5D6/hoibjchx8tttzoX3ipfPrx3G
v/f3g5uH8TpfPQrnyseygessx5XivYXIVaiGLwtz1wndKc1mCmztksmrdixA
bCGnan9gPrrM+3ozPQvstFs2x1DoaD+P43EiX3B4eNvO6FgyDKjEVR28l4+U
VxyYKjHfd7V86GogCSSp6xqdBvNQsHWh4F/Mv2q/GDe8mAmU8meM9B/YPteX
ECTibHdZ/3WMz6cDv1SXdcd6Grp9f08V0Z91cctN/SdCacAf+SV3ZDsVZbpd
pk1i/urZl/KksynAoR2ww0U2F73+ZfFKAp9Po02Mku3VSeChjBIfHMtBzYE6
Nm6YnwmDn+p8iSDIb/Vkg2M2qnfkMSwn7LfMrYyQnHhYfP2HqhZNQT4XUzsI
/XaD/DtBVTIO68uGYr7yLPSy+focUQ/s+NHwxPOBGDhdutZKvZuMrs6XcakR
faxLC7c9srG94fOSIvOHhIZ65E4QfpDVZ7evWs5RcKyHhWoiTULrTrR+JeJy
FWv8EvyPR4Km9/zfaddMxPIv52Ad5s3nu701oyPgxc8D+jbmGci1s/P4S8wt
w7pNnqaHAamoJCJwMg25K2yOIvomlj9nWXbeCwH3JQ5bjdhU9HBViY2NqMf4
xujgX74EEg52b8JMU5Cq9BNtYi6oPP/i4HHWQ/Bv78eIJTtmVKhK+/r/ewHf
KIWd0ZqgdUX4iqrKNvReb+T/OeRcTPzVX5ZNodjab3L5mSw6+bHlEOFvkq8+
Nrpm4wj7C8Ve8jbqou61ThsJf1NqKcvwhpAvBP1+6afPa4ZS7HyXiP5TGw3r
oU3DwVA6/2iRles8WkfnECfqNwrhvZz2umh4o0I+rsPngc7wp10k4mnOU6+O
sOcnwEjxlA6vgT/yabkwT/S11ZFzTyQ5p4HYnbd7lBih6JH/RfElvA6ba8pS
HLNJUM9c+mvflyi0FGeYGkLcIx7npjaZU+D075jvv07Ho9unw5sn8P4eHR7u
5XuXAy6fT4byfUlGHwOba4k5XX/vP7zwWYQG8gE784yT8f3ieG80A5+3I74J
QYMb8uFu3BGlPA4yKpGWNh4l+g0pDMnAUjo0Vp+xbFKkIKPunXdkMZ+L5TW8
hvWA6wv33+c0c1CiBtNzQr6kxwWlnnUUAiKR9/bsoKJxcdVZYs7Y/RtO0vVn
GLDz02rTryc05Hj209cMLL8Onck1s4UMgHM7e99o5KP46SGeQ5jvEL6xQbyE
Ac11S9cLQ+lI4mC+7jTWG56VF919XRkw/vyqwSrWe0uuW5SJuuKVbq857tVC
OHK2sVvAsBC95l9/qxLzZ9E3j7I7FcI3o5ltOycKkdozsx6Cg1dHxdfKAhAc
kNXmPc5ATOMXZJsxj87R0e14QYfY+YGisGgGcqW3qL3HnOX13LuZd/nw9l3i
sloGAyX8VYIt+DvLmfp6Bd7lQWBExlW3AAbKyB7NOok537ET1w16aTBnZcK7
V5mByPF9jdmYWzBP94y0UKH6lkFD3GghCsnNtyTm63aPh6/ElefCp+hDOUGu
heiA0icPQo9pSES5e6fmgJBbWVbz2wLk/UhDKAHzYx8m1JUCsmEw7C/3kEYB
2jnxYHAE86ktU6Zs5ylA680s3ZRJR0pKW8/K4P1aikjdXGCaBWYa9tXWr/IR
p8exxBjMT58NjTA3IoO8iKhryMZ8ROepzSDySssCM7e1T5GgW+DQo9dH8tAb
/jcPdxL59LPBcNAyE0LWaGSXedLQo4MFNZ5EPK21uE3/XTrUGMlcfYHvHq+T
Y99uYl6yftcAy/Y0WEwzvsbZmotWJTcaL2HO0BEfnfdIgZ9vq/T6xnOQ6+ai
W0R9b4WuxU/V3iS4qcdI9eTKQfaGATwXMT8vNdjRejwRHt+xcZqTz0aD5vF+
VZgrOF+OVhqKh9f5bt+NzlPQXy+5z0Q/V4jIHYCQODCPUL5/jIz9Ux8hCqHf
FnJiF04cjIVNWaYf4zvJaLHctkAZc66bJJPOX9FATTKoSvlHQiJVHjLnCTtB
r9CVqTsKZL+0KD9QJ6G7WtvCifkSPJpdMbq3IyHBb+hBWFQmst4pfouIy+kL
3dhTb3sZekyD2X9kZ6D7HascT4g5Jxa13+d9w4F7Xntdm1w6emz7qm4C809P
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
p+yfzvpw7XfVIMtlqh4/W4+36JYWzq3jICxk3i16/Qqc794k2ZVcjbnjLPwz
NA7hvBz+ouIpoH/smYvAihL8YZYsOPpzHN6v47/BeTAGpH65ejpeysH2Eqfx
pdS6zdDa0DuYHQBcjV5fZSsS8b2HRRyZw5Vy7iDvo6+ukL51f4Pgj1jU9WkW
WU/2AYvA5wLVevDrY4/FTW1XLBnxfPWRwkdCBxnPP6rD4KtyIwl7O1ShC54j
fb4rDN4Vd0Qpw6nXlUkDy86ie9HCq8R+86j/3HizTx5Ybhc+HhQzwZk4hfn5
JpJ1H3ujN+yEkwnKIu3qBrjFWCKA8C+eIOm0t24LLG449L7pjRZaKH2Zt2d0
6iWNWn4IwzU1FQHnz4fR541FKMFFOC+neb+8AX++RWsOxFUjX+D+7nvt4zB8
gE2v9kENiIzIzG35WYde23WFzlO41YY1f4NTSoAp56Y6pFWD8klCbXZvxqF3
7NDKze+zQO6UgG73iXJc3NMRc318HMYO/Pe6y5cBDmF1ibJP8vGSoMerCGrd
dhx/UphtFw6np2Ffg3E6Kvzrtkn6Ow53PELX3G7zBaX7ZZqLxxmYjWXHiK7p
rlFt0G41g0B19bSzMr7YeHBG/zHxf2efLpIPMQD9hvBr76Td8EX8l0CiG9nb
/OjTI1VNyH02Gvo6xQHfSe9yIvVCA62/5L6uUYUmr3Lfc7LWOHM2/TjxO5yl
Whjt5/fCEZUvJmNc5ijzJ06PrPOics01PyRl4fnAganYopN4z0H0E+G/r2qR
7nEHCUjRPGB9UEcPL7F5PyD8f1fjUzJaWQt9vt1dwm/KsCtf6lTuf9S5E8sR
yZ9SAwK2lwKn1WrxzK5NNyUfk7nYH9TOq5YDPT/s7VbuGtzkbhHX0kft/40b
PJ845cEXXpvWFN1K3Mb08tUZG4erblpOLKNksFXcoBEVUIhpC81Gfk1Q9hXI
B0/Ex8H2xPRGPZUcLHZVU+Ok1m36mv3BPN+DQXlFfUChYTK+n9rzjvQRazCc
M9kHbEDtU6bXqVvBaPTzBz+JR0kq3dhd6mEOm8d5xDg++eCCj5/4iW7V3yJ7
pcAWQ8hexrZeKd8ND7eI7iF+br59giJvvxa0XdZ7tozPCVt/1vwmcTCagjqf
vpsadLzeq8fqPodTRhs3k7zDiefSzX88D8DafVnFmpkWGHqS7k3s6h//Clq6
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
hg48WsH7f8tk4d/lKhG7KT6Z4pdnj6fHQP3A6o6ZnFSUUgp3v0bdp8XU2wM/
fMOg6etUbnh0Ijo1cwY3UjxX8khkxTQGwgx3X7QFOwPPxb5ucifxfOfmhYLi
PkBr3H3OY2E83lWW+kT6hQvOVtheD70EoYnRX405ojCYvkSN6Jc2rT//Q2Wn
Mzz0Yrt4ojcUA0/XvSM6kPdEL0woawSD6buX19L97dCbX06f7MOmjyWZWrHJ
ILNydQuDPxJ76r7tUKPupyRkqaZeeC7MSknUO15Ixp7OltYV1Pmr+svDR3Mi
H9hPeX/bZ52D61J3qTKo8/ripL3U3px80LkrpJOwIh89maH82hRvtw7uOZRf
lwuu//57erAjH99+U3/5m8JLGo3nIk9nQfKiqLN+W/Mx6/HdgRKKT37094uT
YUJixs4NPPzZ+D19g8B96nv5uqDfb79jPLg7nsi8/CoNJedOiB6h+LTxKfU6
yxEJLxRFj2q9S8LPd+UGiQ6enFB/dcW3YFA5dzY6xYKJSUqLHpD+VocPrMmR
z/4w6sk7GnGShvWRlXxNpB61te3EllpPGHWsce8PiEHWn19PNxD7f02/R+5r
V9jOVPk2vCkCme8eTxLdlQ9hh/81R/pD1fmx2x+LrJD3KJ8ryTNGy38v9pVi
gVrY7rgf10Lwm8/m62S+ZITeUverYdkgOu7yo3ItC+0K9Pyjqeca+920+205
5W9etfk+rZSJd6KW9MpT69aP3itT8CcPor5bx9TTcvE6l7dODMXzXrehTLWM
XHjTdqZJ+E4eak3Yil+h8KrykuU6H7JgpPKYqUBKHl7UE6/uo/g8bmHVuSGS
RfkBb6VmKrLRKyTc7AL1v62C+RlskTQQ/tp9k+tBOsocVbr4icQJBc9Z9bpH
w1fP6487uVIwpf6J5EqiK7hQoFpRNAzGjYZ+VaaxsHZMp+sDhU8KXQnY+iYQ
kvLzVk/R6Oge3qpK5ghEhZ4JsJ3xAf72kAVH+uIw+XwBnaxbd71GAbkCd3Bx
3iUfZRyF45WvhFUp3h68vCxx8Zsn8M7pZFr7mmP+X6s4osv09rbmdPkROkRu
+MfrIByIluEbdUk9drju+tbzkAEZxfTaXBk6eigcFCd9K07+RybWWuTCgZsX
Zfr+pmK2ZZ1UAXV+7b02Vx6vmAeibF7Hfgnl4Jvf2qItFD8v1Vsdgk7nApej
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
0L2Sxn2SxQkf67xq7SCG2TIGpnQR84OO2zjf/3hu9UDOU3u484vr40fPy6hR
p3we30tqCW1tv9TmBEe3SK7SfLiK1BgrInBcUel9YNZ8ixuRX555Y+duiXhb
R+e/ELi7QhLoGN4FI1aNeksra7RlzYp5I79o9ZmgPPMG9ltriKvQDrV9pnuF
+zeiGapEn6n4A98Qk19HiCMCAZp9uF+9xXWrdeN4AGhLgokHgwu6+Y51Dvev
lroaKgrvC4HG1u4DXoZ3Eddl8SNaBP7t0bCJfGwopG1+EfGK0RsZNPeJYZ3y
zadpvTSLYZAdX3DW9I0PCpKwleYg8JlDPqdllSOg3aGzou2MH3Lf/rF8GetK
8nnKxJwj4feaIUdMqj9qHFb69w3r9U7I7bsfFgUy7BSt4MkAJASzLrjv7o/m
83u//Emg2L3V3VouCEVr1N67T+BlmncMyVejYYjxUKXEvWB0V7P9RgSBP2Ts
be1iJEPr5JrAnuoQtP8XBDpgfotRVG40J0N7VY130NdQVJ1Vw4znsZ7cIkL6
mkeGffkTIifnw9CcSvd/eB7rnp/BxpFfyVCiXxTAsSkC1fX3meO+wbTR/l6d
bRTondskf24pAhl35LrvwzqLtaJfiJ8Cu7lS9vMMRCKayuUiHC95Qm6W2wkK
7Huuckn4cRQCB0E67L/U88Q3TUCOAtTidwn7PEloMjIiHfseU6LULnvIUiBB
1nnpi3g08gmLssF1sPHChyriYhTQWDjeYtMWjWrPWJpjvZt4zHHhORYKqFuW
PV0UJ6Ngrx1enwhcln38T/g8GWIaX7f02pKRhu+h+1iXZ9fd3JLVToYnIlZ3
6TPJKPsCXQvW5Z1dL9Hb7UCGuV2M789OEd/TIhmFP09tWqiokCXDq/rYvL7d
FHTR9M401v25mdhPNjtFw7Z1eYtoSQqiO37kIM4fr309PCbymwT9Y3S7DWUo
6GipcdEIgTMVp8mGRpFgodKTSVqZgux9r1H+4rjRx2Og8+8XhQef5R/+Gsmu
F476v86Obsu+LSMnpxV6Q8zOR+x7Xt84M7qBX9VWaGel3wbrc0ejQm58qV8Q
CtzArwUbdlUNsIEEmztHwMGx+ueiwxt6unj/rLU9EoJQK0Jdz3JYq2d7+GJx
Iw4R8LgqPykF30cn59Sr6VGQLetG3U+H6/xFvgty0J+xdjZlggNpKfq82fBP
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
    "]],
  AutomaticImageSize->True,
  Axes->True,
  BoxRatios->{1, 1, 0.4},
  ImageSize->{415.3131731694921, 152.60188896456856`},
  Method->{"RotationControl" -> "Globe"},
  PlotRange->{{1., 51.}, {1., 51.}, {0, 1}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], Automatic},
  ViewPoint->{3.0037349267599622`, 1.5474883726707416`, -0.1812628649537799},
  ViewVertical->{0., 0., 1.}]], "Output",
 CellChangeTimes->{{3.54573666373096*^9, 3.5457368286448517`*^9}, 
   3.5457369306855917`*^9, 3.545737149485433*^9, 3.5457372962639914`*^9, {
   3.545737334550516*^9, 3.5457373771148863`*^9}, 3.545737610604075*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Block", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"cbl", "=", "7"}], ",", 
     RowBox[{"wbl", "=", "8"}], ",", 
     RowBox[{"max", "=", "10"}]}], "}"}], ",", 
   RowBox[{"ContourPlot", "[", 
    RowBox[{
     RowBox[{"int", "[", 
      RowBox[{"cbl", ",", "wbl", ",", "cal", ",", "wal"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"cal", ",", "0", ",", "max"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"wal", ",", "0", ",", "max"}], "}"}], ",", 
     RowBox[{"PlotRange", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1"}], "}"}]}]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.545736396614563*^9, 3.5457364656907883`*^9}, {
  3.545736543421125*^9, 3.545736826049268*^9}, {3.5457369235485687`*^9, 
  3.545736928261374*^9}, {3.5457372869843493`*^9, 3.545737295512774*^9}, {
  3.545737331894603*^9, 3.5457373445850077`*^9}, {3.545737375622883*^9, 
  3.545737395057322*^9}, {3.545737482278965*^9, 3.545737511810783*^9}, {
  3.545737679659958*^9, 3.545737686054199*^9}, {3.545737723476018*^9, 
  3.5457377249273033`*^9}, {3.545737960646408*^9, 3.545737983793622*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Block", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"cbl", "=", "7"}], ",", 
     RowBox[{"wbl", "=", "8"}], ",", 
     RowBox[{"max", "=", "20"}]}], "}"}], ",", 
   RowBox[{"ListContourPlot", "[", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"f", "[", 
        RowBox[{"cbl", ",", "wbl", ",", "cal", ",", "wal"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"cal", ",", "0", ",", "max"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"wal", ",", "0", ",", "max"}], "}"}]}], "]"}], ",", 
     RowBox[{"PlotRange", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1"}], "}"}]}]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.545736396614563*^9, 3.5457364656907883`*^9}, {
  3.545736543421125*^9, 3.545736826049268*^9}, {3.5457369235485687`*^9, 
  3.545736928261374*^9}, {3.5457372869843493`*^9, 3.545737295512774*^9}, {
  3.545737331894603*^9, 3.5457373445850077`*^9}, {3.545737375622883*^9, 
  3.545737395057322*^9}, {3.545737482278965*^9, 3.545737511810783*^9}, {
  3.545737679659958*^9, 3.545737686054199*^9}, {3.545737723476018*^9, 
  3.5457377249273033`*^9}}],

Cell[BoxData[
 GraphicsBox[GraphicsComplexBox[CompressedData["
1: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
SA/wS2l/QfjIq5VSmrT1giiI5wl+OS2M5tc/PKm8YHd5QUtv8CvpkA87xvgP
KbldMX9jvdYX/BpK2Leyzr2DJ1kvXjtl52+oo+jIuXtgM9NR3HlX9/bCeWVq
L1IcHzI2rgLPF0R0J+/DvXXLZfSpmBc3pJU7+MW0MyLT/dh5Gdm7bcvLcZSA
X0Y7zzxb8eWjjB5/F5rttvMCv4KiphR3c34ko/WSv+YWhfqAX0UmNl7B/Qdy
utqZ7/PGFL7woqoJV2IsHFBnY+kZ+zprWio3l3c+96PsSoUX1Sh4gza34Ob0
riVhxpFd9XWL20eCiufntu3hTY5nOyW1SWHAL6WcmsWSO07elDUryzr7Our9
cgqPmpH+5xc53Wi32XGYjTf4lbR/ZZIiJktOndoPMZtt6Ac4Hav2ePj/AiZ7
05guvR6PikKdS0fnfXvbVPXk6ua7jIT3P7IUNLN9VYn5GlfD5zRaMc0c0XzV
ya8+dDK26Mx9U9TXZSTybeNyKsaHkv14L6yXor6uoEnmN2PSaxX07qXdmt5W
PuBX0YCG62cFZTbMZ6WoE7Pk8PCenDX2oalX6s7Z/I/TlcyrTI6Nr3EzvI+H
Zqqy9yyJgfXxrB7W0u7jXl+a82Ox65Ug1KeVVMjoBnp/V1LXTOel8ea+4FeT
15CGgYjTBY+VPXYPe+tL+xz89jm0QJ1QS87J8+OXr1RSj+TIe4Pfok4jovk1
y11jjVU0o+RCzSWRu+FzGq2UFCnlF0cPUVG8ctnF6GrUhxWU+jhpxOs6FR2x
Dvp2wwT1YBUdGzd6eY+5Kop0zlo+NBH1YJbS8iPS8u+p6PrQn2ZZ+qAOp6MX
ARetJLbcecDG2tr0hKNqand+p/y3MMYQh0Yro+DuUeUXD6op7WaUeGY8t48I
wrY+rznpA/erqVtH1mLCPDX9fn7zZ+d5qKdqqfar+Z5Vx9T0pmH/CuF0rFSb
h7kPZuv3Q5ZyHjxpISr3MnCjVdLtD7lthkg1dGR/0eiE2b7g15C7rbBLcqKG
Pq+7EftsDuqNOrpvn32XMrm6ZhORtNA/nqVt08zynHNQz5NTSPu3HTJb1vv3
9CwoN/Sj3P/+/NbwFMcQlo7nX/TK3oR6HUvd0x40T53P0rXqqGuHf+X0uSs/
Dg0vfqjPZ06/6uRqzv91nJaY/h8fnHmMepaarNaOOtt8qpaKl29/IZmF+pWW
pAfvF61boCXFzrwhmxI4vWrwjtT6hxEd6Oud39f7Q8DhnyZ68w5ZUXyD3BP3
MeBDpOqayVgnKow/7W+b/TVgcYNsUmRNjdaUxoqfpoW3cKDi7qfa7nEyo4lP
c4SypY707NSAjqF8E/Je4ynq4OZK4dI+NKWTMR1skHcO6K0VKQ587+YfLKRB
Y+qWTF9tTX5fnC71NGGo7GmkwtfGguIHeNsWL5PQ0QG7/Lu2bUl/Rsf3TxHW
BMy42yZ18yJ72tFj7UH3DibUX9LzgV16KzrSoNvkCJusPd3xNRXM3OJBu4ZZ
tKsOdKAey47trWK8KNVlRvSrbvaU72pbHhbu1mSdaX2X236HTtbPY4typ8XN
caQEv8yVCdua08n0PkUnbrpQ5WLfs5sGSegvh2EL2+9zIcdb7869bi8jecMA
M5lP4glr/VurVbTqVERlTCGfkuvYlZU37JuskCrn3R0/5bmCXpjse/C6fn6I
89vnvMi0Pm/fFg4V2Asob27nBX73WbpsbNbq3Rg32lFZeN4n2pZy/PdN7HnX
nYb/Is4YP9W7ybrT+tvKiIrzKlLtitr/dJk7JbaZ+iHtqpBOLyv40nu0B+1U
3as4miJrsgwN3h45q9l1FeWFHvpk/LuEXl6bOPmOG0tXMl+83B0gpp7TH1fE
V/FI6h//5dAMKVXmeqfH+rvSjNupIf/JkFJQ1KbsjmdUtKKgXfCsBV5U7hYn
/6WUpdsBD/uX3PCim0c8Nj0Z5UKlD1tdjWe9yTTgSvrLKjdKzHwZUvXVl8JM
j7Y76iBuskpKiRr8+skeNTkcPXD95DBfGtlv1d2eQgXt29H9jcRWTdbNpB6S
mwwtNFqzavVYDQlvFI7MOOBFtmOfq/vc11DWl6XJor0SCp0d2NXurpb+D9u+
EaI=
   "], {{{}, 
     {RGBColor[
      0.33372345326510405`, 0.12748817559556486`, 0.5860690016780372], 
      EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxNlE9PU1EQxd97RikFFEF3gFBKqayMQkFLaaJxha20krhv+VM2urYFPoO2
X8LvIolfgcTEhYluGmJMNPGc3F/DW5xM586dMzNn3u1S633zXRJF0alwQygJ
r4RdYVmYEm4LOWESf0uoCzWhIqwKReGFiD7J/pMty64IBWFJmCD/gTAuZInf
EaaFRc58b14YEzJCnvq+t8CZ87fhdu0d6j8UWvTv3jaoZ+518u2fCx3hhJwq
HG3yPNsT+nDO1ziK5mQv46DPIjNVyV+LQvwWfT9Fuzxa5fA3ycvxu0avn4W+
MIDrnnAf7ln8ZXjN9y0O/Q3jMM8G8zXRpUKPJWJvOPOMv+Ow20wS+F4zr3t9
Rg3bPWIFOMtoXcEvwmd/n99VZttKzbpJH19U96bsRRz48+zfPDPMaf67+K47
jV+Hc9TvqMca/I416HGbna2zwz3ultG6RM4u2th/Li0+yv6VPaCe6zzm3PEL
+v/Ot92Ae4I5rfcheT4/5o53csRZg12usdsZ5vfcU+zY+rmHrvCB+VdTehSi
63ezEl2/jzz5HWp65ydY72cSbveapV9/O2f02qFeO1X/gJl6WM9xinVONgnv
bY533yM+Drf3sJAE3kdo2eVehvg8O2uiT4We7e/Qu/0x7vqd9anj3mfRsoge
ZfY9IH6emqGbmqFHvePUfo64O9JupGWHe3U0abPnQ/xL/h9+aMarOHx7v5Lw
ffpui/wzag95vz+ToJ3jV0nQyFr9ScL79Dc6TEKv1tf6vUzC/8XbJPANUnr0
uddhbsf/A8MPbK8=
         "]], 
        PolygonBox[{{755, 75, 76, 521}, {765, 145, 146, 580}, {764, 144, 145, 
         579}, {757, 98, 99, 541}, {561, 122, 144, 562}, {462, 6, 28, 463}, {
         761, 121, 122, 561}, {742, 5, 6, 462}, {750, 52, 53, 502}, {482, 29, 
         51, 483}, {502, 53, 75, 503}, {521, 76, 98, 522}, {580, 146, 168, 
         581}, {749, 51, 52, 501}, {746, 28, 29, 482}, {541, 99, 121, 
         542}}]}]}, 
     {RGBColor[0.41487942736973143`, 0.2685964971751941, 0.7001435409645308], 
      EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxFUs0ug1EQvd9oIvoIbUjsm0i7FxGVYCliq7XQHSstL2BVPIT28w4+3bH0
121XCEIQQYsgcU7mNBYnZ+7cuTNz5s7o8tr8qoUQxoEB4CoKoQB+gLMErgLr
QAf+DPge/gKwCzsPboB3gp8PgRjYB5aAWWAOSCOuDB4CnyFPFvYp+Djymjfm
b9vABXAn5vla/bCvCcTVYX+Dx2TTt6EetpWX+W/hXwQOYK+Az4PbiZh9N4E9
veP7SfPzgnn9RJpekDMPfoS/G7muJ2mqaUZtxbaAEfU0DM6Zz+/TPJa16qrB
WhxAVjE5aaqG/1hyX19D/X5EPtceuCZtKeRJwZ6B/Wpem++6+qum3m+az3fL
/D+o4c38z1rSMK1z0XwGnAVrvEeen3VixfJ+SucfcEX9sK+e+nyWPu4Ed2rQ
3M6Ya6WvrF0pKe5Iu8EdOdHucQcTaYm1f9T2Bb7UH/Gviur/1zy2/+d/wZ5m
eQ==
         "]], PolygonBox[CompressedData["
1:eJwtkUsuRFEURe89JUgNQYlE9H1qBD6RoClB06dBT7X85uAzCL85SGoAgmAC
QgQhaBQVJUisnf0aK2/dd+475759e5dq06uRUuqDNlFK6YrnNWxS+IFtfAeG
8dPsfV1wgT+HvQI3rB9Yl4pe2ttivYavQz/+CkN4FRrUO1kv4FPwxVof7/M4
gBlqg7Crs0AP3g6T+Dx04M1wbQO6w8gXoYx/0HOimHePz/Gujh/DOD4Kh/ie
9uB/4doRjOG/Ydce7X0r5quner+Hz653zewMlIX+8Q5fpn6SnOlKOFNl+wRb
+Hl2fsrrLDtjZa0MRsIZVYt5n/htdm/NuMzOSFlpxqzuIpyNMq+EM1f2usMB
5RHORpkr+8dwL51BZ3kJz9MMzfoOZ6M70F00wmfR/+ou/gGoxUWb
         "]]}]}, 
     {RGBColor[
      0.49603540147435876`, 0.40970481875482334`, 0.8142180802510244], 
      EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxNkr0vQ2EUxt/7XlqrScpkNPjYTISFuaQ2HaTYGDTCzsIqZvpP+Ej6B5Bo
105EciskImkjIdqE38l5BsNzn+d97znPOeeeO76xu7ITQwizIAUTHPbgL/gc
DCch1OBb2OLqcAlxEzyhAV0HP29y/wBX4QQsoTvwGKiiR5XXDJ53xvkHHko9
x3JT9AV8Ak5BG/SCx01Gv59T7JVq18R2PuDdCzyAzz46Qx/BOVBGd1Uz++dt
bDnb0Xvbiu5nPVqdxeg1FuDV6HUq8FT0Hr/hNc1W0jcz375yLLcHH6u2zV2M
PucvfE98Ad2C8+ozp94b+l5W81Kz1rWLjMe0erBeBsE6ekTfoK/55lWrKG/b
he34TnXb3D+iZ9Bv6Cfpj8TjzLOsfVgP5tXl3TL8bruQj/l1Et+77f9QfdhO
Wop5RT/L32p+ysf8mtqFzV3Qf2j/4x/cKGAQ
         "]], PolygonBox[CompressedData["

1:eJwtkcEuQ1EQhufOrejWSrSJxFqFFyixYV/SHQvR2rFQFXssWNe6vIR6CDxD
E7VqpJUmpCR8f+Ysvtz/3Jkz88+cpYOT2rGb2SIUYJlDi+8NrKA34B59C6vo
Qm72jh7AOec/6Frk1NDzsIc+hQXlp/M2TDKzIven6B/oEPv2qK1+FRkh/sSn
B7se/xSTpzK6Ca8WOXX0BzXX0FswRufcf0a/wBnxLw8vrTTbNfxazHCBPoRH
izsND0/yNketO/TYo7b85+hq8qOZ1z1m1uyqsYMeZZEvT/0sPMjLG7RVGx7S
vrTbS4+YdnLl0UO9tLMZdCm9xz7Moj89tOLa7TDlq6d6a2fanXpseryR3ko7
O0L/A9BDPkY=
         "]], 
        PolygonBox[{{476, 475, 745, 48, 479}, {740, 2, 452, 453, 454}, {744, 
         25, 461, 475, 476}, {454, 453, 741, 25, 458}}]}]}, 
     {RGBColor[0.5736512825365997, 0.5433601782020041, 0.9097228445073196], 
      EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxFkk0rxFEUxu/cf2KFxZSxVEYi2ZthZyuNJYvJy5Ya8QG8FEuJpZcPwAqx
F2VmaUkao1iIptSMFb/TeWTx9Jx77jnnPuec2zO7VFiMIYQ8SEAZnIMLcJMK
IQO/EDAEtrEH4RH8vSALJjmf4S/CCZjBrsOHqmN3YzqPKvYg+PmB/GH4Df9c
9LdLcAaUsPvhQnQtP3A+eu4EfBxdwwl8BSaxr+E7aTbtq5xr2CvSfqi3La8d
dIDd6PaRam8Fjx2IbufgHdDAbmVA96r/ii+nGfSJrV4n6Jb+LumyeVlsBd8z
qIJTzfESToNpfF/wXvQabbw1pd5tBo+a1XvKd2AaG/C+4i3vO7gG6yeqZlr9
NYPfL0d/fw1+Uk3bw636sv5Mo8U3hGr49xnbTFu0a9v5JznjtiO4Lvsj5dor
+lNZzcB6rklLU7XLittUDxvwQnTfvPr7m/G6dmE7Keo/xcR3bHWTxGeQ1R/9
BTIJXNI=
         "]], PolygonBox[CompressedData["
1:eJwtkT0vxEEQh+c/R6iOilNeInIkovfWaeVQnurctSRHfAAvyWkRJU5PhXgJ
X4DvIGiFXCI5Kp7Jb4sneXZnZ3dmtlhdW1x1MytCF9ywmMzMynCL53Jm7+y/
wYaL8Geo473E+znbB4esO7BHrAmjeAkaaT2G78MPnuf8Ad5Dfse0F7E2LOMV
yPBT19lhaOFb8GrK2cbPYCRTDUf4uets9HCB11y1XsMSvgO/pp428YH0XtRY
wJ16LvErqLKegRNTT+P4gisWe7P4B+9M4HPwhc+zd2y6o4z/ud6OnMj9zHQ2
cl7SzGJ2UdMuPuWaVdwx7aohcp9gJe5L+TEfd82okt5vE/tO6+gpemu4cmNm
6/hg+o+Id7v+qJn6H8LvueMOHuAR/gEdIEJX
         "]], 
        PolygonBox[{{446, 445, 740, 24, 455}, {473, 472, 744, 47, 477}, {743, 
         24, 458, 472, 473}}]}]}, 
     {RGBColor[0.6333197023376445, 0.6392307259078788, 0.9110831006975386], 
      EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJw1kjssw1EUxv89HQxqkRBrK0IMVpoarUqMFlGsKJvJI2lHUmu9Zo9FBCsT
YbOQiG4SIRZswu/kfB2+fPfe8/zOudnSwsS8JUlSAGkww+UWLsErqSSZBXPi
IhgDOTAEBsG9/B7gCnGLoAzqSdyrOu+AUS8EJqF2i/is8o1xP+V9yqKO58+D
I/mdwTXQxrmFRs/ldwX3qnbeIs7zdYszqYjxOq26d1r0+AXvWdgO4Wlw4xrg
b/gFNMAn9hH4Hd6yyLNrYXf/5rycLR12j/8Ba8q16TUVswp/KOeves1L8yMY
4P3Vorbn8Ph+i1n2wcMW8yxoHk2tGxb+6/C2bDW9ZaS/ql3U1XdDOvParc/0
xOJ+bDF3n38GXV2am8/v0sL/Ar62+B93cIfFH+iBTbv+w7YsPUvwszS61rL+
iO/vwELLvkW/Oe3tSf5v6rH5H8f1Z4oWu69I1z8wB1Mh
         "]], 
        PolygonBox[CompressedData["
1:eJwtkjssBVEQhmdnJQpXIyTamxshCi1CqeWKUoOLlr10Ko+EElF71R6NxCOE
BAlX6CiFWogGnfBNZoov55uze2bO/tl8aXJgQkWkAFVwTTGeiBThBO+DA/bX
oRufhRf8G+bwHcjzbjvs4svqz2qoV/ANdbd3NvFe9V7Ws4hnUBHvWcaHYp7t
jeD3MMbZGXjAL+1Oie9d4XvQiRdgG5+CV87ewSj+y34PPghCXafuGTTgFzw/
hxu4Dcwf4QneoE28xwdenYrUsuZglfNN6r0WoRnX1Gfb/Yepv6Ac8+rVyeI+
qt7Dev1QL5innmUHHKr3qERe/XhX5LcErXiLutuMRvwv8d523098Xr23ZTKN
b6lnZd+whr9HPvaNzzHTZlvGR/gZ62lkZFkdq/8blvk+/g9Kn0fj
         "]], 
        PolygonBox[{{469, 468, 743, 46, 474}}]}]}, 
     {RGBColor[0.6929881221386891, 0.7351012736137535, 0.9124433568877577], 
      EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxFUjssRFEQfW9URCFElIigUlqhlSjs20h0CsTb3lLt28anUO5b/S4K2/g0
lhCVRWHjkwih8HmFRkJUqxPiTOaI4uTce2fmzsyZafdTo9PiOM4QUAM8A2dA
BeiGYQncCV53HScLhMCt2PkR7IM9IEFbAGSAY9imwOfgIm054AHowZ934HnY
qjhnwSXm1Nx1sLUBrUATbCm8dYjZdhzz9cTO4+BPxtQCadfyal1J1hLwHtA+
i5gIMTPyb0uyvzT9eplf6yjANw/0w39F7H1DRQPGQN+4b4rF7ILjjI8Bh65p
V+R/WqPWWgFaEHuk2oi9F8DN7LeR+sX/9KVGWssec5TBI3xX+4VY/TdifiXq
pX+rzqpTyFq0pg9gEG9v4DWxXlfBZdZ2DX6nz5dr84m4I1Wy3g/E5r+vNYv5
TWofYj5z4G0xPbbA99yBV/bmc2YJzsHnX3qvx1JOcPa6qKdiPiesN0atF7kH
C8zjUbsn7u4L9yVPDSPqoX10cc/7wD+uzbQB5wEx/2HuScgdyXCX9b4sNs8c
+ErMdgn+BWMhbec=
         "]], PolygonBox[CompressedData["
1:eJwtkTssREEUhuceGqIQIkpErEqJ0OpYkegUyNJbKtF4FEpW71WoPBqviERi
rcLGIxGvwqugkBAVnRDfyX+T+9355pzJmTMzNQPp7iELISSgEFqYzDNOQz1e
Z/I0VODD8IznIYX/RiH04G3wifcS28RPoA9fgmrixTCH5xj5QiVkkXViTZHW
LOOXkXINcIe/RXKv/4G3x/35Hkm81LS/91eO/0Ra67E/PGPa+5v5FP4e573m
PX5DLMM4Bhf4bbyf95DHc8QGGTthDy8pkCdhl/mkqbbfyYgp5jk/0wZ+bqrt
NY5xv2y/myfvGX+AGXIr8Ii/mHwfXvFa09n8DRJ4WTz38wW8OX4fv5NWvN/0
NlvQhWehg1opOMJPTT4KZ/g2NEZas4OPm3r7ggnvzeRF5GfxBZNXwSJ+Zarl
Z7jGV005r7mGH8bv6W9+wO8f9BZO6A==
         "]]}]}, 
     {RGBColor[0.7526565419397337, 0.8309718213196281, 0.9138036130779766], 
      EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxNkrsvRGEQxb87W9AQorbJhvgHVhClbjcqlcIrWrHb7L2VR6Pae/kDFgka
j2o9YrcSipWg8ai4WwgFiWp1QsSZzNlEcfKb+R7zzT1zU7P5sZw450agBPSK
pOo59wJ+Im9F3AItM18C687iBjSMvAQOgn3QCuIecAq6RDwJ5nlHHxqFyoiz
3Nf1GOpCngM7wDuoiDcfwW0whCLoQ6zPd8QVz/Z2oCTUD6X1jGdn3sBfaBzx
N3gKbfGOssi6T2L5M3ggVmcf9GBGDXcnEK+J+bAqdseHAugKeQG8FfOoQV90
fxqaITNQlkz/67Wbve+J5Yd8J8m9dTHukvqG7h+J1Tqjl+qj9hqxjxL9K7DX
eTGPF8ga7+i3aTwn1nvMeQxxphmwk3NJgT/0s11sBurzF9jLuQ+Ai6wVcnYV
er8p9l0b9LA5h4CzDemVz75PxDw7JptePoidv+esmr5G/Be0blvCauh86mLr
sViNgG/oWpX9+XxfPbvguXPwRuz8NfgH3GZqNg==
         "]], 
        PolygonBox[CompressedData["
1:eJwtkTkvhFEUhu93SGgIUZNMLH+AIErdoFJpGNGKmUZUlkbF8AMsiWgslS2i
YhAKmhkSginQquiEiOfkvcWT77n3nLlzltRYbjBrIYRWqIRFDp98q5IQ8vgl
3wsowDn8wBDxXvjAO8mZx1egG3+HE+43oYwvQTX+RXwOT5ty96AffzHl5uEe
n/a7oBpm8DtTbApu8XG4CsqZwG9MsVGvD09BNqimFrwunr3mv9iD91KEEpwR
z/CdhJqKELY4N+LtsI0XTG/3wRG+b4ql4QDfgQ68CdbxQ1Ou3+3iT7CAb8Az
XjT9l9+VPNc0C59JD/5qyj2GN5+VaRde0ypea+rFe6rHZ02zLUPO1JP39gCP
cGqqNRN7bY778t834N+Jdulv/uJdcT+e0+azM719DSP4sMm95gHTDt19Jwnz
WzPNwne+jP8DzqFSPw==
         "]], 
        PolygonBox[{{471, 470, 487, 66, 747}}]}]}, 
     {RGBColor[0.807259550425446, 0.8618804323970486, 0.8940374494025004], 
      EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxNUr0vg3EQfntNLT4ai6UGTYwWTYi/oK3YLBKqg5Eg0RGToS3+gCLaSZi0
vjYfERIjtZQOQmIz6KoxeC7PMxiePPfee3fP3f0uPrc8uWRBECSBMNAIBcEQ
uA6OwpEHPyIgDc4Cs0AOKAIF4Fnxn+BboA/23b+4FSCl7wxQN+Y+Gf95Ddc4
B8pABbhHjWOgCgwrPwlcGWs8gLvD7OdGvqTiHJ6TAGpG/6VR3//5HB1APxAD
foEp6PyAv4yzNNR3Rn1H4V+EfwC8Y8w7MOrEVOvIqHkIbgXUiAC9yu0BvwD7
8L35Po0zToO3jfFbxn34HjyuZeytDXvPqLNr/HZ/F+wzxZbVR0Lz59R7Vm9V
UUzTaL96X0ATdRbAYz4b7FHjTj3vGrxpnKME3ggYU/L5sP9v8KrxPvwNG4p1
v++goD16L4PKj0v/Qm/+YbTftb+03mnEqJPSnkrSLivP5z7VXZ6AQ2Hey4Sx
J++hqH3ndWedYd5DTbNWdWdtablmWbFFvW1E99LUTF53xnij8+B1vfeaUdtr
joP/ACx7afE=
         "]], PolygonBox[CompressedData["
1:eJwtkT8vg1EUh+89pYvSWCwM2hgtNYhPQK0WSTUGIy2JrkwGKT6AEjH5MxGa
bkgkEmzKgA74Bsxi8Jz83uHJfc59z733nPPmFlZmli2EkIcumCY4Z23ABD4F
u/gZFPEl6OB3UMYXTe57FbxkyvW9OXwPhmIIadjB26yjfBuAW/yYvQLrJPSk
QvggPsCb8IlfQBEfg1P8Buaj9i7xl6i7/M5n/JG9WlROL/e9Ex/idWjj91DG
V+HB1IPX6j1H8jPEs3gVst47dJM7CA183DSbDRjB6/AdlLOFn5hq9Z738S9o
RdXQwfOmsz7TXzyXxP5ev6kmr20TsinN1Gfrb6SJh025fsbvujLNznu6xp9M
vdaSWRyZai8ks942/Ysfzq/jayb3N6p4X3K/z+CPvFdTLf5P3vB/aJhFZA==

         "]], 
        PolygonBox[{{489, 488, 505, 87, 752}, {484, 44, 747, 488, 489}}]}]}, 
     {RGBColor[0.8608458411661262, 0.8797500325017846, 0.8700308391710991], 
      EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxNUrsvw1EYvb0/JFQwahePVVISf4FosUkM4tduJpFGa7URj/APeNQmTKSt
0WNpIzoZiNABi8XgMYkYxDn5TsJwcu79Xvd83/16pnMTc945Nw4EQDniXAHY
Bb7hWIKtF9wFLOI8CE7AlwSGgRdgCPZn8KazGOZ0oFgRtgfE33urdwd+g68B
5wDYAUoRi9vwZl8H58ArwDKwKi3U9AVMIj+KmBHgEOcpcMXZ+QhoCyzvCvZG
nF9hW6AGZ2/znsW9Dp4F5/XGivQfqRbfPI78zaMsrU/e7I/gcyCD8xn43Zs2
amSNqjNdP9JJvRlv9jQ4lO4ZzYT66uKK8se81RoFtwQ27yLO7UAW9la9Px+x
Pji/OBBTPwXNuBm5nezP29zp533bW/wWuOatziU4rXr8h17tQDc4hXs/MAA0
BaaXs+QuJOSr/usjq13gTlA39Z9ofzqlI6a8hPTRvuftT/LqLa43+/Wv/N9b
b/eY/AfeYvb1p+yBswm1p9QYDSyGsR/e9pb7+6nd5o6fesu50B6GqrWjfeRc
2wPTVdM8X7VbScWG0prSu9dAH/w3ys+pt5Lq8p+4o6yzpvknlV9Qzqp6DfTP
KfXH2F80oHPL
         "]], PolygonBox[CompressedData["
1:eJwtkjsvRFEUhffdd0gYjFJUJDqJSPADRIR6CjGmUyFiolYR8foDHtGhI0Tp
0RCUEglGo0LnUSmmEN/KvsWXrH32OWufs+7tnKwU59zMuiAHTxQ7idkxtKZm
49SHrF9BCZ2HMfQsNKMn4Bp9BKPoWhL9QfihfoVT1nahip6GKr1PqMO/n3rT
YsYfusnDWx7ymvKYrTM6+56Et/rf1H2waOEhrxMYZk8v5PFfp86hv+gvoPeg
jboH9j3eoHny+EXfwwq9eShwfsTjbfIfQJ/BEL0SnKNvoYJehhb2d1AvZfkU
PGZq9gvUp+EhL+2poT84153lpbdtsdaexJ030M8e2elOuttb9n6deUDPeHjr
G5TRdx53L8Ml+sJDKxNlc+CRjWZso1c9vkVKveaRibLRGxu576PH2/RP6N/Q
Hu1Vhg30bzyyUAbK4h+u9Eld
         "]]}]}, 
     {RGBColor[0.9144321319068063, 0.8976196326065207, 0.8460242289396981], 
      EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxNlLtS01EQxs//ZCzU0XEQobaSQKi0lJjwBtwCthYSCMQHwEACBZYSrtZe
kCA+gM4QKPQFMOEJdCA4Y2cncb85v/+E4pudPZfd73y7e+4/ezFa9M65PUPC
4CLnegz3DBvm1ti7YZuDtvbODq+b3TN8NJQNW4ZNwxJ2w/DIzm3ZvYdmS1G4
UzUssi//JWtrxJk1FIgzgz9kGDOMGlYM84aiIW0YZ+92Iqx9t1zLZuc4VyGe
fHGYNuThkCeHzmzzBt3dwVeuN/iKq/jffOd+CX5l+LZd0KzbEBl60XGG/UU4
rZBnnRhaz8GxAMcS2jzHLvDWWeJJr13DB8Nr7HvDY3QaMTR94N/w4f4aZyfI
o1iXLvC9a/jngu1iv8LbYh7T8MwYsmhU4S01aqra72Ol5yeszi5Z/E0XemqH
e9LilvEr2NpNH/RKGQaU24X+0Z0tuFSiTp+V4TEJr1gLvXPYMMWeerQadXp2
Ha4baK9YT9BlnPfl8Gdd4CHuEy7w1NoBb9qhj6T5GBqN4GtONC9vfYibJo/O
DeHPwzHmmoX7BGcz9EWO/QJ7Oeo3jv/VhxhfzH6Gl2p/JxGsekH9OIi+PxXb
3vErCj0rvfvRSfUu0Wdj5JiE6xxYpha76F1FzxoaDxC3h7jd+CnWellT/2lu
/vjAR7zknxtartOXOndhaBiahv24LwzJKJyLc7T5w8rUSjWT1n1ROFvnP9O/
prUu7lfplV34Z9FffBVPM/2b/KdwOoNrjb4WpwxvHuCOeOveJf+h/sUs+yl4
pemJB1jN8bVEyDPjQ44Tww/yHxmOXeiRJPn+MkeapxR9pDwt7jXQpXVFyzqx
tH+IPwyvQeJm6MVXFtebXfVB635y14gR61on1lMfOE75MBOaDf0jJ2h2Rh2P
uZ8kT5p6JKNOffrQZpM7yhn/Neq5Q95wQv4G/hF6xX6L3NJU2ubheMo5zY3m
5+BKPfqYA82DZv2cno3rL6seHaVuQ8zEArOkuSwyP730hHRs0hcX3M2jUYO1
Fv20xB+0DS/9qdcTIYZqorMRPap4nhwt6t12nb9Yeh2hn3T8D3GS9N8=
         "]], 
        PolygonBox[{{725, 409, 387, 718}, {634, 236, 215, 773}, {523, 107, 85,
          504}, {733, 430, 409, 784}, {543, 128, 107, 758}, {563, 150, 128, 
         543}, {718, 387, 366, 782}, {504, 85, 64, 751}, {687, 322, 301, 
         778}, {709, 366, 344, 699}, {675, 301, 279, 663}, {600, 193, 171, 
         582}, {582, 171, 150, 766}, {663, 279, 258, 777}, {616, 215, 193, 
         601}, {647, 258, 236, 634}, {698, 344, 322, 687}}]}]}}, {{}, 
     {GrayLevel[0], Opacity[0.4], 
      LineBox[{486, 485, 751, 504, 523, 525, 758, 543, 563, 564, 766, 582, 
       600, 601, 616, 617, 773, 634, 647, 648, 777, 663, 675, 676, 778, 687, 
       698, 699, 709, 710, 782, 718, 725, 726, 784, 733}]}, 
     {GrayLevel[0], Opacity[0.4], 
      LineBox[{467, 466, 484, 489, 752, 506, 524, 527, 544, 546, 762, 565, 
       583, 584, 602, 603, 618, 620, 774, 635, 649, 650, 664, 665, 677, 678, 
       779, 688, 700, 701, 711, 712, 783, 719, 727, 728, 734, 735}]}, 
     {GrayLevel[0], Opacity[0.4], 
      LineBox[{451, 449, 465, 471, 747, 488, 505, 508, 526, 529, 545, 548, 
       566, 568, 585, 587, 769, 604, 619, 621, 636, 637, 651, 652, 666, 667, 
       679, 680, 689, 690, 702, 703, 781, 713, 720, 721, 729, 730, 736, 
       737}]}, 
     {GrayLevel[0], Opacity[0.4], 
      LineBox[{739, 738, 732, 731, 723, 722, 715, 714, 705, 704, 692, 691, 
       682, 681, 669, 668, 654, 653, 639, 638, 623, 622, 606, 605, 588, 586, 
       570, 567, 550, 547, 531, 528, 510, 507, 491, 487, 470, 464, 448, 
       450}]}, 
     {GrayLevel[0], Opacity[0.4], 
      LineBox[{444, 447, 456, 469, 474, 490, 493, 509, 512, 530, 533, 549, 
       551, 569, 156, 589, 591, 607, 609, 624, 625, 640, 641, 655, 656, 670, 
       671, 683, 684, 693, 780, 694, 695, 706, 707, 716, 717, 724}]}, 
     {GrayLevel[0], Opacity[0.4], 
      LineBox[{708, 697, 696, 686, 685, 673, 672, 659, 658, 775, 657, 643, 
       642, 627, 626, 611, 610, 770, 608, 592, 590, 572, 571, 554, 552, 536, 
       534, 756, 532, 514, 511, 495, 492, 477, 473, 743, 468, 455, 446, 
       443}]}, 
     {GrayLevel[0], Opacity[0.4], 
      LineBox[{674, 662, 661, 776, 660, 645, 644, 630, 629, 771, 628, 613, 
       612, 595, 594, 767, 593, 574, 573, 557, 555, 759, 553, 537, 535, 517, 
       515, 753, 513, 497, 494, 479, 476, 744, 472, 458, 454, 740, 445, 
       442}]}, 
     {GrayLevel[0], Opacity[0.4], 
      LineBox[{452, 453, 741, 457, 461, 475, 745, 478, 481, 496, 748, 498, 
       500, 516, 754, 518, 519, 538, 539, 556, 760, 558, 559, 575, 763, 576, 
       577, 596, 768, 597, 598, 614, 615, 631, 772, 632, 633, 646}]}, 
     {GrayLevel[0], Opacity[0.4], 
      LineBox[{459, 460, 742, 462, 463, 480, 746, 482, 483, 499, 749, 501, 
       750, 502, 503, 520, 755, 521, 522, 540, 757, 541, 542, 560, 761, 561, 
       562, 578, 764, 579, 765, 580, 581, 599}]}, {}, {}, {}}}],
  AspectRatio->1,
  Frame->True,
  PlotRange->{{1., 21.}, {1., 21.}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellChangeTimes->{
  3.545737396800036*^9, {3.5457374845750103`*^9, 3.545737514004386*^9}, 
   3.545737686894003*^9, 3.545737726199092*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"int", "[", 
  RowBox[{"cb", ",", "wb", ",", "0", ",", "wa"}], "]"}]], "Input",
 CellChangeTimes->{{3.545678999217831*^9, 3.545679069863341*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{
   RowBox[{"Gamma", "[", 
    RowBox[{"2", "+", "cb", "+", "wb"}], "]"}], " ", 
   RowBox[{"Gamma", "[", 
    RowBox[{"2", "+", "wa", "+", "wb"}], "]"}]}], 
  RowBox[{
   RowBox[{"Gamma", "[", 
    RowBox[{"1", "+", "wb"}], "]"}], " ", 
   RowBox[{"Gamma", "[", 
    RowBox[{"3", "+", "cb", "+", "wa", "+", "wb"}], "]"}]}]]], "Output",
 CellChangeTimes->{{3.54567901083023*^9, 3.545679027936955*^9}, {
  3.545679064539777*^9, 3.545679071535732*^9}}]
}, Open  ]],

Cell["See who works for some confidence level.", "Text",
 CellChangeTimes->{{3.5455118733479*^9, 3.54551189058963*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Select", "[", 
  RowBox[{
   RowBox[{"Flatten", "[", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"cbl", ",", "wbl", ",", "cal", ",", "wal", ",", 
         RowBox[{"f", "[", 
          RowBox[{"cbl", ",", "wbl", ",", "cal", ",", "wal"}], "]"}]}], "}"}],
        ",", 
       RowBox[{"{", 
        RowBox[{"cbl", ",", "0", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"wbl", ",", "0", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"cal", ",", "0", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"wal", ",", "0", ",", "3"}], "}"}]}], "]"}], ",", "3"}], 
    "]"}], ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"#", "[", 
       RowBox[{"[", 
        RowBox[{"-", "1"}], "]"}], "]"}], ">", ".95"}], ")"}], "&"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.545507829589693*^9, 3.545507897644796*^9}, {
  3.545510441102703*^9, 3.545510452964733*^9}, {3.54551110737958*^9, 
  3.545511146152071*^9}, {3.545511257315633*^9, 3.545511318455338*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "2", ",", "3", ",", "0", ",", 
     FractionBox["34", "35"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "3", ",", "2", ",", "0", ",", 
     FractionBox["34", "35"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "3", ",", "3", ",", "0", ",", 
     FractionBox["69", "70"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "3", ",", "3", ",", "1", ",", 
     FractionBox["121", "126"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "3", ",", "0", ",", 
     FractionBox["121", "126"]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.545511123623292*^9, 3.545511147393926*^9}, {
  3.545511292446901*^9, 3.545511319198837*^9}}]
}, Open  ]]
}, Open  ]]
},
WindowSize->{854, 659},
WindowMargins->{{40, Automatic}, {Automatic, 0}},
ShowSelection->True,
FrontEndVersion->"7.0 for Mac OS X x86 (32-bit) (November 10, 2008)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[545, 20, 720, 12, 71, "Text"],
Cell[1268, 34, 558, 9, 41, "Text"],
Cell[1829, 45, 529, 8, 56, "Text"],
Cell[2361, 55, 947, 14, 86, "Text"],
Cell[CellGroupData[{
Cell[3333, 73, 170, 3, 27, "Input"],
Cell[3506, 78, 147, 2, 27, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3690, 85, 27, 0, 34, "Subsection"],
Cell[CellGroupData[{
Cell[3742, 89, 216, 5, 32, "Input"],
Cell[3961, 96, 843, 14, 70, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4841, 115, 147, 3, 32, "Input"],
Cell[4991, 120, 1165, 19, 70, "Output"]
}, Open  ]],
Cell[6171, 142, 49, 0, 31, "Text"],
Cell[CellGroupData[{
Cell[6245, 146, 600, 18, 55, "Input"],
Cell[6848, 166, 819, 12, 70, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[7716, 184, 28, 0, 26, "Subsection"],
Cell[CellGroupData[{
Cell[7769, 188, 325, 7, 32, "Input"],
Cell[8097, 197, 353, 7, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[8487, 209, 229, 5, 32, "Input"],
Cell[8719, 216, 965, 16, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[9721, 237, 272, 6, 32, "Input"],
Cell[9996, 245, 235, 5, 31, "Output"]
}, Open  ]],
Cell[10246, 253, 201, 3, 33, "Text"],
Cell[10450, 258, 842, 22, 77, "Input"],
Cell[CellGroupData[{
Cell[11317, 284, 82, 2, 32, "Input"],
Cell[11402, 288, 1291, 21, 52, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[12742, 315, 159, 2, 26, "Subsection"],
Cell[12904, 319, 430, 12, 32, "Input"],
Cell[CellGroupData[{
Cell[13359, 335, 519, 15, 55, "Input"],
Cell[13881, 352, 5165, 120, 173, "Output"]
}, Open  ]],
Cell[19061, 475, 132, 3, 31, "Text"],
Cell[CellGroupData[{
Cell[19218, 482, 625, 19, 32, "Input"],
Cell[19846, 503, 969, 28, 31, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[20864, 537, 203, 3, 26, "Subsection"],
Cell[21070, 542, 500, 8, 51, "Text"],
Cell[21573, 552, 3342, 82, 231, "Input"],
Cell[24918, 636, 2374, 63, 121, "Input"],
Cell[27295, 701, 258, 5, 31, "Text"],
Cell[27556, 708, 4206, 90, 165, "Input"],
Cell[31765, 800, 6640, 162, 451, "Input"],
Cell[38408, 964, 328, 6, 51, "Text"],
Cell[38739, 972, 4512, 118, 209, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[43288, 1095, 94, 1, 26, "Subsection"],
Cell[43385, 1098, 107, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[43517, 1103, 824, 18, 32, "Input"],
Cell[44344, 1123, 1891, 27, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[46272, 1155, 966, 23, 55, "Input"],
Cell[47241, 1180, 202, 3, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[47480, 1188, 1592, 26, 32, "Input"],
Cell[49075, 1216, 1264, 28, 92, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[50376, 1249, 1419, 21, 32, "Input"],
Cell[51798, 1272, 1395, 29, 92, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[53230, 1306, 364, 6, 32, "Input"],
Cell[53597, 1314, 1495, 49, 80, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[55129, 1368, 181, 4, 32, "Input"],
Cell[55313, 1374, 1232, 39, 63, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[56594, 1419, 217, 3, 26, "Subsection"],
Cell[CellGroupData[{
Cell[56836, 1426, 209, 3, 29, "Subsubsection"],
Cell[CellGroupData[{
Cell[57070, 1433, 1710, 28, 32, "Input"],
Cell[58783, 1463, 1556, 35, 92, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[60376, 1503, 1859, 31, 32, "Input"],
Cell[62238, 1536, 1163, 27, 72, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[63438, 1568, 1787, 29, 32, "Input"],
Cell[65228, 1599, 1295, 28, 72, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[66560, 1632, 1740, 29, 32, "Input"],
Cell[68303, 1663, 1452, 32, 92, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[69792, 1700, 1741, 29, 32, "Input"],
Cell[71536, 1731, 1284, 28, 92, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[72857, 1764, 1614, 26, 32, "Input"],
Cell[74474, 1792, 1320, 28, 92, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[75831, 1825, 1664, 27, 32, "Input"],
Cell[77498, 1854, 1365, 29, 92, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[78900, 1888, 1713, 28, 32, "Input"],
Cell[80616, 1918, 1343, 29, 72, "Output"]
}, Open  ]],
Cell[81974, 1950, 406, 11, 32, "Input"],
Cell[82383, 1963, 915, 21, 55, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[83335, 1989, 108, 1, 23, "Subsubsection"],
Cell[83446, 1992, 223, 5, 32, "Input"],
Cell[CellGroupData[{
Cell[83694, 2001, 1314, 36, 77, "Input"],
Cell[85011, 2039, 2565, 45, 225, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[87613, 2089, 514, 15, 32, "Input"],
Cell[88130, 2106, 11312, 351, 238, "Output"]
}, Open  ]],
Cell[99457, 2460, 124, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[99606, 2465, 732, 19, 32, "Input"],
Cell[100341, 2486, 15318, 470, 321, "Output"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[115720, 2963, 169, 2, 26, "Subsection"],
Cell[115892, 2967, 637, 10, 51, "Text"],
Cell[CellGroupData[{
Cell[116554, 2981, 1749, 30, 32, "Input"],
Cell[118306, 3013, 1503, 31, 104, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[119846, 3049, 309, 7, 32, "Input"],
Cell[120158, 3058, 138, 2, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[120333, 3065, 1769, 30, 55, "Input"],
Cell[122105, 3097, 1413, 30, 104, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[123555, 3132, 321, 7, 32, "Input"],
Cell[123879, 3141, 110, 1, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[124026, 3147, 1792, 31, 55, "Input"],
Cell[125821, 3180, 1361, 29, 104, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[127219, 3214, 341, 7, 32, "Input"],
Cell[127563, 3223, 87, 1, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[127687, 3229, 1750, 30, 32, "Input"],
Cell[129440, 3261, 1312, 27, 103, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[130789, 3293, 334, 7, 32, "Input"],
Cell[131126, 3302, 88, 1, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[131251, 3308, 1910, 33, 55, "Input"],
Cell[133164, 3343, 710, 13, 24, "Message"],
Cell[133877, 3358, 710, 13, 24, "Message"],
Cell[134590, 3373, 1287, 29, 92, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[135914, 3407, 340, 7, 32, "Input"],
Cell[136257, 3416, 87, 1, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[136381, 3422, 1849, 33, 55, "Input"],
Cell[138233, 3457, 1057, 18, 45, "Message"],
Cell[139293, 3477, 1041, 18, 65, "Message"],
Cell[140337, 3497, 1307, 29, 104, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[141681, 3531, 362, 8, 32, "Input"],
Cell[142046, 3541, 88, 1, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[142171, 3547, 1929, 34, 55, "Input"],
Cell[144103, 3583, 916, 15, 85, "Message"],
Cell[145022, 3600, 1362, 30, 92, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[146421, 3635, 329, 7, 32, "Input"],
Cell[146753, 3644, 109, 1, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[146899, 3650, 1940, 34, 55, "Input"],
Cell[148842, 3686, 872, 15, 85, "Message"],
Cell[149717, 3703, 688, 13, 24, "Message"],
Cell[150408, 3718, 1292, 29, 104, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[151737, 3752, 334, 7, 32, "Input"],
Cell[152074, 3761, 88, 1, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[152199, 3767, 1968, 34, 55, "Input"],
Cell[154170, 3803, 1256, 28, 112, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[155463, 3836, 336, 7, 32, "Input"],
Cell[155802, 3845, 88, 1, 31, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[155939, 3852, 164, 2, 26, "Subsection"],
Cell[156106, 3856, 475, 8, 51, "Text"],
Cell[CellGroupData[{
Cell[156606, 3868, 1398, 22, 32, "Input"],
Cell[158007, 3892, 1299, 27, 92, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[159343, 3924, 1439, 23, 32, "Input"],
Cell[160785, 3949, 1323, 29, 92, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[162145, 3983, 1454, 23, 32, "Input"],
Cell[163602, 4008, 1365, 29, 92, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[165004, 4042, 1426, 23, 32, "Input"],
Cell[166433, 4067, 1351, 29, 92, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[167821, 4101, 1585, 27, 32, "Input"],
Cell[169409, 4130, 609, 11, 65, "Message"],
Cell[170021, 4143, 609, 11, 65, "Message"],
Cell[170633, 4156, 609, 11, 65, "Message"],
Cell[171245, 4169, 680, 12, 24, "Message"],
Cell[171928, 4183, 1350, 30, 92, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[173315, 4218, 1581, 27, 32, "Input"],
Cell[174899, 4247, 1041, 18, 45, "Message"],
Cell[175943, 4267, 1217, 27, 92, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[177197, 4299, 1625, 28, 32, "Input"],
Cell[178825, 4329, 584, 10, 65, "Message"],
Cell[179412, 4341, 584, 10, 65, "Message"],
Cell[179999, 4353, 584, 10, 65, "Message"],
Cell[180586, 4365, 655, 11, 24, "Message"],
Cell[181244, 4378, 1328, 30, 92, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[182609, 4413, 1674, 28, 32, "Input"],
Cell[184286, 4443, 584, 10, 65, "Message"],
Cell[184873, 4455, 584, 10, 65, "Message"],
Cell[185460, 4467, 584, 10, 65, "Message"],
Cell[186047, 4479, 655, 11, 24, "Message"],
Cell[186705, 4492, 1272, 27, 92, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[188014, 4524, 1631, 28, 32, "Input"],
Cell[189648, 4554, 1228, 26, 92, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[190925, 4586, 163, 2, 26, "Subsection"],
Cell[191091, 4590, 351, 6, 41, "Text"],
Cell[191445, 4598, 738, 21, 27, "Input"],
Cell[CellGroupData[{
Cell[192208, 4623, 504, 15, 27, "Input"],
Cell[192715, 4640, 430, 7, 27, "Output"]
}, Open  ]],
Cell[193160, 4650, 128, 1, 26, "Text"],
Cell[CellGroupData[{
Cell[193313, 4655, 885, 26, 43, "Input"],
Cell[194201, 4683, 322, 9, 47, "Output"]
}, Open  ]],
Cell[194538, 4695, 232, 5, 26, "Text"],
Cell[194773, 4702, 1573, 36, 43, "Input"],
Cell[196349, 4740, 183, 4, 26, "Text"],
Cell[196535, 4746, 1959, 51, 73, "Input"],
Cell[198497, 4799, 2403, 60, 88, "Input"],
Cell[CellGroupData[{
Cell[200925, 4863, 664, 17, 43, "Input"],
Cell[201592, 4882, 2841, 84, 58, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[204470, 4971, 821, 21, 43, "Input"],
Cell[205294, 4994, 387, 8, 47, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[205718, 5007, 1051, 25, 43, "Input"],
Cell[206772, 5034, 337246, 5567, 168, "Output"]
}, Open  ]],
Cell[544033, 10604, 1134, 25, 43, "Input"],
Cell[CellGroupData[{
Cell[545192, 10633, 1154, 27, 43, "Input"],
Cell[546349, 10662, 21417, 376, 376, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[567803, 11043, 168, 3, 27, "Input"],
Cell[567974, 11048, 488, 13, 48, "Output"]
}, Open  ]],
Cell[568477, 11064, 119, 1, 26, "Text"],
Cell[CellGroupData[{
Cell[568621, 11069, 1080, 30, 43, "Input"],
Cell[569704, 11101, 747, 19, 47, "Output"]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
