-------------------------------------------------------------------------------

Stage 1 specification

The goal of this stage is to demonstrate that the javascript
libraries are capable of producing a stable, cross-platform
user interface, having the minimal functionality needed for 
solving an example problem.

Supporting materials can be found on our Bugzilla, Bugs #1423, 1474, 
1486, 1488, 1489.  See http://www.andestutor.org/bugzilla.
Also see Section 2.1.2 of the Spring 2008, IES grant proposal.
The "drawing demo" is at http://gideon.eas.asu.edu/web-UI/ and
the Tim Nokes demo solution and associated log file are at 
http://www.andestutor.org/AAPT-2007/Nokes_Example.swf and
http://www.andestutor.org/AAPT-2007/nokes_demo_s2e.html.
The Andes problem chooser tool can be found at http://www.andestutor.org/sets
An example variable name matcher variablename.js can be found at
http://gideon.eas.asu.edu/web-UI/variablename.js

1.  Due date:  Midnight, Arizona time, March 13, 2009

2.  The drawing application should be tested on recent versions
of Firefox and Safari browsers.  It should be tested on versions
6, 7 and 8 (beta) of Internet Explorer.

3.  On all browsers, the testing should not raise any errors:
     IE enable "Display notification about every script error" 
     Firefox errors reported by firebug.
     Safari errors reported by "Develop" menu.

4.  Download of the application should take less than 13 seconds 
on a Cox Cable connection, where the measured download
bandwidth is 1.5 Mbits/s and measured upload bandwidth is 250 kbits/s.
[13 seconds is the median time for students, after opening
an Andes problem, to start doing something.  This number is based
from analysis of the USNA 2007-2008 log files.  Currently, I am 
measuring 35 seconds for the above benchmark using the drawing demo 
on a fast machine, so I don't know if this target is realistic.]

5.  The drawing application should handle all of the user steps
shown in the Nokes demo solution with the following exceptions:
    a.  All of the dialog boxes associated with defining
        quantities (variables, bodies, axes and vectors) are replaced 
	with plain text entry dialog boxes.
    b.  Choosing the sought quantity is replaced by plain text entry 
         in the help dialog window.
    d.  Entry of Greek letters is done with plain text in LaTeX style.

6.  At any step in the problem-solving process, the user should be 
able to re-size the figure, re-size the window, and scroll the 
drawing area (if possible).  The drawing area "canvas" should have
the following behaviors:  
    a.  rescaling should be consistent:  a given slider position
        should correspond to a given magnification.
    b.  Define a minimum canvas size determined as the smallest
        box containing all drawn objects and the initial drawing
        area, plus a margin.
        If the window is smaller than the minimum canvas, a single 
        scrollbar appears in each relevant dimension.
    c.  If the window is resized to be larger than the canvas, 
        the canvas size is increased to fill the window.

7.  The drawing tool will have a toolbar and menu area as described 
in the supporting materials.  However, for Step 1, we are looking for
minimum functionality:
    a.  The toolbar may be horizontal rather than on the left hand side.
    b.  The menu bar, menus, and score must be present but need not
        be functional.
    c.  The toolbar only needs to contain the axis tool, vector drawing 
        tool, a circle tool, equation tool, definition
        tool, rectangle tool, and help button.
    d. The menu bar does not need to be functional.

8.  More details on the functionality of the drawing tools.
    a.  When vectors and axes are swept out, the angle is shown 
        on the screen.  See Bug #1489, comment #5.
    b.  The dialog boxes associated with vector drawing (as well as
        other tools) will consist of one text input field.  A
        javascript routine supplied by the ASU team will determine if
        the input text defines a variable.  See the example in
        variablename.js.  If no variable definition is found, the
        input text will be attached to the vector, as in the drawing
        demo.  If a variable definition is found, the variable name
        will be attached to the vector, while the full input text will
        be attached to the cursor and the student can place it
        anywhere on the drawing area with a subsequent mouse click;
        the vector and the input text can be moved independently.
    c.  The text and equation tools can be either be used with a 
        single click or by dragging out a box.  In the case of a 
        single click, the width of the subsequent text box will be 
        determined by the contents.  If a box is dragged out, the
	width of the subsequent text box will be determined from that.
        Text will be wrapped according to the box width.
    d.  After an object is drawn, a description is sent to the help 
        system.  The drawn object will later be updated by information
	from the help system.  The color will be updated to red/green
        and the text will be updated by a mixture of text and binary
        graphic images from the help system.  (See the equation formatting
        on www.physicsforum.com for examples.)
    e.  As in the drawing demo, double-clicking on an object will allow
        modification of the text.  Single clicking will select an object,
        the delete key will remove selected object, et cetera.
    f.  On download, the drawing tool should show the problem statement,
        associated graphics, and pre-defined quantities almost immediately.
	The toolbars, menus, and associated functionality may appear later.
   
9.  Help dialog window.
    a.  The help dialog window will be opened or brought into view if the help 
	button on the drawing application is pressed.
    b.  It is supposed to look and function like a standard chat program.
    c.  Unlike Andes2, it is not modal with respect to the drawing application.
    d.  To ask for help, the student types "help" in the help dialog window.
    e.  The help system will send plain text, which may include clickable 
        URL's.  It will also send messages that require a
        multiple-choice response.  The help dialog window needs to
        provide a mechanism for the student to enter a reply (either
        via radio buttons or clicking a link).  
	[In Andes2 most of the student replies are multiple-choice].
        As mentioned above, choosing the sought quantity will be done via text entry.

10.  Window for selecting a principle of physics.  The ASU team will supply the 
       the json code for constructing an window where the student can select a 
       principle of physics.  See the Andes problem chooser tool for 
       a similar application.  We need a way of writing Greek letters in the menu.

11.  In order for the the drawing application to function, it must be 
     connected to a server.  Since our  partners (WebAssign and LON-CAPA) use perl 
     extensively, we would prefer to use perl-based tools on the server.

12.  The ASU team will specify the API for communication 
    between the server and the drawing application, to be completed by January 15,
    subject to further revision, as needed.  This is roughly analogous
    to the (undocumented) API used in Andes2, see the Nokes demo log file
    for an example.
     a.  The API will use json and include a json schema and written description.
     b.  The API will be specified with sufficient detail so that the Nokes
          demo solution can be sucessfully completed.
     c.  SVG is not sufficiently abstract:  the API should divide visual
         presentation from content.  Thus, vectors should be
	 described by position coordinates, length, angle, defining text, and
         status (right, wrong, unknown, fade, or locked).
     d.  For Step 1, visual presentation (colors, line widths, arrow shapes, 
	 etc.) will be hard-coded into the drawing application.  However, in 
         later Steps, such style information should be transferable back 
	 and forth to the server.
     e.  Problem text and any pre-defined quantities will be delivered
         to the client through the API.

13.    The server will be running a lisp application called the "help system" 
     that analyzes student entries and provides hints on demand.  
     The team at ASU will give the help system the required
     functionality and interface the help system with the web server.
     The help system will use the same API as used for client-server 
     communication.

14.  The ASU team will provide a working help system that implements
       the above API by January 30.

15.  The team at ASU will be responsible for testing of the drawing interface.
     Usability testing will be carried out using paid student volunteers.
     Since we won't have the partial scaffolding mechanism (as described in 
     the IES grant proposal), the students will follow a set of written 
     instructions.

16.  Through the development process, the code for both the help system and
     the drawing utility will be kept in publicly accessible repositories.
     Bug reporting will be handled through the normal dojo project mechanisms.
     Also, any errors in the documentation will be reported through the normal
     dojo project mechanisms and must be addressed by the project completion
     date.  All code developed for this project will have the associated 
     documentation and comments written simultaneously.

17.  The team at ASU will provide server hardware and give members 
     of the development team login access to the server, as needed.   The ASU
     team will provide a source control repository for any code not placed in the dojo project.
     This code will be made publically available under an open source license
     on a third-party server, as specified in the existing agreement between the ASU team
     and WebAssign.

-------------------------------------------------------------------------------

Step 2

These are items that need to be completed in order for Andes to be used for
a classroom course.  The target date for deployment is August 2009,
so these targets will need to to be completed by mid-June 2009. 

1.  Implement the input method described in Bug #1488.

2.  Good behavior for back, window close, and reload buttons.  The back 
     and window close buttons will end a user session.  The reload button
     will end a user session and start a new one.

3.  Good behavior for losing Internet connection for a while:
       can still do problem solving steps, but messages to 
       server are queued until the server is back on.  Help system
       replies are handled properly even if there is a delay (red/green, 
       format for equations, hint messages, etc.).

5.  The level and quality of the documentation and comments in any new 
    code will match the documentation associated with the present dojo 
    core libraries.

6.  When selecting an object, a region around the object should be
    selectable, instead of just the object itself.  In the drawing
    demo, one must hit the object, which can be hard if a line is thin.

7.  Using rectangle to mark selected object doesn't make sense.  Should
    have some alternative like fading the object or having some bounding
    shape that matches the object.

12. Implement the following menu items described in Bug #1489:
      File:  close:  Close a problem and possibly navigate back to the list of problems, may have the
             	     same behavior as the "back button."
	     print:  Standard print button.
      Physics:  All items in this menu point to external html files which then open
      		    in a separate window.  Students generally like to have these available when
		    solving a problem.  The html pages are all printable.
	     list of scalar quantities with example text for definition
    	     list of physics principles.
    	     list of pre-defined constants
    	     list of notational conventions.
    	     list of mini-lessons on various topics.
      The html pages will be supplied by the ASU team.

14. Specify and implement user interface actions for drawing 3-D
    vectors.

15. Draw lines, as needed for current optics problems.

16.  Help with Greek letter input.

17. Implement the fading method described in the IES grant proposal.

18. Scaling to many simultaneous users.

19.  Integration into WebAssign.

-------------------------------------------------------------------------------

Beyond step 2.

These are things we want to do, but are not needed for a minimally working 
course starting fall 2009.

1. Specify and implement input formatting for equations.  I consider this
    to be an unsolved problem.  Most of the homework forums
            physicsforums.com
	    freemathhelp.com
	    mathhelpforum.com
	    mathgoodies.com
	    sosmathhelp.com
    use LaTeX-style equation formatting, which produces pretty results,
    is pleasant for experts to use, but is hard for students to start using.
    Cramster.com has a Microsoft equation editor-like tool which is easy
    for students, but would be annoying for experts, and the results
    are relatively ugly.  In addition, we are interested in parsing
    the equations for semantic meaning, rather than just displaying an 
    equation, which would suggest some format closer to Mathematica/Maple/
    Mathcad would be more appropriate.  Also, the "Microsoft excel-like"
    input formatting we have used for Andes2 has, in fact, worked fairly well.

    In any case, there must be some sort of "equation palette" for 
    beginners with some smooth transition path to a text entry
    method that uses ordinary keyboard characters, for expert users.

9.  Style sheets for visual formatting of drawn objects.  Visual formatting
    would include colors, line widths, arrow shapes, etc.  There should
    be a menu/dialog box for adjusting these on the drawing application.  
    The style sheets should be upload-able and download-able from the server.

11. Make a version that can be used as a collaborative problem solving 
    tool for use on online homework forums like the ones mentioned
    above.

2.  Working undo button.  I am not sure if this is a good idea, since generating
the associated help would be difficult.  It may be useful in the context of a generic
collaborative whiteboard.

3.  Logging of UI events at level of keystrokes/mouseclicks.  Kurt and I disagree about
this one [Kurt says it is not useful].

4.  Representation for objects on system clipboard for sharing beteen applications.

8.  Regular editing features, cut, copy, paste, with associated keyboard shortcuts.  
     Andes2 has this functionality, but it is currently only useful for equations.
     In Andes2, if any drawn object is cut and pasted, the result turns red since it is a duplicate
     of the original object. 

-------------------------------------------------------------------------------
