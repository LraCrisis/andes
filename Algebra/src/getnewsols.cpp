// getsols.cpp   get solutions from file, andes 2 format
// Copyright (C) 2001 by Joel A. Shapiro -- All Rights Reserved

#include <math.h>
#include "decl.h"
#include "extoper.h"
#include "extstruct.h"
#include "dbg.h"
#define DBG(A) DBGF(GETSOLS,A)

int getavarwu(const string bufst, const bool varNew, 		// in getall
	       const bool valToo, double & SIvalue);

/************************************************************************
 * getsols    reads a solution file generated by colander, and returns  *
 *	a vector of doubles holding the values of the variables		*
 *	in STANDARD MKS UNITS, not in the given units.			*
 ************************************************************************/
vector<double> *getsols(ifstream & solfile)
{
  int k;
  double value;
  int varindex;
  DBG( cout << "Entering getsols" << endl; );
  vector<string> *solstr = geteqsfromeqsfile (solfile);
  DBG( cout << "getsols got " << solstr->size()<< endl; );
  solfile.close();
  // eliminate throw - we may have canonvars that don't have/need solutions
  DBG( if (canonvars->size() > solstr->size())
       cout << "number of vars solved less than number which appear" << endl;);
  numsols = new vector<double>(canonvars->size(),HUGE_VAL);
  for (k=0; k < solstr->size(); k++)
    {
      if ((varindex = getavarwu((*solstr)[k],false,true,value)) < 0)
	throw(string("getavarwu failed in getsols"));

      if ((*numsols)[varindex] == HUGE_VAL)
	(*numsols)[varindex] = value;
      else throw(string("Tried to set same variable twice"));
    }
  for (k = 0; k < canonvars->size(); k++) if ((*numsols)[k] == HUGE_VAL)
    cout << "Left with unsolved for variable " << (*canonvars)[k]->clipsname
	 << endl;
  return(numsols);
}
