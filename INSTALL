#
#      Instructions for Installing Andes
#
# Andes been used extensively with sbcl and Allegro lisp,
# but the webserver functionality has only been tested for sbcl.
# The following install procedure has been tested on Linux and OS X.

# Set up an account for yourself at github, providing your ssh key 
# (see "Generating SSH keys" at http://help.github.com/), and send
# your user name to help@andestutor.org.

# To install the Andes repository in directory "andes" use:
git clone git@github.com:bvds/andes.git andes

# Switch to the stable branch of Andes;  the "master"
# branch is for development.
cd andes; git checkout --track -b stable origin/stable

# Compile the solver library and executable:
make install-solver

# For the system to work, a library of problem definitions 
# must be included.  The original Andes problem definitions
# are under copyright and not publicly available.  For access,
# send your ssh public key to help@andestutor.org  The git command
# to download this library is (from the Andes root directory):
git clone ssh://git@andestutor.org/home/git/Andes-problems.git/ problems

# Likewise, at least for Andes2, one can use the solutions repository:
git clone ssh://git@andestutor.org/home/git/Andes-solutions.git/ solutions

# ImageMagick http://www.imagemagick.org is used to dimension graphics
# files.  This is included in standard linux distributions (but not OS X).
identify --version

====================== SBCL ===============================

# The sbcl website is http://sbcl.sourceforge.net/.
# A list of all releases can be found at:
# http://sourceforge.net/projects/sbcl/files/
# You will need a version that includes thread support.  However,
# recent binary releases of sbcl do not include thread support.
cd lisp-site-install
make get-binary     # download a binary release
make thread-test    # verify threading is missing (otherwise, just install)
make get-source     # download and compile source, with thread support
make source-install # install in /usr/local (must be done as root)
cd ../

# To test for thread support, start up sbcl and enter the 
# command "(find :sb-thread *features*)" then enter "(quit)" to exit

# A sample sbcl startup file has been included as sbclrc-sample.
# You will need to change the path to your Andes root directory
# and copy it to your home directory:
cp sbclrc-sample ~/.sbclrc
# Change the path in the sample file to your path.

#Install site-wide sbcl libraries:
su root
make install-site-libraries

============================ MySql =======================================

# To save session data, we use MySql.  First, mysql server must be started.
# As root:
  /sbin/chkconfig mysqld on
  /sbin/service mysqld start
# Then set the root password and restart:
  /usr/bin/mysqladmin -u root password 'sin(0)=0'
  /sbin/service mysqld restart
# (In OS X, go to http://dev.mysql.com, install mysql and MySQLStartupItem,
# add /usr/local/mysql/bin to PATH in ~/.profile,
# execute "(cd /usr/local/lib; ln -s ../mysql/lib/lib*.{a,dylib} .)"
# execute "sudo /Library/StartupItems/MySQLCOM/MySQLCOM start", and
# set the root mysql password using the above command.) 

# Set up tables in database:
make install-database

# Finally, the lisp package clsql will need the mysql header files.  
# In Linux systems, these are provided by mysql-devel; enter 
# "rpm -q mysql-devel" to see if it has been installed.

=============== Apache Web Server =================================

# As root, configure Apache as a reverse proxy server, with json-rpc 
# error messages.  Add links to DocumentRoot.
make configure-httpd

# Start up Apache.  As root:
  /sbin/chkconfig httpd on
  /sbin/service httpd start

====================== Javascript ===================================

# Make and build the javascript.  First we need to get 
# the Dojo library, then we need to make an Andes-specific
# build.  Right now, this uses the development version of Dojo;
# we should later switch to using releases of Dojo.
make install-dojo

#   verify that the file web-UI/index.html has isDebug = false;

====================== Run Help Server ===============================

;; To run the Help Server in lisp, type "screen" on the command line,
;; then type "sbcl" to start up lisp, then:
(rhelp)
(start-help)
;; At this point, you can type the screen commands ctl-a ctl-d 
;; to detach from the lisp process; see the documentation for screen.
;; By default, the help server will log in file "help-server.log"

;; To stop the lisp server:
(stop-help)
;; There is a bug, which causes shut-down to hang, see
;; http://common-lisp.net/pipermail/tbnl-devel/2009-February/004608.html
;; http://common-lisp.net/pipermail/tbnl-devel/2009-February/004589.html

;; to exit lisp:
(quit)

=============================== Updates ===============================

#  Update software:
make update

#  Restart the Andes help server; reattach to the server using screen:
screen -r

  ;; In lisp, stop the server, reload and restart:
  (stop-help)
  ;; There is a bug, which causes shut-down to hang, see
  ;; http://common-lisp.net/pipermail/tbnl-devel/2009-February/004608.html
  ;; http://common-lisp.net/pipermail/tbnl-devel/2009-February/004589.html
  (rhelp)
  (start-help)
  ;; At this point, you can type ctl-a ctl-d to detach from the 
  ;; lisp process; see the documentation for screen.

============================================================================
